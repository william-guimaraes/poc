"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _SwitchboardIntegrationCreateBody = _interopRequireDefault(require("../sunshine-conversations-client.model/SwitchboardIntegrationCreateBody"));
var _SwitchboardIntegrationListResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/SwitchboardIntegrationListResponse"));
var _SwitchboardIntegrationResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/SwitchboardIntegrationResponse"));
var _SwitchboardIntegrationUpdateBody = _interopRequireDefault(require("../sunshine-conversations-client.model/SwitchboardIntegrationUpdateBody"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* SwitchboardIntegrations service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/SwitchboardIntegrationsApi
* @version 9.14.0
*/
var SwitchboardIntegrationsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new SwitchboardIntegrationsApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/SwitchboardIntegrationsApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function SwitchboardIntegrationsApi(apiClient) {
    _classCallCheck(this, SwitchboardIntegrationsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create Switchboard Integration
   * Create a switchboard integration.
   * @param {String} appId Identifies the app.
   * @param {String} switchboardId Identifies the switchboard.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationCreateBody} switchboardIntegrationCreateBody 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationResponse} and HTTP response
   */
  _createClass(SwitchboardIntegrationsApi, [{
    key: "createSwitchboardIntegrationWithHttpInfo",
    value: function createSwitchboardIntegrationWithHttpInfo(appId, switchboardId, switchboardIntegrationCreateBody) {
      var postBody = switchboardIntegrationCreateBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createSwitchboardIntegration");
      }
      // verify the required parameter 'switchboardId' is set
      if (switchboardId === undefined || switchboardId === null) {
        throw new Error("Missing the required parameter 'switchboardId' when calling createSwitchboardIntegration");
      }
      // verify the required parameter 'switchboardIntegrationCreateBody' is set
      if (switchboardIntegrationCreateBody === undefined || switchboardIntegrationCreateBody === null) {
        throw new Error("Missing the required parameter 'switchboardIntegrationCreateBody' when calling createSwitchboardIntegration");
      }
      var pathParams = {
        'appId': appId,
        'switchboardId': switchboardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SwitchboardIntegrationResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create Switchboard Integration
     * Create a switchboard integration.
     * @param {String} appId Identifies the app.
     * @param {String} switchboardId Identifies the switchboard.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationCreateBody} switchboardIntegrationCreateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationResponse}
     */
  }, {
    key: "createSwitchboardIntegration",
    value: function createSwitchboardIntegration(appId, switchboardId, switchboardIntegrationCreateBody) {
      return this.createSwitchboardIntegrationWithHttpInfo(appId, switchboardId, switchboardIntegrationCreateBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete Switchboard Integration
     * Deletes the switchboard integration. If the deleted switchboard integration had an active status for some conversations, the default switchboard integration will replace it. Note that it is forbidden to delete a switchboard integration if it's the default one (a new one must be chosen first) or if another switchboard integration's `nextSwitchboardIntegrationId` refers to it. The integration that was linked to the deleted switchboard integration will start receiving all conversation events, regardless of the switchboard status.
     * @param {String} appId Identifies the app.
     * @param {String} switchboardId Identifies the switchboard.
     * @param {String} switchboardIntegrationId Identifies the switchboard integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "deleteSwitchboardIntegrationWithHttpInfo",
    value: function deleteSwitchboardIntegrationWithHttpInfo(appId, switchboardId, switchboardIntegrationId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteSwitchboardIntegration");
      }
      // verify the required parameter 'switchboardId' is set
      if (switchboardId === undefined || switchboardId === null) {
        throw new Error("Missing the required parameter 'switchboardId' when calling deleteSwitchboardIntegration");
      }
      // verify the required parameter 'switchboardIntegrationId' is set
      if (switchboardIntegrationId === undefined || switchboardIntegrationId === null) {
        throw new Error("Missing the required parameter 'switchboardIntegrationId' when calling deleteSwitchboardIntegration");
      }
      var pathParams = {
        'appId': appId,
        'switchboardId': switchboardId,
        'switchboardIntegrationId': switchboardIntegrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations/{switchboardIntegrationId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Switchboard Integration
     * Deletes the switchboard integration. If the deleted switchboard integration had an active status for some conversations, the default switchboard integration will replace it. Note that it is forbidden to delete a switchboard integration if it's the default one (a new one must be chosen first) or if another switchboard integration's `nextSwitchboardIntegrationId` refers to it. The integration that was linked to the deleted switchboard integration will start receiving all conversation events, regardless of the switchboard status.
     * @param {String} appId Identifies the app.
     * @param {String} switchboardId Identifies the switchboard.
     * @param {String} switchboardIntegrationId Identifies the switchboard integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "deleteSwitchboardIntegration",
    value: function deleteSwitchboardIntegration(appId, switchboardId, switchboardIntegrationId) {
      return this.deleteSwitchboardIntegrationWithHttpInfo(appId, switchboardId, switchboardIntegrationId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Switchboard Integrations
     * Lists all switchboard integrations linked to the switchboard. 
     * @param {String} appId Identifies the app.
     * @param {String} switchboardId Identifies the switchboard.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationListResponse} and HTTP response
     */
  }, {
    key: "listSwitchboardIntegrationsWithHttpInfo",
    value: function listSwitchboardIntegrationsWithHttpInfo(appId, switchboardId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listSwitchboardIntegrations");
      }
      // verify the required parameter 'switchboardId' is set
      if (switchboardId === undefined || switchboardId === null) {
        throw new Error("Missing the required parameter 'switchboardId' when calling listSwitchboardIntegrations");
      }
      var pathParams = {
        'appId': appId,
        'switchboardId': switchboardId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SwitchboardIntegrationListResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Switchboard Integrations
     * Lists all switchboard integrations linked to the switchboard. 
     * @param {String} appId Identifies the app.
     * @param {String} switchboardId Identifies the switchboard.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationListResponse}
     */
  }, {
    key: "listSwitchboardIntegrations",
    value: function listSwitchboardIntegrations(appId, switchboardId) {
      return this.listSwitchboardIntegrationsWithHttpInfo(appId, switchboardId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update Switchboard Integration
     * Updates a switchboard integration record.
     * @param {String} appId Identifies the app.
     * @param {String} switchboardId Identifies the switchboard.
     * @param {String} switchboardIntegrationId Identifies the switchboard integration.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationUpdateBody} switchboardIntegrationUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationResponse} and HTTP response
     */
  }, {
    key: "updateSwitchboardIntegrationWithHttpInfo",
    value: function updateSwitchboardIntegrationWithHttpInfo(appId, switchboardId, switchboardIntegrationId, switchboardIntegrationUpdateBody) {
      var postBody = switchboardIntegrationUpdateBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateSwitchboardIntegration");
      }
      // verify the required parameter 'switchboardId' is set
      if (switchboardId === undefined || switchboardId === null) {
        throw new Error("Missing the required parameter 'switchboardId' when calling updateSwitchboardIntegration");
      }
      // verify the required parameter 'switchboardIntegrationId' is set
      if (switchboardIntegrationId === undefined || switchboardIntegrationId === null) {
        throw new Error("Missing the required parameter 'switchboardIntegrationId' when calling updateSwitchboardIntegration");
      }
      // verify the required parameter 'switchboardIntegrationUpdateBody' is set
      if (switchboardIntegrationUpdateBody === undefined || switchboardIntegrationUpdateBody === null) {
        throw new Error("Missing the required parameter 'switchboardIntegrationUpdateBody' when calling updateSwitchboardIntegration");
      }
      var pathParams = {
        'appId': appId,
        'switchboardId': switchboardId,
        'switchboardIntegrationId': switchboardIntegrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SwitchboardIntegrationResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/switchboards/{switchboardId}/switchboardIntegrations/{switchboardIntegrationId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update Switchboard Integration
     * Updates a switchboard integration record.
     * @param {String} appId Identifies the app.
     * @param {String} switchboardId Identifies the switchboard.
     * @param {String} switchboardIntegrationId Identifies the switchboard integration.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationUpdateBody} switchboardIntegrationUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationResponse}
     */
  }, {
    key: "updateSwitchboardIntegration",
    value: function updateSwitchboardIntegration(appId, switchboardId, switchboardIntegrationId, switchboardIntegrationUpdateBody) {
      return this.updateSwitchboardIntegrationWithHttpInfo(appId, switchboardId, switchboardIntegrationId, switchboardIntegrationUpdateBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return SwitchboardIntegrationsApi;
}();
exports["default"] = SwitchboardIntegrationsApi;