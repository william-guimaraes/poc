"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Integration = _interopRequireDefault(require("../sunshine-conversations-client.model/Integration"));
var _IntegrationListFilter = _interopRequireDefault(require("../sunshine-conversations-client.model/IntegrationListFilter"));
var _IntegrationListResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/IntegrationListResponse"));
var _IntegrationResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/IntegrationResponse"));
var _IntegrationUpdate = _interopRequireDefault(require("../sunshine-conversations-client.model/IntegrationUpdate"));
var _Page = _interopRequireDefault(require("../sunshine-conversations-client.model/Page"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Integrations service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/IntegrationsApi
* @version 9.14.0
*/
var IntegrationsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new IntegrationsApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/IntegrationsApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function IntegrationsApi(apiClient) {
    _classCallCheck(this, IntegrationsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create Integration
   * The Create Integration endpoint allows you to provision apps with front-end messaging channels. Selecting a `custom` integration allows the creation of webhooks.
   * @param {String} appId Identifies the app.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Integration} integration 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationResponse} and HTTP response
   */
  _createClass(IntegrationsApi, [{
    key: "createIntegrationWithHttpInfo",
    value: function createIntegrationWithHttpInfo(appId, integration) {
      var postBody = integration;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createIntegration");
      }
      // verify the required parameter 'integration' is set
      if (integration === undefined || integration === null) {
        throw new Error("Missing the required parameter 'integration' when calling createIntegration");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IntegrationResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create Integration
     * The Create Integration endpoint allows you to provision apps with front-end messaging channels. Selecting a `custom` integration allows the creation of webhooks.
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Integration} integration 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationResponse}
     */
  }, {
    key: "createIntegration",
    value: function createIntegration(appId, integration) {
      return this.createIntegrationWithHttpInfo(appId, integration).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete Integration
     * Delete the specified integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "deleteIntegrationWithHttpInfo",
    value: function deleteIntegrationWithHttpInfo(appId, integrationId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteIntegration");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Integration
     * Delete the specified integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "deleteIntegration",
    value: function deleteIntegration(appId, integrationId) {
      return this.deleteIntegrationWithHttpInfo(appId, integrationId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Integration
     * Get integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationResponse} and HTTP response
     */
  }, {
    key: "getIntegrationWithHttpInfo",
    value: function getIntegrationWithHttpInfo(appId, integrationId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getIntegration");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _IntegrationResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Integration
     * Get integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationResponse}
     */
  }, {
    key: "getIntegration",
    value: function getIntegration(appId, integrationId) {
      return this.getIntegrationWithHttpInfo(appId, integrationId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Integrations
     * List available integrations. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits). ```shell /v2/apps/:appId/integrations?page[after]=5e1606762556d93e9c176f69&page[size]=10&filter[types]=custom,web ``` 
     * @param {String} appId Identifies the app.
     * @param {Object} opts Optional parameters
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Page} opts.page Contains parameters for applying cursor pagination.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationListFilter} opts.filter Contains parameters for filtering the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationListResponse} and HTTP response
     */
  }, {
    key: "listIntegrationsWithHttpInfo",
    value: function listIntegrationsWithHttpInfo(appId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listIntegrations");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'page': opts['page'],
        'filter': opts['filter']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _IntegrationListResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Integrations
     * List available integrations. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits). ```shell /v2/apps/:appId/integrations?page[after]=5e1606762556d93e9c176f69&page[size]=10&filter[types]=custom,web ``` 
     * @param {String} appId Identifies the app.
     * @param {Object} opts Optional parameters
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Page} opts.page Contains parameters for applying cursor pagination.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationListFilter} opts.filter Contains parameters for filtering the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationListResponse}
     */
  }, {
    key: "listIntegrations",
    value: function listIntegrations(appId, opts) {
      return this.listIntegrationsWithHttpInfo(appId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update Integration
     * Allows you to update certain fields of existing integrations. If updating a specific property is not supported, you must delete the integration and re-create it with the new data.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationUpdate} integrationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationResponse} and HTTP response
     */
  }, {
    key: "updateIntegrationWithHttpInfo",
    value: function updateIntegrationWithHttpInfo(appId, integrationId, integrationUpdate) {
      var postBody = integrationUpdate;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateIntegration");
      }
      // verify the required parameter 'integrationUpdate' is set
      if (integrationUpdate === undefined || integrationUpdate === null) {
        throw new Error("Missing the required parameter 'integrationUpdate' when calling updateIntegration");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IntegrationResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update Integration
     * Allows you to update certain fields of existing integrations. If updating a specific property is not supported, you must delete the integration and re-create it with the new data.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationUpdate} integrationUpdate 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationResponse}
     */
  }, {
    key: "updateIntegration",
    value: function updateIntegration(appId, integrationId, integrationUpdate) {
      return this.updateIntegrationWithHttpInfo(appId, integrationId, integrationUpdate).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return IntegrationsApi;
}();
exports["default"] = IntegrationsApi;