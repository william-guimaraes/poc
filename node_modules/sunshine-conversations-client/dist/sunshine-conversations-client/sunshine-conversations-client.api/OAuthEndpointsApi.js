"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _InlineObject = _interopRequireDefault(require("../sunshine-conversations-client.model/InlineObject"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* OAuthEndpoints service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/OAuthEndpointsApi
* @version 9.14.0
*/
var OAuthEndpointsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new OAuthEndpointsApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/OAuthEndpointsApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function OAuthEndpointsApi(apiClient) {
    _classCallCheck(this, OAuthEndpointsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Authorize
   * This endpoint begins the OAuth flow. It relies on a browser session for authentication. If the user is not logged in to Sunshine Conversations they will be redirected to the login page. If the user has many apps, they will first be prompted to select the one they wish to integrate with. They will then be presented with an Allow/Deny dialog, describing details of the access your integration is requesting.
   * @param {String} clientId Your integrationâ€™s unique identifier
   * @param {String} responseType For now the only acceptable value is code.
   * @param {Object} opts Optional parameters
   * @param {String} opts.state You may pass in any arbitrary string value here which will be returned to you along with the code via browser redirect.
   * @param {String} opts.redirectUri You may pass in a redirect_uri to determine which URI the response is redirected to. This URI must be contained in the list configured by your integration. If this option is not passed, the first URI present in the list will be used.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  _createClass(OAuthEndpointsApi, [{
    key: "authorizeWithHttpInfo",
    value: function authorizeWithHttpInfo(clientId, responseType, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorize");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling authorize");
      }
      var pathParams = {};
      var queryParams = {
        'client_id': clientId,
        'response_type': responseType,
        'state': opts['state'],
        'redirect_uri': opts['redirectUri']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;
      return this.apiClient.callApi('/oauth/authorize', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Authorize
     * This endpoint begins the OAuth flow. It relies on a browser session for authentication. If the user is not logged in to Sunshine Conversations they will be redirected to the login page. If the user has many apps, they will first be prompted to select the one they wish to integrate with. They will then be presented with an Allow/Deny dialog, describing details of the access your integration is requesting.
     * @param {String} clientId Your integrationâ€™s unique identifier
     * @param {String} responseType For now the only acceptable value is code.
     * @param {Object} opts Optional parameters
     * @param {String} opts.state You may pass in any arbitrary string value here which will be returned to you along with the code via browser redirect.
     * @param {String} opts.redirectUri You may pass in a redirect_uri to determine which URI the response is redirected to. This URI must be contained in the list configured by your integration. If this option is not passed, the first URI present in the list will be used.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
  }, {
    key: "authorize",
    value: function authorize(clientId, responseType, opts) {
      return this.authorizeWithHttpInfo(clientId, responseType, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Token
     * This endpoint is used to exchange an authorization code for an access token. It should only be used in server-to-server calls.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "getTokenWithHttpInfo",
    value: function getTokenWithHttpInfo(inlineObject) {
      var postBody = inlineObject;
      // verify the required parameter 'inlineObject' is set
      if (inlineObject === undefined || inlineObject === null) {
        throw new Error("Missing the required parameter 'inlineObject' when calling getToken");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/oauth/token', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Token
     * This endpoint is used to exchange an authorization code for an access token. It should only be used in server-to-server calls.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/InlineObject} inlineObject 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "getToken",
    value: function getToken(inlineObject) {
      return this.getTokenWithHttpInfo(inlineObject).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Revoke Access
     * This endpoint is used to revoke your integrationâ€™s access to the userâ€™s Sunshine Conversations app. Revoking access means your integration will no longer be able to interact with the app, and any webhooks the integration had previously configured will be removed.  Calling this endpoint is equivalent to the user removing your integration manually in the Sunshine Conversations web app. Your integrationâ€™s `removeUrl` (if configured) will also be called when an integration is removed in this way. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "revokeAccessWithHttpInfo",
    value: function revokeAccessWithHttpInfo() {
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/oauth/authorization', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Revoke Access
     * This endpoint is used to revoke your integrationâ€™s access to the userâ€™s Sunshine Conversations app. Revoking access means your integration will no longer be able to interact with the app, and any webhooks the integration had previously configured will be removed.  Calling this endpoint is equivalent to the user removing your integration manually in the Sunshine Conversations web app. Your integrationâ€™s `removeUrl` (if configured) will also be called when an integration is removed in this way. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "revokeAccess",
    value: function revokeAccess() {
      return this.revokeAccessWithHttpInfo().then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return OAuthEndpointsApi;
}();
exports["default"] = OAuthEndpointsApi;