"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _WebhookBody = _interopRequireDefault(require("../sunshine-conversations-client.model/WebhookBody"));
var _WebhookCreateBody = _interopRequireDefault(require("../sunshine-conversations-client.model/WebhookCreateBody"));
var _WebhookListResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/WebhookListResponse"));
var _WebhookResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/WebhookResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Webhooks service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/WebhooksApi
* @version 9.14.0
*/
var WebhooksApi = /*#__PURE__*/function () {
  /**
  * Constructs a new WebhooksApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/WebhooksApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function WebhooksApi(apiClient) {
    _classCallCheck(this, WebhooksApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create Webhook
   * Creates a new webhook associated with a Sunshine Conversations Connect integration or a custom integration.
   * @param {String} appId Identifies the app.
   * @param {String} integrationId The id of the integration.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookCreateBody} webhookCreateBody 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookResponse} and HTTP response
   */
  _createClass(WebhooksApi, [{
    key: "createWebhookWithHttpInfo",
    value: function createWebhookWithHttpInfo(appId, integrationId, webhookCreateBody) {
      var postBody = webhookCreateBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createWebhook");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling createWebhook");
      }
      // verify the required parameter 'webhookCreateBody' is set
      if (webhookCreateBody === undefined || webhookCreateBody === null) {
        throw new Error("Missing the required parameter 'webhookCreateBody' when calling createWebhook");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WebhookResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/webhooks', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create Webhook
     * Creates a new webhook associated with a Sunshine Conversations Connect integration or a custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookCreateBody} webhookCreateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookResponse}
     */
  }, {
    key: "createWebhook",
    value: function createWebhook(appId, integrationId, webhookCreateBody) {
      return this.createWebhookWithHttpInfo(appId, integrationId, webhookCreateBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete Webhook
     * Deletes the specified webhook associated with a Sunshine Conversations Connect integration or a custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} webhookId The id of the webhook.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "deleteWebhookWithHttpInfo",
    value: function deleteWebhookWithHttpInfo(appId, integrationId, webhookId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteWebhook");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteWebhook");
      }
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling deleteWebhook");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId,
        'webhookId': webhookId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/webhooks/{webhookId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Webhook
     * Deletes the specified webhook associated with a Sunshine Conversations Connect integration or a custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} webhookId The id of the webhook.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "deleteWebhook",
    value: function deleteWebhook(appId, integrationId, webhookId) {
      return this.deleteWebhookWithHttpInfo(appId, integrationId, webhookId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Webhook
     * Gets the specified webhook associated with a Sunshine Conversations Connect integration or a custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} webhookId The id of the webhook.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookResponse} and HTTP response
     */
  }, {
    key: "getWebhookWithHttpInfo",
    value: function getWebhookWithHttpInfo(appId, integrationId, webhookId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getWebhook");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getWebhook");
      }
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling getWebhook");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId,
        'webhookId': webhookId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WebhookResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/webhooks/{webhookId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Webhook
     * Gets the specified webhook associated with a Sunshine Conversations Connect integration or a custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} webhookId The id of the webhook.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookResponse}
     */
  }, {
    key: "getWebhook",
    value: function getWebhook(appId, integrationId, webhookId) {
      return this.getWebhookWithHttpInfo(appId, integrationId, webhookId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Webhooks
     * Lists all webhooks for a given Sunshine Conversations Connect integration or custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookListResponse} and HTTP response
     */
  }, {
    key: "listWebhooksWithHttpInfo",
    value: function listWebhooksWithHttpInfo(appId, integrationId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listWebhooks");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling listWebhooks");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WebhookListResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/webhooks', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Webhooks
     * Lists all webhooks for a given Sunshine Conversations Connect integration or custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookListResponse}
     */
  }, {
    key: "listWebhooks",
    value: function listWebhooks(appId, integrationId) {
      return this.listWebhooksWithHttpInfo(appId, integrationId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update Webhook
     * Updates the specified webhook associated with a Sunshine Conversations Connect integration or a custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} webhookId The id of the webhook.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookBody} webhookBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookResponse} and HTTP response
     */
  }, {
    key: "updateWebhookWithHttpInfo",
    value: function updateWebhookWithHttpInfo(appId, integrationId, webhookId, webhookBody) {
      var postBody = webhookBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateWebhook");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateWebhook");
      }
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling updateWebhook");
      }
      // verify the required parameter 'webhookBody' is set
      if (webhookBody === undefined || webhookBody === null) {
        throw new Error("Missing the required parameter 'webhookBody' when calling updateWebhook");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId,
        'webhookId': webhookId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WebhookResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/webhooks/{webhookId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update Webhook
     * Updates the specified webhook associated with a Sunshine Conversations Connect integration or a custom integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} webhookId The id of the webhook.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookBody} webhookBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/WebhookResponse}
     */
  }, {
    key: "updateWebhook",
    value: function updateWebhook(appId, integrationId, webhookId, webhookBody) {
      return this.updateWebhookWithHttpInfo(appId, integrationId, webhookId, webhookBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return WebhooksApi;
}();
exports["default"] = WebhooksApi;