"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _IntegrationApiKey = _interopRequireDefault(require("../sunshine-conversations-client.model/IntegrationApiKey"));
var _IntegrationApiKeyListResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/IntegrationApiKeyListResponse"));
var _IntegrationApiKeyResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/IntegrationApiKeyResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* CustomIntegrationApiKeys service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/CustomIntegrationApiKeysApi
* @version 9.14.0
*/
var CustomIntegrationApiKeysApi = /*#__PURE__*/function () {
  /**
  * Constructs a new CustomIntegrationApiKeysApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/CustomIntegrationApiKeysApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function CustomIntegrationApiKeysApi(apiClient) {
    _classCallCheck(this, CustomIntegrationApiKeysApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create Integration Key
   * Creates an API key for the specified custom integration. The response body will include a secret as well itâ€™s corresponding id, which you can use to generate JSON Web Tokens to securely make API calls on behalf of the integration.
   * @param {String} appId Identifies the app.
   * @param {String} integrationId The id of the integration.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationApiKey} integrationApiKey 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationApiKeyResponse} and HTTP response
   */
  _createClass(CustomIntegrationApiKeysApi, [{
    key: "createCustomIntegrationKeyWithHttpInfo",
    value: function createCustomIntegrationKeyWithHttpInfo(appId, integrationId, integrationApiKey) {
      var postBody = integrationApiKey;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createCustomIntegrationKey");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling createCustomIntegrationKey");
      }
      // verify the required parameter 'integrationApiKey' is set
      if (integrationApiKey === undefined || integrationApiKey === null) {
        throw new Error("Missing the required parameter 'integrationApiKey' when calling createCustomIntegrationKey");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _IntegrationApiKeyResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/keys', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create Integration Key
     * Creates an API key for the specified custom integration. The response body will include a secret as well itâ€™s corresponding id, which you can use to generate JSON Web Tokens to securely make API calls on behalf of the integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationApiKey} integrationApiKey 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationApiKeyResponse}
     */
  }, {
    key: "createCustomIntegrationKey",
    value: function createCustomIntegrationKey(appId, integrationId, integrationApiKey) {
      return this.createCustomIntegrationKeyWithHttpInfo(appId, integrationId, integrationApiKey).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete Integration Key
     * Removes an API key.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} keyId The id of the key.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "deleteCustomIntegrationKeyWithHttpInfo",
    value: function deleteCustomIntegrationKeyWithHttpInfo(appId, integrationId, keyId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteCustomIntegrationKey");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteCustomIntegrationKey");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteCustomIntegrationKey");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId,
        'keyId': keyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/keys/{keyId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Integration Key
     * Removes an API key.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} keyId The id of the key.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "deleteCustomIntegrationKey",
    value: function deleteCustomIntegrationKey(appId, integrationId, keyId) {
      return this.deleteCustomIntegrationKeyWithHttpInfo(appId, integrationId, keyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Integration Key
     * Get the specified API key.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} keyId The id of the key.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationApiKeyResponse} and HTTP response
     */
  }, {
    key: "getCustomIntegrationKeyWithHttpInfo",
    value: function getCustomIntegrationKeyWithHttpInfo(appId, integrationId, keyId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCustomIntegrationKey");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getCustomIntegrationKey");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling getCustomIntegrationKey");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId,
        'keyId': keyId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _IntegrationApiKeyResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/keys/{keyId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Integration Key
     * Get the specified API key.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @param {String} keyId The id of the key.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationApiKeyResponse}
     */
  }, {
    key: "getCustomIntegrationKey",
    value: function getCustomIntegrationKey(appId, integrationId, keyId) {
      return this.getCustomIntegrationKeyWithHttpInfo(appId, integrationId, keyId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Integration Keys
     * Lists all API keys for a given integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationApiKeyListResponse} and HTTP response
     */
  }, {
    key: "listCustomIntegrationKeysWithHttpInfo",
    value: function listCustomIntegrationKeysWithHttpInfo(appId, integrationId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listCustomIntegrationKeys");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling listCustomIntegrationKeys");
      }
      var pathParams = {
        'appId': appId,
        'integrationId': integrationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _IntegrationApiKeyListResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/integrations/{integrationId}/keys', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Integration Keys
     * Lists all API keys for a given integration.
     * @param {String} appId Identifies the app.
     * @param {String} integrationId The id of the integration.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationApiKeyListResponse}
     */
  }, {
    key: "listCustomIntegrationKeys",
    value: function listCustomIntegrationKeys(appId, integrationId) {
      return this.listCustomIntegrationKeysWithHttpInfo(appId, integrationId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return CustomIntegrationApiKeysApi;
}();
exports["default"] = CustomIntegrationApiKeysApi;