"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ConversationCreateBody = _interopRequireDefault(require("../sunshine-conversations-client.model/ConversationCreateBody"));
var _ConversationListFilter = _interopRequireDefault(require("../sunshine-conversations-client.model/ConversationListFilter"));
var _ConversationListResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/ConversationListResponse"));
var _ConversationResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/ConversationResponse"));
var _ConversationUpdateBody = _interopRequireDefault(require("../sunshine-conversations-client.model/ConversationUpdateBody"));
var _Page = _interopRequireDefault(require("../sunshine-conversations-client.model/Page"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Conversations service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/ConversationsApi
* @version 9.14.0
*/
var ConversationsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ConversationsApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/ConversationsApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function ConversationsApi(apiClient) {
    _classCallCheck(this, ConversationsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create Conversation
   * Create a conversation for the specified user(s).
   * @param {String} appId Identifies the app.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationCreateBody} conversationCreateBody 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationResponse} and HTTP response
   */
  _createClass(ConversationsApi, [{
    key: "createConversationWithHttpInfo",
    value: function createConversationWithHttpInfo(appId, conversationCreateBody) {
      var postBody = conversationCreateBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling createConversation");
      }
      // verify the required parameter 'conversationCreateBody' is set
      if (conversationCreateBody === undefined || conversationCreateBody === null) {
        throw new Error("Missing the required parameter 'conversationCreateBody' when calling createConversation");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ConversationResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/conversations', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create Conversation
     * Create a conversation for the specified user(s).
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationCreateBody} conversationCreateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationResponse}
     */
  }, {
    key: "createConversation",
    value: function createConversation(appId, conversationCreateBody) {
      return this.createConversationWithHttpInfo(appId, conversationCreateBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete Conversation
     * Delete an entire conversation record, along with its messages and attachments. Note that the default conversation cannot be deleted, but the messages contained [can be](#deleteAllMessages).
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "deleteConversationWithHttpInfo",
    value: function deleteConversationWithHttpInfo(appId, conversationId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteConversation");
      }
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling deleteConversation");
      }
      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Conversation
     * Delete an entire conversation record, along with its messages and attachments. Note that the default conversation cannot be deleted, but the messages contained [can be](#deleteAllMessages).
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "deleteConversation",
    value: function deleteConversation(appId, conversationId) {
      return this.deleteConversationWithHttpInfo(appId, conversationId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get Conversation
     * Fetches an individual conversation.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationResponse} and HTTP response
     */
  }, {
    key: "getConversationWithHttpInfo",
    value: function getConversationWithHttpInfo(appId, conversationId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getConversation");
      }
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling getConversation");
      }
      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ConversationResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Conversation
     * Fetches an individual conversation.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationResponse}
     */
  }, {
    key: "getConversation",
    value: function getConversation(appId, conversationId) {
      return this.getConversationWithHttpInfo(appId, conversationId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Conversations
     * Lists all conversations that a user is part of. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits). ```shell /v2/apps/:appId/conversations?filter[userId]=42589ad070d43be9b00ff7e5 ``` 
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationListFilter} filter Contains parameters for filtering the results.
     * @param {Object} opts Optional parameters
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Page} opts.page Contains parameters for applying cursor pagination.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationListResponse} and HTTP response
     */
  }, {
    key: "listConversationsWithHttpInfo",
    value: function listConversationsWithHttpInfo(appId, filter, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listConversations");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling listConversations");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'page': opts['page'],
        'filter': filter
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ConversationListResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/conversations', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Conversations
     * Lists all conversations that a user is part of. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits). ```shell /v2/apps/:appId/conversations?filter[userId]=42589ad070d43be9b00ff7e5 ``` 
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationListFilter} filter Contains parameters for filtering the results.
     * @param {Object} opts Optional parameters
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Page} opts.page Contains parameters for applying cursor pagination.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationListResponse}
     */
  }, {
    key: "listConversations",
    value: function listConversations(appId, filter, opts) {
      return this.listConversationsWithHttpInfo(appId, filter, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update Conversation
     * Updates a conversation record.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationUpdateBody} conversationUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationResponse} and HTTP response
     */
  }, {
    key: "updateConversationWithHttpInfo",
    value: function updateConversationWithHttpInfo(appId, conversationId, conversationUpdateBody) {
      var postBody = conversationUpdateBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateConversation");
      }
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling updateConversation");
      }
      // verify the required parameter 'conversationUpdateBody' is set
      if (conversationUpdateBody === undefined || conversationUpdateBody === null) {
        throw new Error("Missing the required parameter 'conversationUpdateBody' when calling updateConversation");
      }
      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ConversationResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update Conversation
     * Updates a conversation record.
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationUpdateBody} conversationUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationResponse}
     */
  }, {
    key: "updateConversation",
    value: function updateConversation(appId, conversationId, conversationUpdateBody) {
      return this.updateConversationWithHttpInfo(appId, conversationId, conversationUpdateBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ConversationsApi;
}();
exports["default"] = ConversationsApi;