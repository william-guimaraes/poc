"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AppCreateBody = _interopRequireDefault(require("../sunshine-conversations-client.model/AppCreateBody"));
var _AppListFilter = _interopRequireDefault(require("../sunshine-conversations-client.model/AppListFilter"));
var _AppListResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/AppListResponse"));
var _AppResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/AppResponse"));
var _AppUpdateBody = _interopRequireDefault(require("../sunshine-conversations-client.model/AppUpdateBody"));
var _Page = _interopRequireDefault(require("../sunshine-conversations-client.model/Page"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Apps service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/AppsApi
* @version 9.14.0
*/
var AppsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new AppsApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/AppsApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function AppsApi(apiClient) {
    _classCallCheck(this, AppsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Create App
   * Creates a new app. When using [service account](#service-accounts) credentials, the service account is automatically granted access to the app.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AppCreateBody} appCreateBody 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AppResponse} and HTTP response
   */
  _createClass(AppsApi, [{
    key: "createAppWithHttpInfo",
    value: function createAppWithHttpInfo(appCreateBody) {
      var postBody = appCreateBody;
      // verify the required parameter 'appCreateBody' is set
      if (appCreateBody === undefined || appCreateBody === null) {
        throw new Error("Missing the required parameter 'appCreateBody' when calling createApp");
      }
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AppResponse["default"];
      return this.apiClient.callApi('/v2/apps', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Create App
     * Creates a new app. When using [service account](#service-accounts) credentials, the service account is automatically granted access to the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AppCreateBody} appCreateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AppResponse}
     */
  }, {
    key: "createApp",
    value: function createApp(appCreateBody) {
      return this.createAppWithHttpInfo(appCreateBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Delete App
     * Removes the specified app, including all its enabled integrations.
     * @param {String} appId Identifies the app.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "deleteAppWithHttpInfo",
    value: function deleteAppWithHttpInfo(appId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteApp");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete App
     * Removes the specified app, including all its enabled integrations.
     * @param {String} appId Identifies the app.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "deleteApp",
    value: function deleteApp(appId) {
      return this.deleteAppWithHttpInfo(appId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Get App
     * Fetches an individual app.
     * @param {String} appId Identifies the app.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AppResponse} and HTTP response
     */
  }, {
    key: "getAppWithHttpInfo",
    value: function getAppWithHttpInfo(appId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getApp");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AppResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get App
     * Fetches an individual app.
     * @param {String} appId Identifies the app.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AppResponse}
     */
  }, {
    key: "getApp",
    value: function getApp(appId) {
      return this.getAppWithHttpInfo(appId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Apps
     * Lists all apps that a user is part of. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits).  ```shell /v2/apps?page[after]=5e1606762556d93e9c176f69&page[size]=10 ``` 
     * @param {Object} opts Optional parameters
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Page} opts.page Contains parameters for applying cursor pagination.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AppListFilter} opts.filter Contains parameters for filtering the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AppListResponse} and HTTP response
     */
  }, {
    key: "listAppsWithHttpInfo",
    value: function listAppsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'page': opts['page'],
        'filter': opts['filter']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _AppListResponse["default"];
      return this.apiClient.callApi('/v2/apps', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Apps
     * Lists all apps that a user is part of. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits).  ```shell /v2/apps?page[after]=5e1606762556d93e9c176f69&page[size]=10 ``` 
     * @param {Object} opts Optional parameters
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Page} opts.page Contains parameters for applying cursor pagination.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AppListFilter} opts.filter Contains parameters for filtering the results.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AppListResponse}
     */
  }, {
    key: "listApps",
    value: function listApps(opts) {
      return this.listAppsWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Update App
     * Updates an app.
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AppUpdateBody} appUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AppResponse} and HTTP response
     */
  }, {
    key: "updateAppWithHttpInfo",
    value: function updateAppWithHttpInfo(appId, appUpdateBody) {
      var postBody = appUpdateBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateApp");
      }
      // verify the required parameter 'appUpdateBody' is set
      if (appUpdateBody === undefined || appUpdateBody === null) {
        throw new Error("Missing the required parameter 'appUpdateBody' when calling updateApp");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AppResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}', 'PATCH', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Update App
     * Updates an app.
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AppUpdateBody} appUpdateBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AppResponse}
     */
  }, {
    key: "updateApp",
    value: function updateApp(appId, appUpdateBody) {
      return this.updateAppWithHttpInfo(appId, appUpdateBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return AppsApi;
}();
exports["default"] = AppsApi;