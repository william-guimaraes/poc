"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Page = _interopRequireDefault(require("../sunshine-conversations-client.model/Page"));
var _ParticipantJoinBody = _interopRequireDefault(require("../sunshine-conversations-client.model/ParticipantJoinBody"));
var _ParticipantLeaveBody = _interopRequireDefault(require("../sunshine-conversations-client.model/ParticipantLeaveBody"));
var _ParticipantListResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/ParticipantListResponse"));
var _ParticipantResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/ParticipantResponse"));
var _ParticipantSubSchema = _interopRequireDefault(require("../sunshine-conversations-client.model/ParticipantSubSchema"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Participants service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/ParticipantsApi
* @version 9.14.0
*/
var ParticipantsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new ParticipantsApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/ParticipantsApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function ParticipantsApi(apiClient) {
    _classCallCheck(this, ParticipantsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Join Conversation
   * Adds a user to a conversation using either their userId or userExternalId. The endpoint only supports adding a participant to a sdkGroup conversation. 
   * @param {String} appId Identifies the app.
   * @param {String} conversationId Identifies the conversation.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantJoinBody} participantJoinBody 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantResponse} and HTTP response
   */
  _createClass(ParticipantsApi, [{
    key: "joinConversationWithHttpInfo",
    value: function joinConversationWithHttpInfo(appId, conversationId, participantJoinBody) {
      var postBody = participantJoinBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling joinConversation");
      }
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling joinConversation");
      }
      // verify the required parameter 'participantJoinBody' is set
      if (participantJoinBody === undefined || participantJoinBody === null) {
        throw new Error("Missing the required parameter 'participantJoinBody' when calling joinConversation");
      }
      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _ParticipantResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}/join', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Join Conversation
     * Adds a user to a conversation using either their userId or userExternalId. The endpoint only supports adding a participant to a sdkGroup conversation. 
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantJoinBody} participantJoinBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantResponse}
     */
  }, {
    key: "joinConversation",
    value: function joinConversation(appId, conversationId, participantJoinBody) {
      return this.joinConversationWithHttpInfo(appId, conversationId, participantJoinBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Leave Conversation
     * Removes a user from a conversation using either their userId, userExternalId, or participantId. 
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantLeaveBody} participantLeaveBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "leaveConversationWithHttpInfo",
    value: function leaveConversationWithHttpInfo(appId, conversationId, participantLeaveBody) {
      var postBody = participantLeaveBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling leaveConversation");
      }
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling leaveConversation");
      }
      // verify the required parameter 'participantLeaveBody' is set
      if (participantLeaveBody === undefined || participantLeaveBody === null) {
        throw new Error("Missing the required parameter 'participantLeaveBody' when calling leaveConversation");
      }
      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}/leave', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Leave Conversation
     * Removes a user from a conversation using either their userId, userExternalId, or participantId. 
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantLeaveBody} participantLeaveBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "leaveConversation",
    value: function leaveConversation(appId, conversationId, participantLeaveBody) {
      return this.leaveConversationWithHttpInfo(appId, conversationId, participantLeaveBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Participants
     * Lists all the participants of a particular conversation. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits).  ```shell /v2/apps/:appId/conversations/:conversationId/participants?page[before]=26508c10541a4b0ff472e5e2 ``` 
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {Object} opts Optional parameters
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Page} opts.page Contains parameters for applying cursor pagination.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantListResponse} and HTTP response
     */
  }, {
    key: "listParticipantsWithHttpInfo",
    value: function listParticipantsWithHttpInfo(appId, conversationId, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listParticipants");
      }
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling listParticipants");
      }
      var pathParams = {
        'appId': appId,
        'conversationId': conversationId
      };
      var queryParams = {
        'page': opts['page']
      };
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ParticipantListResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/conversations/{conversationId}/participants', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Participants
     * Lists all the participants of a particular conversation. This API is paginated through [cursor pagination](#section/Introduction/API-pagination-and-records-limits).  ```shell /v2/apps/:appId/conversations/:conversationId/participants?page[before]=26508c10541a4b0ff472e5e2 ``` 
     * @param {String} appId Identifies the app.
     * @param {String} conversationId Identifies the conversation.
     * @param {Object} opts Optional parameters
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Page} opts.page Contains parameters for applying cursor pagination.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantListResponse}
     */
  }, {
    key: "listParticipants",
    value: function listParticipants(appId, conversationId, opts) {
      return this.listParticipantsWithHttpInfo(appId, conversationId, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return ParticipantsApi;
}();
exports["default"] = ParticipantsApi;