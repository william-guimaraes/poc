"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AttachmentDeleteBody = _interopRequireDefault(require("../sunshine-conversations-client.model/AttachmentDeleteBody"));
var _AttachmentMediaTokenBody = _interopRequireDefault(require("../sunshine-conversations-client.model/AttachmentMediaTokenBody"));
var _AttachmentMediaTokenResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/AttachmentMediaTokenResponse"));
var _AttachmentResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/AttachmentResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
* Attachments service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/AttachmentsApi
* @version 9.14.0
*/
var AttachmentsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new AttachmentsApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/AttachmentsApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function AttachmentsApi(apiClient) {
    _classCallCheck(this, AttachmentsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Delete Attachment
   * Remove an attachment uploaded to Sunshine Conversations through the Upload attachment API. See [Attachments for Messages](#section/Attachments-for-Messages) to have attachments automatically deleted when deleting messages, conversations or users. <aside class=\"notice\">Note that deleted attachments can remain available on our CDNâ€™s cache up to 15 minutes after the delete call.</aside> 
   * @param {String} appId Identifies the app.
   * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AttachmentDeleteBody} attachmentDeleteBody 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
   */
  _createClass(AttachmentsApi, [{
    key: "deleteAttachmentWithHttpInfo",
    value: function deleteAttachmentWithHttpInfo(appId, attachmentDeleteBody) {
      var postBody = attachmentDeleteBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteAttachment");
      }
      // verify the required parameter 'attachmentDeleteBody' is set
      if (attachmentDeleteBody === undefined || attachmentDeleteBody === null) {
        throw new Error("Missing the required parameter 'attachmentDeleteBody' when calling deleteAttachment");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/attachments/remove', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Delete Attachment
     * Remove an attachment uploaded to Sunshine Conversations through the Upload attachment API. See [Attachments for Messages](#section/Attachments-for-Messages) to have attachments automatically deleted when deleting messages, conversations or users. <aside class=\"notice\">Note that deleted attachments can remain available on our CDNâ€™s cache up to 15 minutes after the delete call.</aside> 
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AttachmentDeleteBody} attachmentDeleteBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "deleteAttachment",
    value: function deleteAttachment(appId, attachmentDeleteBody) {
      return this.deleteAttachmentWithHttpInfo(appId, attachmentDeleteBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Generate Media Token
     * Generates a media JWT for a list of attachment paths. This media token is a prerequisite for setting the cookie needed to visualize a private attachment. <aside class=\"notice\">Note you have the ability to allow files using different rules, see <a href=\"https://docs.smooch.io/guide/private-attachments\">Private Attachments</a> for more details.</aside> 
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AttachmentMediaTokenBody} attachmentMediaTokenBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AttachmentMediaTokenResponse} and HTTP response
     */
  }, {
    key: "generateMediaJsonWebTokenWithHttpInfo",
    value: function generateMediaJsonWebTokenWithHttpInfo(appId, attachmentMediaTokenBody) {
      var postBody = attachmentMediaTokenBody;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling generateMediaJsonWebToken");
      }
      // verify the required parameter 'attachmentMediaTokenBody' is set
      if (attachmentMediaTokenBody === undefined || attachmentMediaTokenBody === null) {
        throw new Error("Missing the required parameter 'attachmentMediaTokenBody' when calling generateMediaJsonWebToken");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _AttachmentMediaTokenResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/attachments/token', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Generate Media Token
     * Generates a media JWT for a list of attachment paths. This media token is a prerequisite for setting the cookie needed to visualize a private attachment. <aside class=\"notice\">Note you have the ability to allow files using different rules, see <a href=\"https://docs.smooch.io/guide/private-attachments\">Private Attachments</a> for more details.</aside> 
     * @param {String} appId Identifies the app.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AttachmentMediaTokenBody} attachmentMediaTokenBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AttachmentMediaTokenResponse}
     */
  }, {
    key: "generateMediaJsonWebToken",
    value: function generateMediaJsonWebToken(appId, attachmentMediaTokenBody) {
      return this.generateMediaJsonWebTokenWithHttpInfo(appId, attachmentMediaTokenBody).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Set Cookie
     * With the media JWT retrieved, pass it in the header of the below request as itâ€™s authorization in order to set a cookie in the userâ€™s browser corresponding to the path within the media JWT. The expiration date of this cookie will match the expiration date of the media JWT. This cookie will be needed to visualize a private attachment. 
     * @param {String} appId Identifies the app.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
  }, {
    key: "setCookieWithHttpInfo",
    value: function setCookieWithHttpInfo(appId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling setCookie");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;
      return this.apiClient.callApi('/v2/apps/{appId}/attachments/cookie', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Set Cookie
     * With the media JWT retrieved, pass it in the header of the below request as itâ€™s authorization in order to set a cookie in the userâ€™s browser corresponding to the path within the media JWT. The expiration date of this cookie will match the expiration date of the media JWT. This cookie will be needed to visualize a private attachment. 
     * @param {String} appId Identifies the app.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
  }, {
    key: "setCookie",
    value: function setCookie(appId) {
      return this.setCookieWithHttpInfo(appId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * Upload Attachment
     * Upload an attachment to Sunshine Conversations to use in future messages. Files are uploaded using the multipart/form-data content type. Use the returned mediaUrl to send a file, image or carousel message. <aside class=\"notice\">Note that Sunshine Conversations limits the size and type of file you can upload to the platform. See the <a href=\"https://docs.smooch.io/guide/validating-files\">file validation</a> guide for more details.</aside> 
     * @param {String} appId Identifies the app.
     * @param {String} access The access level for the attachment. Currently the available access levels are public and private.
     * @param {File} source 
     * @param {Object} opts Optional parameters
     * @param {String} opts._for Specifies the intended container for the attachment, to enable automatic attachment deletion (on deletion of associated message, conversation or user). For now, only message is supported. See [Attachments for Messages](#section/Attachments-for-Messages) for details.
     * @param {String} opts.conversationId Links the attachment getting uploaded to the conversation ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AttachmentResponse} and HTTP response
     */
  }, {
    key: "uploadAttachmentWithHttpInfo",
    value: function uploadAttachmentWithHttpInfo(appId, access, source, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling uploadAttachment");
      }
      // verify the required parameter 'access' is set
      if (access === undefined || access === null) {
        throw new Error("Missing the required parameter 'access' when calling uploadAttachment");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling uploadAttachment");
      }
      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'access': access,
        'for': opts['_for'],
        'conversationId': opts['conversationId']
      };
      var headerParams = {};
      var formParams = {
        'source': source
      };
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = _AttachmentResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/attachments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Upload Attachment
     * Upload an attachment to Sunshine Conversations to use in future messages. Files are uploaded using the multipart/form-data content type. Use the returned mediaUrl to send a file, image or carousel message. <aside class=\"notice\">Note that Sunshine Conversations limits the size and type of file you can upload to the platform. See the <a href=\"https://docs.smooch.io/guide/validating-files\">file validation</a> guide for more details.</aside> 
     * @param {String} appId Identifies the app.
     * @param {String} access The access level for the attachment. Currently the available access levels are public and private.
     * @param {File} source 
     * @param {Object} opts Optional parameters
     * @param {String} opts._for Specifies the intended container for the attachment, to enable automatic attachment deletion (on deletion of associated message, conversation or user). For now, only message is supported. See [Attachments for Messages](#section/Attachments-for-Messages) for details.
     * @param {String} opts.conversationId Links the attachment getting uploaded to the conversation ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/AttachmentResponse}
     */
  }, {
    key: "uploadAttachment",
    value: function uploadAttachment(appId, access, source, opts) {
      return this.uploadAttachmentWithHttpInfo(appId, access, source, opts).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
  return AttachmentsApi;
}();
exports["default"] = AttachmentsApi;