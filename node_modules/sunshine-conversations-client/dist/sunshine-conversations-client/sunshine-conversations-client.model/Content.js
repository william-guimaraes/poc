"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ActionSubset = _interopRequireDefault(require("./ActionSubset"));
var _CarouselMessage = _interopRequireDefault(require("./CarouselMessage"));
var _CarouselMessageDisplaySettings = _interopRequireDefault(require("./CarouselMessageDisplaySettings"));
var _Field = _interopRequireDefault(require("./Field"));
var _FileMessage = _interopRequireDefault(require("./FileMessage"));
var _FormMessage = _interopRequireDefault(require("./FormMessage"));
var _FormResponseMessage = _interopRequireDefault(require("./FormResponseMessage"));
var _ImageMessage = _interopRequireDefault(require("./ImageMessage"));
var _Item = _interopRequireDefault(require("./Item"));
var _ListMessage = _interopRequireDefault(require("./ListMessage"));
var _LocationMessage = _interopRequireDefault(require("./LocationMessage"));
var _LocationMessageCoordinates = _interopRequireDefault(require("./LocationMessageCoordinates"));
var _LocationMessageLocation = _interopRequireDefault(require("./LocationMessageLocation"));
var _TemplateMessage = _interopRequireDefault(require("./TemplateMessage"));
var _TextMessage = _interopRequireDefault(require("./TextMessage"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The Content model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Content
 * @version 9.14.0
 */
var Content = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Content</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Content
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/TextMessage
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessage
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/FileMessage
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/FormMessage
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessage
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ImageMessage
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ListMessage
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessage
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/TemplateMessage
   * @param type {String} The type of message.
   * @param items {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} An array of objects representing the items associated with the message. Only present in carousel and list type messages.
   * @param mediaUrl {String} The URL for media, such as an image, attached to the message.
   * @param fields {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>} Array of field objects that contain the submitted fields.
   * @param coordinates {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates} 
   * @param template {Object} The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
   */
  function Content(type, items, mediaUrl, fields, coordinates, template) {
    _classCallCheck(this, Content);
    _TextMessage["default"].initialize(this, type);
    _CarouselMessage["default"].initialize(this, type, items);
    _FileMessage["default"].initialize(this, type, mediaUrl);
    _FormMessage["default"].initialize(this, type, fields);
    _FormResponseMessage["default"].initialize(this, type, fields);
    _ImageMessage["default"].initialize(this, type, mediaUrl);
    _ListMessage["default"].initialize(this, type, items);
    _LocationMessage["default"].initialize(this, type, coordinates);
    _TemplateMessage["default"].initialize(this, type, template);
    Content.initialize(this, type, items, mediaUrl, fields, coordinates, template);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(Content, [{
    key: "getType",
    value:
    /**
         * Returns The type of message.
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The type of message.
     * @param {String} type The type of message.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns The fallback text message used when location messages are not supported by the channel.
         * @return {String}
         */
  }, {
    key: "getText",
    value: function getText() {
      return this.text;
    }

    /**
     * Sets The fallback text message used when location messages are not supported by the channel.
     * @param {String} text The fallback text message used when location messages are not supported by the channel.
     */
  }, {
    key: "setText",
    value: function setText(text) {
      this['text'] = text;
    }
    /**
         * Returns An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
         * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset>}
         */
  }, {
    key: "getActions",
    value: function getActions() {
      return this.actions;
    }

    /**
     * Sets An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset>} actions An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
     */
  }, {
    key: "setActions",
    value: function setActions(actions) {
      this['actions'] = actions;
    }
    /**
         * Returns The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
         * @return {String}
         */
  }, {
    key: "getPayload",
    value: function getPayload() {
      return this.payload;
    }

    /**
     * Sets The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
     * @param {String} payload The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
     */
  }, {
    key: "setPayload",
    value: function setPayload(payload) {
      this['payload'] = payload;
    }
    /**
         * Returns An array of objects representing the items associated with the message. Only present in carousel and list type messages.
         * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>}
         */
  }, {
    key: "getItems",
    value: function getItems() {
      return this.items;
    }

    /**
     * Sets An array of objects representing the items associated with the message. Only present in carousel and list type messages.
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} items An array of objects representing the items associated with the message. Only present in carousel and list type messages.
     */
  }, {
    key: "setItems",
    value: function setItems(items) {
      this['items'] = items;
    }
    /**
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessageDisplaySettings}
         */
  }, {
    key: "getDisplaySettings",
    value: function getDisplaySettings() {
      return this.displaySettings;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessageDisplaySettings} displaySettings
     */
  }, {
    key: "setDisplaySettings",
    value: function setDisplaySettings(displaySettings) {
      this['displaySettings'] = displaySettings;
    }
    /**
         * Returns The URL for media, such as an image, attached to the message.
         * @return {String}
         */
  }, {
    key: "getMediaUrl",
    value: function getMediaUrl() {
      return this.mediaUrl;
    }

    /**
     * Sets The URL for media, such as an image, attached to the message.
     * @param {String} mediaUrl The URL for media, such as an image, attached to the message.
     */
  }, {
    key: "setMediaUrl",
    value: function setMediaUrl(mediaUrl) {
      this['mediaUrl'] = mediaUrl;
    }
    /**
         * Returns The size of the media.
         * @return {Number}
         */
  }, {
    key: "getMediaSize",
    value: function getMediaSize() {
      return this.mediaSize;
    }

    /**
     * Sets The size of the media.
     * @param {Number} mediaSize The size of the media.
     */
  }, {
    key: "setMediaSize",
    value: function setMediaSize(mediaSize) {
      this['mediaSize'] = mediaSize;
    }
    /**
         * Returns The media type of the file.
         * @return {String}
         */
  }, {
    key: "getMediaType",
    value: function getMediaType() {
      return this.mediaType;
    }

    /**
     * Sets The media type of the file.
     * @param {String} mediaType The media type of the file.
     */
  }, {
    key: "setMediaType",
    value: function setMediaType(mediaType) {
      this['mediaType'] = mediaType;
    }
    /**
         * Returns An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
         * @return {String}
         */
  }, {
    key: "getAltText",
    value: function getAltText() {
      return this.altText;
    }

    /**
     * Sets An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
     * @param {String} altText An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
     */
  }, {
    key: "setAltText",
    value: function setAltText(altText) {
      this['altText'] = altText;
    }
    /**
         * Returns true if the message should block the chat input on Web Messenger.
         * @return {Boolean}
         */
  }, {
    key: "getBlockChatInput",
    value: function getBlockChatInput() {
      return this.blockChatInput;
    }

    /**
     * Sets true if the message should block the chat input on Web Messenger.
     * @param {Boolean} blockChatInput true if the message should block the chat input on Web Messenger.
     */
  }, {
    key: "setBlockChatInput",
    value: function setBlockChatInput(blockChatInput) {
      this['blockChatInput'] = blockChatInput;
    }
    /**
         * Returns Array of field objects that contain the submitted fields.
         * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>}
         */
  }, {
    key: "getFields",
    value: function getFields() {
      return this.fields;
    }

    /**
     * Sets Array of field objects that contain the submitted fields.
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>} fields Array of field objects that contain the submitted fields.
     */
  }, {
    key: "setFields",
    value: function setFields(fields) {
      this['fields'] = fields;
    }
    /**
         * Returns A string containing the `label: value` of all fields, each separated by a newline character.
         * @return {String}
         */
  }, {
    key: "getTextFallback",
    value: function getTextFallback() {
      return this.textFallback;
    }

    /**
     * Sets A string containing the `label: value` of all fields, each separated by a newline character.
     * @param {String} textFallback A string containing the `label: value` of all fields, each separated by a newline character.
     */
  }, {
    key: "setTextFallback",
    value: function setTextFallback(textFallback) {
      this['textFallback'] = textFallback;
    }
    /**
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates}
         */
  }, {
    key: "getCoordinates",
    value: function getCoordinates() {
      return this.coordinates;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates} coordinates
     */
  }, {
    key: "setCoordinates",
    value: function setCoordinates(coordinates) {
      this['coordinates'] = coordinates;
    }
    /**
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageLocation}
         */
  }, {
    key: "getLocation",
    value: function getLocation() {
      return this.location;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageLocation} location
     */
  }, {
    key: "setLocation",
    value: function setLocation(location) {
      this['location'] = location;
    }
    /**
         * Returns The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
         * @return {Object}
         */
  }, {
    key: "getTemplate",
    value: function getTemplate() {
      return this.template;
    }

    /**
     * Sets The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
     * @param {Object} template The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
     */
  }, {
    key: "setTemplate",
    value: function setTemplate(template) {
      this['template'] = template;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type, items, mediaUrl, fields, coordinates, template) {
      obj['type'] = type;
      obj['items'] = items;
      obj['mediaUrl'] = mediaUrl;
      obj['fields'] = fields;
      obj['coordinates'] = coordinates;
      obj['template'] = template;
    }

    /**
     * Constructs a <code>Content</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Content} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Content} The populated <code>Content</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Content();
        _TextMessage["default"].constructFromObject(data, obj);
        _CarouselMessage["default"].constructFromObject(data, obj);
        _FileMessage["default"].constructFromObject(data, obj);
        _FormMessage["default"].constructFromObject(data, obj);
        _FormResponseMessage["default"].constructFromObject(data, obj);
        _ImageMessage["default"].constructFromObject(data, obj);
        _ListMessage["default"].constructFromObject(data, obj);
        _LocationMessage["default"].constructFromObject(data, obj);
        _TemplateMessage["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('text')) {
          obj['text'] = _ApiClient["default"].convertToType(data['text'], 'String');
        }
        if (data.hasOwnProperty('actions')) {
          obj['actions'] = _ApiClient["default"].convertToType(data['actions'], [_ActionSubset["default"]]);
        }
        if (data.hasOwnProperty('payload')) {
          obj['payload'] = _ApiClient["default"].convertToType(data['payload'], 'String');
        }
        if (data.hasOwnProperty('items')) {
          obj['items'] = _ApiClient["default"].convertToType(data['items'], [_Item["default"]]);
        }
        if (data.hasOwnProperty('displaySettings')) {
          obj['displaySettings'] = _CarouselMessageDisplaySettings["default"].constructFromObject(data['displaySettings']);
        }
        if (data.hasOwnProperty('mediaUrl')) {
          obj['mediaUrl'] = _ApiClient["default"].convertToType(data['mediaUrl'], 'String');
        }
        if (data.hasOwnProperty('mediaSize')) {
          obj['mediaSize'] = _ApiClient["default"].convertToType(data['mediaSize'], 'Number');
        }
        if (data.hasOwnProperty('mediaType')) {
          obj['mediaType'] = _ApiClient["default"].convertToType(data['mediaType'], 'String');
        }
        if (data.hasOwnProperty('altText')) {
          obj['altText'] = _ApiClient["default"].convertToType(data['altText'], 'String');
        }
        if (data.hasOwnProperty('blockChatInput')) {
          obj['blockChatInput'] = _ApiClient["default"].convertToType(data['blockChatInput'], 'Boolean');
        }
        if (data.hasOwnProperty('fields')) {
          obj['fields'] = _ApiClient["default"].convertToType(data['fields'], [_Field["default"]]);
        }
        if (data.hasOwnProperty('textFallback')) {
          obj['textFallback'] = _ApiClient["default"].convertToType(data['textFallback'], 'String');
        }
        if (data.hasOwnProperty('coordinates')) {
          obj['coordinates'] = _LocationMessageCoordinates["default"].constructFromObject(data['coordinates']);
        }
        if (data.hasOwnProperty('location')) {
          obj['location'] = _LocationMessageLocation["default"].constructFromObject(data['location']);
        }
        if (data.hasOwnProperty('template')) {
          obj['template'] = _ApiClient["default"].convertToType(data['template'], Object);
        }
      }
      return obj;
    }
  }]);
  return Content;
}();
/**
 * The type of message.
 * @member {String} type
 * @default 'template'
 */
Content.prototype['type'] = 'template';

/**
 * The fallback text message used when location messages are not supported by the channel.
 * @member {String} text
 */
Content.prototype['text'] = undefined;

/**
 * An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset>} actions
 */
Content.prototype['actions'] = undefined;

/**
 * The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
 * @member {String} payload
 */
Content.prototype['payload'] = undefined;

/**
 * An array of objects representing the items associated with the message. Only present in carousel and list type messages.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} items
 */
Content.prototype['items'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessageDisplaySettings} displaySettings
 */
Content.prototype['displaySettings'] = undefined;

/**
 * The URL for media, such as an image, attached to the message.
 * @member {String} mediaUrl
 */
Content.prototype['mediaUrl'] = undefined;

/**
 * The size of the media.
 * @member {Number} mediaSize
 */
Content.prototype['mediaSize'] = undefined;

/**
 * The media type of the file.
 * @member {String} mediaType
 */
Content.prototype['mediaType'] = undefined;

/**
 * An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
 * @member {String} altText
 */
Content.prototype['altText'] = undefined;

/**
 * true if the message should block the chat input on Web Messenger.
 * @member {Boolean} blockChatInput
 */
Content.prototype['blockChatInput'] = undefined;

/**
 * Array of field objects that contain the submitted fields.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>} fields
 */
Content.prototype['fields'] = undefined;

/**
 * A string containing the `label: value` of all fields, each separated by a newline character.
 * @member {String} textFallback
 */
Content.prototype['textFallback'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates} coordinates
 */
Content.prototype['coordinates'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageLocation} location
 */
Content.prototype['location'] = undefined;

/**
 * The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
 * @member {Object} template
 */
Content.prototype['template'] = undefined;

// Implement TextMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'text'
 */
_TextMessage["default"].prototype['type'] = 'text';
/**
 * The text content of the message. Optional only if actions are provided.
 * @member {String} text
 */
_TextMessage["default"].prototype['text'] = undefined;
/**
 * Array of message actions.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Action>} actions
 */
_TextMessage["default"].prototype['actions'] = undefined;
/**
 * The payload of a [reply button](https://docs.smooch.io/guide/structured-messages/#reply-buttons) response message.
 * @member {String} payload
 */
_TextMessage["default"].prototype['payload'] = undefined;
// Implement CarouselMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'carousel'
 */
_CarouselMessage["default"].prototype['type'] = 'carousel';
/**
 * The fallback text message used when carousel messages are not supported by the channel.
 * @member {String} text
 */
_CarouselMessage["default"].prototype['text'] = undefined;
/**
 * An array of objects representing the items associated with the message. Only present in carousel and list type messages.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} items
 */
_CarouselMessage["default"].prototype['items'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/CarouselMessageDisplaySettings} displaySettings
 */
_CarouselMessage["default"].prototype['displaySettings'] = undefined;
// Implement FileMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'file'
 */
_FileMessage["default"].prototype['type'] = 'file';
/**
 * The URL for media, such as an image, attached to the message.
 * @member {String} mediaUrl
 */
_FileMessage["default"].prototype['mediaUrl'] = undefined;
/**
 * The size of the media.
 * @member {Number} mediaSize
 */
_FileMessage["default"].prototype['mediaSize'] = undefined;
/**
 * The media type of the file.
 * @member {String} mediaType
 */
_FileMessage["default"].prototype['mediaType'] = undefined;
/**
 * An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
 * @member {String} altText
 */
_FileMessage["default"].prototype['altText'] = undefined;
/**
 * The text content of the message.
 * @member {String} text
 */
_FileMessage["default"].prototype['text'] = undefined;
// Implement FormMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'form'
 */
_FormMessage["default"].prototype['type'] = 'form';
/**
 * true if the message should block the chat input on Web Messenger.
 * @member {Boolean} blockChatInput
 */
_FormMessage["default"].prototype['blockChatInput'] = undefined;
/**
 * An array of objects representing fields associated with the message. Only present in form and formResponse messages.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>} fields
 */
_FormMessage["default"].prototype['fields'] = undefined;
// Implement FormResponseMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'formResponse'
 */
_FormResponseMessage["default"].prototype['type'] = 'formResponse';
/**
 * Array of field objects that contain the submitted fields.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>} fields
 */
_FormResponseMessage["default"].prototype['fields'] = undefined;
/**
 * A string containing the `label: value` of all fields, each separated by a newline character.
 * @member {String} textFallback
 */
_FormResponseMessage["default"].prototype['textFallback'] = undefined;
// Implement ImageMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'image'
 */
_ImageMessage["default"].prototype['type'] = 'image';
/**
 * The URL for media, such as an image, attached to the message.
 * @member {String} mediaUrl
 */
_ImageMessage["default"].prototype['mediaUrl'] = undefined;
/**
 * An optional description of the image for accessibility purposes. The field will be saved by default with the file name as the value.
 * @member {String} altText
 */
_ImageMessage["default"].prototype['altText'] = undefined;
/**
 * The text content of the message. Optional only if actions are provided.
 * @member {String} text
 */
_ImageMessage["default"].prototype['text'] = undefined;
/**
 * Array of message actions.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Action>} actions
 */
_ImageMessage["default"].prototype['actions'] = undefined;
// Implement ListMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'list'
 */
_ListMessage["default"].prototype['type'] = 'list';
/**
 * An array of objects representing the items associated with the message. Only present in carousel and list type messages.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Item>} items
 */
_ListMessage["default"].prototype['items'] = undefined;
/**
 * An array of objects representing the actions associated with the message. The array length is limited by the third party channel.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset>} actions
 */
_ListMessage["default"].prototype['actions'] = undefined;
// Implement LocationMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'location'
 */
_LocationMessage["default"].prototype['type'] = 'location';
/**
 * The fallback text message used when location messages are not supported by the channel.
 * @member {String} text
 */
_LocationMessage["default"].prototype['text'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageCoordinates} coordinates
 */
_LocationMessage["default"].prototype['coordinates'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/LocationMessageLocation} location
 */
_LocationMessage["default"].prototype['location'] = undefined;
// Implement TemplateMessage interface:
/**
 * The type of message.
 * @member {String} type
 * @default 'template'
 */
_TemplateMessage["default"].prototype['type'] = 'template';
/**
 * The whatsapp template message to send. For more information, consult the [guide](https://docs.smooch.io/guide/whatsapp#sending-message-templates). `schema` must be set to `whatsapp`.
 * @member {Object} template
 */
_TemplateMessage["default"].prototype['template'] = undefined;
var _default = Content;
exports["default"] = _default;