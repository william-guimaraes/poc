"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The LineAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/LineAllOf
 * @version 9.14.0
 */
var LineAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>LineAllOf</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/LineAllOf
   */
  function LineAllOf() {
    _classCallCheck(this, LineAllOf);
    LineAllOf.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(LineAllOf, [{
    key: "getType",
    value:
    /**
         * Returns For LINE, each of your customers will need to manually configure a webhook in their LINE configuration page that will point to Sunshine Conversations servers. You must instruct your customers how to configure this manually on their LINE bot page. Once you’ve acquired all the required information, call the Create Integration endpoint. Then, using the returned integration _id, your customer must set the Callback URL field in their LINE Business Center page. The URL should look like the following: `https://app.smooch.io:443/api/line/webhooks/{appId}/{integrationId}`. 
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets For LINE, each of your customers will need to manually configure a webhook in their LINE configuration page that will point to Sunshine Conversations servers. You must instruct your customers how to configure this manually on their LINE bot page. Once you’ve acquired all the required information, call the Create Integration endpoint. Then, using the returned integration _id, your customer must set the Callback URL field in their LINE Business Center page. The URL should look like the following: `https://app.smooch.io:443/api/line/webhooks/{appId}/{integrationId}`. 
     * @param {String} type For LINE, each of your customers will need to manually configure a webhook in their LINE configuration page that will point to Sunshine Conversations servers. You must instruct your customers how to configure this manually on their LINE bot page. Once you’ve acquired all the required information, call the Create Integration endpoint. Then, using the returned integration _id, your customer must set the Callback URL field in their LINE Business Center page. The URL should look like the following: `https://app.smooch.io:443/api/line/webhooks/{appId}/{integrationId}`. 
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns LINE Channel ID. Can be omitted along with `channelSecret` to integrate LINE to setup a webhook before receiving the `channelId` and `channelSecret` back from LINE.
         * @return {String}
         */
  }, {
    key: "getChannelId",
    value: function getChannelId() {
      return this.channelId;
    }

    /**
     * Sets LINE Channel ID. Can be omitted along with `channelSecret` to integrate LINE to setup a webhook before receiving the `channelId` and `channelSecret` back from LINE.
     * @param {String} channelId LINE Channel ID. Can be omitted along with `channelSecret` to integrate LINE to setup a webhook before receiving the `channelId` and `channelSecret` back from LINE.
     */
  }, {
    key: "setChannelId",
    value: function setChannelId(channelId) {
      this['channelId'] = channelId;
    }
    /**
         * Returns LINE Channel Secret. Can be omitted along with `channelId` to integrate LINE to setup a webhook before receiving the `channelId` and `channelSecret` back from LINE.
         * @return {String}
         */
  }, {
    key: "getChannelSecret",
    value: function getChannelSecret() {
      return this.channelSecret;
    }

    /**
     * Sets LINE Channel Secret. Can be omitted along with `channelId` to integrate LINE to setup a webhook before receiving the `channelId` and `channelSecret` back from LINE.
     * @param {String} channelSecret LINE Channel Secret. Can be omitted along with `channelId` to integrate LINE to setup a webhook before receiving the `channelId` and `channelSecret` back from LINE.
     */
  }, {
    key: "setChannelSecret",
    value: function setChannelSecret(channelSecret) {
      this['channelSecret'] = channelSecret;
    }
    /**
         * Returns LINE Channel Access Token.
         * @return {String}
         */
  }, {
    key: "getChannelAccessToken",
    value: function getChannelAccessToken() {
      return this.channelAccessToken;
    }

    /**
     * Sets LINE Channel Access Token.
     * @param {String} channelAccessToken LINE Channel Access Token.
     */
  }, {
    key: "setChannelAccessToken",
    value: function setChannelAccessToken(channelAccessToken) {
      this['channelAccessToken'] = channelAccessToken;
    }
    /**
         * Returns LINE Service Code.
         * @return {String}
         */
  }, {
    key: "getServiceCode",
    value: function getServiceCode() {
      return this.serviceCode;
    }

    /**
     * Sets LINE Service Code.
     * @param {String} serviceCode LINE Service Code.
     */
  }, {
    key: "setServiceCode",
    value: function setServiceCode(serviceCode) {
      this['serviceCode'] = serviceCode;
    }
    /**
         * Returns LINE Switcher Secret.
         * @return {String}
         */
  }, {
    key: "getSwitcherSecret",
    value: function getSwitcherSecret() {
      return this.switcherSecret;
    }

    /**
     * Sets LINE Switcher Secret.
     * @param {String} switcherSecret LINE Switcher Secret.
     */
  }, {
    key: "setSwitcherSecret",
    value: function setSwitcherSecret(switcherSecret) {
      this['switcherSecret'] = switcherSecret;
    }
    /**
         * Returns URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
         * @return {String}
         */
  }, {
    key: "getQrCodeUrl",
    value: function getQrCodeUrl() {
      return this.qrCodeUrl;
    }

    /**
     * Sets URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
     * @param {String} qrCodeUrl URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
     */
  }, {
    key: "setQrCodeUrl",
    value: function setQrCodeUrl(qrCodeUrl) {
      this['qrCodeUrl'] = qrCodeUrl;
    }
    /**
         * Returns LINE Basic ID. Is automatically set when qrCodeUrl is updated.
         * @return {String}
         */
  }, {
    key: "getLineId",
    value: function getLineId() {
      return this.lineId;
    }

    /**
     * Sets LINE Basic ID. Is automatically set when qrCodeUrl is updated.
     * @param {String} lineId LINE Basic ID. Is automatically set when qrCodeUrl is updated.
     */
  }, {
    key: "setLineId",
    value: function setLineId(lineId) {
      this['lineId'] = lineId;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>LineAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/LineAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/LineAllOf} The populated <code>LineAllOf</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new LineAllOf();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('channelId')) {
          obj['channelId'] = _ApiClient["default"].convertToType(data['channelId'], 'String');
        }
        if (data.hasOwnProperty('channelSecret')) {
          obj['channelSecret'] = _ApiClient["default"].convertToType(data['channelSecret'], 'String');
        }
        if (data.hasOwnProperty('channelAccessToken')) {
          obj['channelAccessToken'] = _ApiClient["default"].convertToType(data['channelAccessToken'], 'String');
        }
        if (data.hasOwnProperty('serviceCode')) {
          obj['serviceCode'] = _ApiClient["default"].convertToType(data['serviceCode'], 'String');
        }
        if (data.hasOwnProperty('switcherSecret')) {
          obj['switcherSecret'] = _ApiClient["default"].convertToType(data['switcherSecret'], 'String');
        }
        if (data.hasOwnProperty('qrCodeUrl')) {
          obj['qrCodeUrl'] = _ApiClient["default"].convertToType(data['qrCodeUrl'], 'String');
        }
        if (data.hasOwnProperty('lineId')) {
          obj['lineId'] = _ApiClient["default"].convertToType(data['lineId'], 'String');
        }
      }
      return obj;
    }
  }]);
  return LineAllOf;
}();
/**
 * For LINE, each of your customers will need to manually configure a webhook in their LINE configuration page that will point to Sunshine Conversations servers. You must instruct your customers how to configure this manually on their LINE bot page. Once you’ve acquired all the required information, call the Create Integration endpoint. Then, using the returned integration _id, your customer must set the Callback URL field in their LINE Business Center page. The URL should look like the following: `https://app.smooch.io:443/api/line/webhooks/{appId}/{integrationId}`. 
 * @member {String} type
 * @default 'line'
 */
LineAllOf.prototype['type'] = 'line';

/**
 * LINE Channel ID. Can be omitted along with `channelSecret` to integrate LINE to setup a webhook before receiving the `channelId` and `channelSecret` back from LINE.
 * @member {String} channelId
 */
LineAllOf.prototype['channelId'] = undefined;

/**
 * LINE Channel Secret. Can be omitted along with `channelId` to integrate LINE to setup a webhook before receiving the `channelId` and `channelSecret` back from LINE.
 * @member {String} channelSecret
 */
LineAllOf.prototype['channelSecret'] = undefined;

/**
 * LINE Channel Access Token.
 * @member {String} channelAccessToken
 */
LineAllOf.prototype['channelAccessToken'] = undefined;

/**
 * LINE Service Code.
 * @member {String} serviceCode
 */
LineAllOf.prototype['serviceCode'] = undefined;

/**
 * LINE Switcher Secret.
 * @member {String} switcherSecret
 */
LineAllOf.prototype['switcherSecret'] = undefined;

/**
 * URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
 * @member {String} qrCodeUrl
 */
LineAllOf.prototype['qrCodeUrl'] = undefined;

/**
 * LINE Basic ID. Is automatically set when qrCodeUrl is updated.
 * @member {String} lineId
 */
LineAllOf.prototype['lineId'] = undefined;
var _default = LineAllOf;
exports["default"] = _default;