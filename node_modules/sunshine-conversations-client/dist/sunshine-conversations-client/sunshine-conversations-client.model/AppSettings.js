"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The AppSettings model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/AppSettings
 * @version 9.14.0
 */
var AppSettings = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>AppSettings</code>.
   * Customizable app settings.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/AppSettings
   */
  function AppSettings() {
    _classCallCheck(this, AppSettings);
    AppSettings.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(AppSettings, [{
    key: "getConversationRetentionSeconds",
    value:
    /**
         * Returns Number of seconds of inactivity before a conversation’s messages  will be automatically deleted. See  [Conversation Retention Seconds](https://docs.smooch.io/guide/creating-and-managing-apps/#conversation-retention-seconds) for more information. 
         * minimum: 0
         * @return {Number}
         */
    function getConversationRetentionSeconds() {
      return this.conversationRetentionSeconds;
    }

    /**
     * Sets Number of seconds of inactivity before a conversation’s messages  will be automatically deleted. See  [Conversation Retention Seconds](https://docs.smooch.io/guide/creating-and-managing-apps/#conversation-retention-seconds) for more information. 
     * @param {Number} conversationRetentionSeconds Number of seconds of inactivity before a conversation’s messages  will be automatically deleted. See  [Conversation Retention Seconds](https://docs.smooch.io/guide/creating-and-managing-apps/#conversation-retention-seconds) for more information. 
     */
  }, {
    key: "setConversationRetentionSeconds",
    value: function setConversationRetentionSeconds(conversationRetentionSeconds) {
      this['conversationRetentionSeconds'] = conversationRetentionSeconds;
    }
    /**
         * Returns A boolean specifying whether credit card numbers should be masked  when sent through Sunshine Conversations. 
         * @return {Boolean}
         */
  }, {
    key: "getMaskCreditCardNumbers",
    value: function getMaskCreditCardNumbers() {
      return this.maskCreditCardNumbers;
    }

    /**
     * Sets A boolean specifying whether credit card numbers should be masked  when sent through Sunshine Conversations. 
     * @param {Boolean} maskCreditCardNumbers A boolean specifying whether credit card numbers should be masked  when sent through Sunshine Conversations. 
     */
  }, {
    key: "setMaskCreditCardNumbers",
    value: function setMaskCreditCardNumbers(maskCreditCardNumbers) {
      this['maskCreditCardNumbers'] = maskCreditCardNumbers;
    }
    /**
         * Returns A boolean specifying whether animal names should be used for  unnamed users. See the  [user naming guide](https://docs.smooch.io/guide/receiving-messages/#message-author-name) for details. 
         * @return {Boolean}
         */
  }, {
    key: "getUseAnimalNames",
    value: function getUseAnimalNames() {
      return this.useAnimalNames;
    }

    /**
     * Sets A boolean specifying whether animal names should be used for  unnamed users. See the  [user naming guide](https://docs.smooch.io/guide/receiving-messages/#message-author-name) for details. 
     * @param {Boolean} useAnimalNames A boolean specifying whether animal names should be used for  unnamed users. See the  [user naming guide](https://docs.smooch.io/guide/receiving-messages/#message-author-name) for details. 
     */
  }, {
    key: "setUseAnimalNames",
    value: function setUseAnimalNames(useAnimalNames) {
      this['useAnimalNames'] = useAnimalNames;
    }
    /**
         * Returns A boolean specifying whether a message should be added to the conversation  history when a postback button is clicked. See  [Echo Postbacks](https://docs.smooch.io/guide/creating-and-managing-apps/#echo-postbacks) for more information. 
         * @return {Boolean}
         */
  }, {
    key: "getEchoPostback",
    value: function getEchoPostback() {
      return this.echoPostback;
    }

    /**
     * Sets A boolean specifying whether a message should be added to the conversation  history when a postback button is clicked. See  [Echo Postbacks](https://docs.smooch.io/guide/creating-and-managing-apps/#echo-postbacks) for more information. 
     * @param {Boolean} echoPostback A boolean specifying whether a message should be added to the conversation  history when a postback button is clicked. See  [Echo Postbacks](https://docs.smooch.io/guide/creating-and-managing-apps/#echo-postbacks) for more information. 
     */
  }, {
    key: "setEchoPostback",
    value: function setEchoPostback(echoPostback) {
      this['echoPostback'] = echoPostback;
    }
    /**
         * Returns A boolean specifying whether a non message event coming from a channel will  trigger a  [start conversation](https://docs.smooch.io/rest/#section/Webhook-Triggers) event and count as a monthly active user (MAU). <aside class=\"notice\">Calling <code>startConversation()</code> (or equivalent) from the Android,  iOS or Web SDK will count as a MAU, regardless of the value of this setting.</aside> 
         * @return {Boolean}
         */
  }, {
    key: "getIgnoreAutoConversationStart",
    value: function getIgnoreAutoConversationStart() {
      return this.ignoreAutoConversationStart;
    }

    /**
     * Sets A boolean specifying whether a non message event coming from a channel will  trigger a  [start conversation](https://docs.smooch.io/rest/#section/Webhook-Triggers) event and count as a monthly active user (MAU). <aside class=\"notice\">Calling <code>startConversation()</code> (or equivalent) from the Android,  iOS or Web SDK will count as a MAU, regardless of the value of this setting.</aside> 
     * @param {Boolean} ignoreAutoConversationStart A boolean specifying whether a non message event coming from a channel will  trigger a  [start conversation](https://docs.smooch.io/rest/#section/Webhook-Triggers) event and count as a monthly active user (MAU). <aside class=\"notice\">Calling <code>startConversation()</code> (or equivalent) from the Android,  iOS or Web SDK will count as a MAU, regardless of the value of this setting.</aside> 
     */
  }, {
    key: "setIgnoreAutoConversationStart",
    value: function setIgnoreAutoConversationStart(ignoreAutoConversationStart) {
      this['ignoreAutoConversationStart'] = ignoreAutoConversationStart;
    }
    /**
         * Returns A boolean specifying whether users are allowed to be part of several conversations. Enabling `multiConvo` is **irreversible**. 
         * @return {Boolean}
         */
  }, {
    key: "getMultiConvoEnabled",
    value: function getMultiConvoEnabled() {
      return this.multiConvoEnabled;
    }

    /**
     * Sets A boolean specifying whether users are allowed to be part of several conversations. Enabling `multiConvo` is **irreversible**. 
     * @param {Boolean} multiConvoEnabled A boolean specifying whether users are allowed to be part of several conversations. Enabling `multiConvo` is **irreversible**. 
     */
  }, {
    key: "setMultiConvoEnabled",
    value: function setMultiConvoEnabled(multiConvoEnabled) {
      this['multiConvoEnabled'] = multiConvoEnabled;
    }
    /**
         * Returns A string specifying whether attachments should be stored in a publicly or privately accessible cloud storage. attachmentsAccess is set to public by default but can be modified to private. See <a href=\"https://docs.smooch.io/guide/private-attachments/\">Private Attachments</a> for more information. 
         * @return {String}
         */
  }, {
    key: "getAttachmentsAccess",
    value: function getAttachmentsAccess() {
      return this.attachmentsAccess;
    }

    /**
     * Sets A string specifying whether attachments should be stored in a publicly or privately accessible cloud storage. attachmentsAccess is set to public by default but can be modified to private. See <a href=\"https://docs.smooch.io/guide/private-attachments/\">Private Attachments</a> for more information. 
     * @param {String} attachmentsAccess A string specifying whether attachments should be stored in a publicly or privately accessible cloud storage. attachmentsAccess is set to public by default but can be modified to private. See <a href=\"https://docs.smooch.io/guide/private-attachments/\">Private Attachments</a> for more information. 
     */
  }, {
    key: "setAttachmentsAccess",
    value: function setAttachmentsAccess(attachmentsAccess) {
      this['attachmentsAccess'] = attachmentsAccess;
    }
    /**
         * Returns Number of seconds representing the expiration time of the generated media tokens for private attachments. The JWT will be valid for 2 hours by default. See See <a href=\"https://docs.smooch.io/guide/private-attachments/\">Private Attachments</a> for more information. 
         * @return {Number}
         */
  }, {
    key: "getAttachmentsTokenExpirationSeconds",
    value: function getAttachmentsTokenExpirationSeconds() {
      return this.attachmentsTokenExpirationSeconds;
    }

    /**
     * Sets Number of seconds representing the expiration time of the generated media tokens for private attachments. The JWT will be valid for 2 hours by default. See See <a href=\"https://docs.smooch.io/guide/private-attachments/\">Private Attachments</a> for more information. 
     * @param {Number} attachmentsTokenExpirationSeconds Number of seconds representing the expiration time of the generated media tokens for private attachments. The JWT will be valid for 2 hours by default. See See <a href=\"https://docs.smooch.io/guide/private-attachments/\">Private Attachments</a> for more information. 
     */
  }, {
    key: "setAttachmentsTokenExpirationSeconds",
    value: function setAttachmentsTokenExpirationSeconds(attachmentsTokenExpirationSeconds) {
      this['attachmentsTokenExpirationSeconds'] = attachmentsTokenExpirationSeconds;
    }
    /**
         * Returns A boolean specifying whether the messages authored by the Sunshine Conversations platform should be localized. 
         * @return {Boolean}
         */
  }, {
    key: "getAppLocalizationEnabled",
    value: function getAppLocalizationEnabled() {
      return this.appLocalizationEnabled;
    }

    /**
     * Sets A boolean specifying whether the messages authored by the Sunshine Conversations platform should be localized. 
     * @param {Boolean} appLocalizationEnabled A boolean specifying whether the messages authored by the Sunshine Conversations platform should be localized. 
     */
  }, {
    key: "setAppLocalizationEnabled",
    value: function setAppLocalizationEnabled(appLocalizationEnabled) {
      this['appLocalizationEnabled'] = appLocalizationEnabled;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>AppSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/AppSettings} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/AppSettings} The populated <code>AppSettings</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new AppSettings();
        if (data.hasOwnProperty('conversationRetentionSeconds')) {
          obj['conversationRetentionSeconds'] = _ApiClient["default"].convertToType(data['conversationRetentionSeconds'], 'Number');
        }
        if (data.hasOwnProperty('maskCreditCardNumbers')) {
          obj['maskCreditCardNumbers'] = _ApiClient["default"].convertToType(data['maskCreditCardNumbers'], 'Boolean');
        }
        if (data.hasOwnProperty('useAnimalNames')) {
          obj['useAnimalNames'] = _ApiClient["default"].convertToType(data['useAnimalNames'], 'Boolean');
        }
        if (data.hasOwnProperty('echoPostback')) {
          obj['echoPostback'] = _ApiClient["default"].convertToType(data['echoPostback'], 'Boolean');
        }
        if (data.hasOwnProperty('ignoreAutoConversationStart')) {
          obj['ignoreAutoConversationStart'] = _ApiClient["default"].convertToType(data['ignoreAutoConversationStart'], 'Boolean');
        }
        if (data.hasOwnProperty('multiConvoEnabled')) {
          obj['multiConvoEnabled'] = _ApiClient["default"].convertToType(data['multiConvoEnabled'], 'Boolean');
        }
        if (data.hasOwnProperty('attachmentsAccess')) {
          obj['attachmentsAccess'] = _ApiClient["default"].convertToType(data['attachmentsAccess'], 'String');
        }
        if (data.hasOwnProperty('attachmentsTokenExpirationSeconds')) {
          obj['attachmentsTokenExpirationSeconds'] = _ApiClient["default"].convertToType(data['attachmentsTokenExpirationSeconds'], 'Number');
        }
        if (data.hasOwnProperty('appLocalizationEnabled')) {
          obj['appLocalizationEnabled'] = _ApiClient["default"].convertToType(data['appLocalizationEnabled'], 'Boolean');
        }
      }
      return obj;
    }
  }]);
  return AppSettings;
}();
/**
 * Number of seconds of inactivity before a conversation’s messages  will be automatically deleted. See  [Conversation Retention Seconds](https://docs.smooch.io/guide/creating-and-managing-apps/#conversation-retention-seconds) for more information. 
 * @member {Number} conversationRetentionSeconds
 */
AppSettings.prototype['conversationRetentionSeconds'] = undefined;

/**
 * A boolean specifying whether credit card numbers should be masked  when sent through Sunshine Conversations. 
 * @member {Boolean} maskCreditCardNumbers
 */
AppSettings.prototype['maskCreditCardNumbers'] = undefined;

/**
 * A boolean specifying whether animal names should be used for  unnamed users. See the  [user naming guide](https://docs.smooch.io/guide/receiving-messages/#message-author-name) for details. 
 * @member {Boolean} useAnimalNames
 */
AppSettings.prototype['useAnimalNames'] = undefined;

/**
 * A boolean specifying whether a message should be added to the conversation  history when a postback button is clicked. See  [Echo Postbacks](https://docs.smooch.io/guide/creating-and-managing-apps/#echo-postbacks) for more information. 
 * @member {Boolean} echoPostback
 */
AppSettings.prototype['echoPostback'] = undefined;

/**
 * A boolean specifying whether a non message event coming from a channel will  trigger a  [start conversation](https://docs.smooch.io/rest/#section/Webhook-Triggers) event and count as a monthly active user (MAU). <aside class=\"notice\">Calling <code>startConversation()</code> (or equivalent) from the Android,  iOS or Web SDK will count as a MAU, regardless of the value of this setting.</aside> 
 * @member {Boolean} ignoreAutoConversationStart
 */
AppSettings.prototype['ignoreAutoConversationStart'] = undefined;

/**
 * A boolean specifying whether users are allowed to be part of several conversations. Enabling `multiConvo` is **irreversible**. 
 * @member {Boolean} multiConvoEnabled
 */
AppSettings.prototype['multiConvoEnabled'] = undefined;

/**
 * A string specifying whether attachments should be stored in a publicly or privately accessible cloud storage. attachmentsAccess is set to public by default but can be modified to private. See <a href=\"https://docs.smooch.io/guide/private-attachments/\">Private Attachments</a> for more information. 
 * @member {String} attachmentsAccess
 */
AppSettings.prototype['attachmentsAccess'] = undefined;

/**
 * Number of seconds representing the expiration time of the generated media tokens for private attachments. The JWT will be valid for 2 hours by default. See See <a href=\"https://docs.smooch.io/guide/private-attachments/\">Private Attachments</a> for more information. 
 * @member {Number} attachmentsTokenExpirationSeconds
 */
AppSettings.prototype['attachmentsTokenExpirationSeconds'] = undefined;

/**
 * A boolean specifying whether the messages authored by the Sunshine Conversations platform should be localized. 
 * @member {Boolean} appLocalizationEnabled
 */
AppSettings.prototype['appLocalizationEnabled'] = undefined;
var _default = AppSettings;
exports["default"] = _default;