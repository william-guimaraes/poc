"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The Webhook model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Webhook
 * @version 9.14.0
 */
var Webhook = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Webhook</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Webhook
   * @param target {String} URL to be called when the webhook is triggered.
   * @param triggers {Array.<String>} An array of triggers the integration is subscribed to. This property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
   */
  function Webhook(target, triggers) {
    _classCallCheck(this, Webhook);
    Webhook.initialize(this, target, triggers);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(Webhook, [{
    key: "getId",
    value:
    /**
         * Returns A unique identifier for the webhook.
         * @return {String}
         */
    function getId() {
      return this.id;
    }

    /**
     * Sets A unique identifier for the webhook.
     * @param {String} id A unique identifier for the webhook.
     */
  }, {
    key: "setId",
    value: function setId(id) {
      this['id'] = id;
    }
    /**
         * Returns Schema version of the payload delivered to this webhook. Can be `v1`, `v1.1` or `v2`.
         * @return {String}
         */
  }, {
    key: "getVersion",
    value: function getVersion() {
      return this.version;
    }

    /**
     * Sets Schema version of the payload delivered to this webhook. Can be `v1`, `v1.1` or `v2`.
     * @param {String} version Schema version of the payload delivered to this webhook. Can be `v1`, `v1.1` or `v2`.
     */
  }, {
    key: "setVersion",
    value: function setVersion(version) {
      this['version'] = version;
    }
    /**
         * Returns URL to be called when the webhook is triggered.
         * @return {String}
         */
  }, {
    key: "getTarget",
    value: function getTarget() {
      return this.target;
    }

    /**
     * Sets URL to be called when the webhook is triggered.
     * @param {String} target URL to be called when the webhook is triggered.
     */
  }, {
    key: "setTarget",
    value: function setTarget(target) {
      this['target'] = target;
    }
    /**
         * Returns An array of triggers the integration is subscribed to. This property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
         * @return {Array.<String>}
         */
  }, {
    key: "getTriggers",
    value: function getTriggers() {
      return this.triggers;
    }

    /**
     * Sets An array of triggers the integration is subscribed to. This property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
     * @param {Array.<String>} triggers An array of triggers the integration is subscribed to. This property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
     */
  }, {
    key: "setTriggers",
    value: function setTriggers(triggers) {
      this['triggers'] = triggers;
    }
    /**
         * Returns Webhook secret, used to verify the origin of incoming requests.
         * @return {String}
         */
  }, {
    key: "getSecret",
    value: function getSecret() {
      return this.secret;
    }

    /**
     * Sets Webhook secret, used to verify the origin of incoming requests.
     * @param {String} secret Webhook secret, used to verify the origin of incoming requests.
     */
  }, {
    key: "setSecret",
    value: function setSecret(secret) {
      this['secret'] = secret;
    }
    /**
         * Returns A boolean specifying whether webhook payloads should include the complete user schema for events involving a specific user.
         * @return {Boolean}
         */
  }, {
    key: "getIncludeFullUser",
    value: function getIncludeFullUser() {
      return this.includeFullUser;
    }

    /**
     * Sets A boolean specifying whether webhook payloads should include the complete user schema for events involving a specific user.
     * @param {Boolean} includeFullUser A boolean specifying whether webhook payloads should include the complete user schema for events involving a specific user.
     */
  }, {
    key: "setIncludeFullUser",
    value: function setIncludeFullUser(includeFullUser) {
      this['includeFullUser'] = includeFullUser;
    }
    /**
         * Returns A boolean specifying whether webhook payloads should include the client and device object (when applicable).
         * @return {Boolean}
         */
  }, {
    key: "getIncludeFullSource",
    value: function getIncludeFullSource() {
      return this.includeFullSource;
    }

    /**
     * Sets A boolean specifying whether webhook payloads should include the client and device object (when applicable).
     * @param {Boolean} includeFullSource A boolean specifying whether webhook payloads should include the client and device object (when applicable).
     */
  }, {
    key: "setIncludeFullSource",
    value: function setIncludeFullSource(includeFullSource) {
      this['includeFullSource'] = includeFullSource;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, target, triggers) {
      obj['target'] = target;
      obj['triggers'] = triggers;
    }

    /**
     * Constructs a <code>Webhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Webhook} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Webhook} The populated <code>Webhook</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Webhook();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('version')) {
          obj['version'] = _ApiClient["default"].convertToType(data['version'], 'String');
        }
        if (data.hasOwnProperty('target')) {
          obj['target'] = _ApiClient["default"].convertToType(data['target'], 'String');
        }
        if (data.hasOwnProperty('triggers')) {
          obj['triggers'] = _ApiClient["default"].convertToType(data['triggers'], ['String']);
        }
        if (data.hasOwnProperty('secret')) {
          obj['secret'] = _ApiClient["default"].convertToType(data['secret'], 'String');
        }
        if (data.hasOwnProperty('includeFullUser')) {
          obj['includeFullUser'] = _ApiClient["default"].convertToType(data['includeFullUser'], 'Boolean');
        }
        if (data.hasOwnProperty('includeFullSource')) {
          obj['includeFullSource'] = _ApiClient["default"].convertToType(data['includeFullSource'], 'Boolean');
        }
      }
      return obj;
    }
  }]);
  return Webhook;
}();
/**
 * A unique identifier for the webhook.
 * @member {String} id
 */
Webhook.prototype['id'] = undefined;

/**
 * Schema version of the payload delivered to this webhook. Can be `v1`, `v1.1` or `v2`.
 * @member {String} version
 */
Webhook.prototype['version'] = undefined;

/**
 * URL to be called when the webhook is triggered.
 * @member {String} target
 */
Webhook.prototype['target'] = undefined;

/**
 * An array of triggers the integration is subscribed to. This property is case sensitive. [More details](https://docs.smooch.io/rest/#section/Webhook-Triggers).
 * @member {Array.<String>} triggers
 */
Webhook.prototype['triggers'] = undefined;

/**
 * Webhook secret, used to verify the origin of incoming requests.
 * @member {String} secret
 */
Webhook.prototype['secret'] = undefined;

/**
 * A boolean specifying whether webhook payloads should include the complete user schema for events involving a specific user.
 * @member {Boolean} includeFullUser
 * @default false
 */
Webhook.prototype['includeFullUser'] = false;

/**
 * A boolean specifying whether webhook payloads should include the client and device object (when applicable).
 * @member {Boolean} includeFullSource
 * @default false
 */
Webhook.prototype['includeFullSource'] = false;
var _default = Webhook;
exports["default"] = _default;