"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Author = _interopRequireDefault(require("./Author"));
var _Content = _interopRequireDefault(require("./Content"));
var _Destination = _interopRequireDefault(require("./Destination"));
var _MessageOverride = _interopRequireDefault(require("./MessageOverride"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The MessagePost model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/MessagePost
 * @version 9.14.0
 */
var MessagePost = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>MessagePost</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/MessagePost
   * @param author {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} The author of the message.
   * @param content {module:sunshine-conversations-client/sunshine-conversations-client.model/Content} The content of the message.
   */
  function MessagePost(author, content) {
    _classCallCheck(this, MessagePost);
    MessagePost.initialize(this, author, content);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(MessagePost, [{
    key: "getAuthor",
    value:
    /**
         * Returns The author of the message.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Author}
         */
    function getAuthor() {
      return this.author;
    }

    /**
     * Sets The author of the message.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} author The author of the message.
     */
  }, {
    key: "setAuthor",
    value: function setAuthor(author) {
      this['author'] = author;
    }
    /**
         * Returns The content of the message.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Content}
         */
  }, {
    key: "getContent",
    value: function getContent() {
      return this.content;
    }

    /**
     * Sets The content of the message.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Content} content The content of the message.
     */
  }, {
    key: "setContent",
    value: function setContent(content) {
      this['content'] = content;
    }
    /**
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Destination}
         */
  }, {
    key: "getDestination",
    value: function getDestination() {
      return this.destination;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Destination} destination
     */
  }, {
    key: "setDestination",
    value: function setDestination(destination) {
      this['destination'] = destination;
    }
    /**
         * Returns Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
         * @return {Object}
         */
  }, {
    key: "getMetadata",
    value: function getMetadata() {
      return this.metadata;
    }

    /**
     * Sets Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
     * @param {Object} metadata Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
     */
  }, {
    key: "setMetadata",
    value: function setMetadata(metadata) {
      this['metadata'] = metadata;
    }
    /**
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/MessageOverride}
         */
  }, {
    key: "getOverride",
    value: function getOverride() {
      return this.override;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/MessageOverride} override
     */
  }, {
    key: "setOverride",
    value: function setOverride(override) {
      this['override'] = override;
    }
    /**
         * Returns When `schema` is set to `\"whatsapp\"`, the `content` key is expected to conform to the [native WhatsApp schema](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates) for sending message templates. For more details, consult the documentation for [sending message templates on WhatsApp](https://docs.smooch.io/guide/whatsapp/#sending-message-templates). 
         * @return {String}
         */
  }, {
    key: "getSchema",
    value: function getSchema() {
      return this.schema;
    }

    /**
     * Sets When `schema` is set to `\"whatsapp\"`, the `content` key is expected to conform to the [native WhatsApp schema](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates) for sending message templates. For more details, consult the documentation for [sending message templates on WhatsApp](https://docs.smooch.io/guide/whatsapp/#sending-message-templates). 
     * @param {String} schema When `schema` is set to `\"whatsapp\"`, the `content` key is expected to conform to the [native WhatsApp schema](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates) for sending message templates. For more details, consult the documentation for [sending message templates on WhatsApp](https://docs.smooch.io/guide/whatsapp/#sending-message-templates). 
     */
  }, {
    key: "setSchema",
    value: function setSchema(schema) {
      this['schema'] = schema;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, author, content) {
      obj['author'] = author;
      obj['content'] = content;
    }

    /**
     * Constructs a <code>MessagePost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/MessagePost} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/MessagePost} The populated <code>MessagePost</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new MessagePost();
        if (data.hasOwnProperty('author')) {
          obj['author'] = _ApiClient["default"].convertToType(data['author'], _Author["default"]);
        }
        if (data.hasOwnProperty('content')) {
          obj['content'] = _ApiClient["default"].convertToType(data['content'], _Content["default"]);
        }
        if (data.hasOwnProperty('destination')) {
          obj['destination'] = _Destination["default"].constructFromObject(data['destination']);
        }
        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], Object);
        }
        if (data.hasOwnProperty('override')) {
          obj['override'] = _MessageOverride["default"].constructFromObject(data['override']);
        }
        if (data.hasOwnProperty('schema')) {
          obj['schema'] = _ApiClient["default"].convertToType(data['schema'], 'String');
        }
      }
      return obj;
    }
  }]);
  return MessagePost;
}();
/**
 * The author of the message.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} author
 */
MessagePost.prototype['author'] = undefined;

/**
 * The content of the message.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Content} content
 */
MessagePost.prototype['content'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Destination} destination
 */
MessagePost.prototype['destination'] = undefined;

/**
 * Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
 * @member {Object} metadata
 */
MessagePost.prototype['metadata'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/MessageOverride} override
 */
MessagePost.prototype['override'] = undefined;

/**
 * When `schema` is set to `\"whatsapp\"`, the `content` key is expected to conform to the [native WhatsApp schema](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates) for sending message templates. For more details, consult the documentation for [sending message templates on WhatsApp](https://docs.smooch.io/guide/whatsapp/#sending-message-templates). 
 * @member {String} schema
 */
MessagePost.prototype['schema'] = undefined;
var _default = MessagePost;
exports["default"] = _default;