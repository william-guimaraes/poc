"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Field = _interopRequireDefault(require("./Field"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The FormResponseMessage model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessage
 * @version 9.14.0
 */
var FormResponseMessage = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>FormResponseMessage</code>.
   * A formResponse type message is a response to a form type message. formResponse type messages are only supported as responses to form messages on Web Messenger and cannot be sent via the API.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessage
   * @param type {String} The type of message.
   * @param fields {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>} Array of field objects that contain the submitted fields.
   */
  function FormResponseMessage(type, fields) {
    _classCallCheck(this, FormResponseMessage);
    FormResponseMessage.initialize(this, type, fields);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(FormResponseMessage, [{
    key: "getType",
    value:
    /**
         * Returns The type of message.
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The type of message.
     * @param {String} type The type of message.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns Array of field objects that contain the submitted fields.
         * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>}
         */
  }, {
    key: "getFields",
    value: function getFields() {
      return this.fields;
    }

    /**
     * Sets Array of field objects that contain the submitted fields.
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>} fields Array of field objects that contain the submitted fields.
     */
  }, {
    key: "setFields",
    value: function setFields(fields) {
      this['fields'] = fields;
    }
    /**
         * Returns A string containing the `label: value` of all fields, each separated by a newline character.
         * @return {String}
         */
  }, {
    key: "getTextFallback",
    value: function getTextFallback() {
      return this.textFallback;
    }

    /**
     * Sets A string containing the `label: value` of all fields, each separated by a newline character.
     * @param {String} textFallback A string containing the `label: value` of all fields, each separated by a newline character.
     */
  }, {
    key: "setTextFallback",
    value: function setTextFallback(textFallback) {
      this['textFallback'] = textFallback;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type, fields) {
      obj['type'] = type;
      obj['fields'] = fields;
    }

    /**
     * Constructs a <code>FormResponseMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessage} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessage} The populated <code>FormResponseMessage</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new FormResponseMessage();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('fields')) {
          obj['fields'] = _ApiClient["default"].convertToType(data['fields'], [_Field["default"]]);
        }
        if (data.hasOwnProperty('textFallback')) {
          obj['textFallback'] = _ApiClient["default"].convertToType(data['textFallback'], 'String');
        }
      }
      return obj;
    }
  }]);
  return FormResponseMessage;
}();
/**
 * The type of message.
 * @member {String} type
 * @default 'formResponse'
 */
FormResponseMessage.prototype['type'] = 'formResponse';

/**
 * Array of field objects that contain the submitted fields.
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Field>} fields
 */
FormResponseMessage.prototype['fields'] = undefined;

/**
 * A string containing the `label: value` of all fields, each separated by a newline character.
 * @member {String} textFallback
 */
FormResponseMessage.prototype['textFallback'] = undefined;
var _default = FormResponseMessage;
exports["default"] = _default;