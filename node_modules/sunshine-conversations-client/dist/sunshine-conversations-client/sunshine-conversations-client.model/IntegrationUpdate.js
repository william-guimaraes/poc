"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _AndroidUpdate = _interopRequireDefault(require("./AndroidUpdate"));
var _AppleUpdate = _interopRequireDefault(require("./AppleUpdate"));
var _CustomUpdate = _interopRequireDefault(require("./CustomUpdate"));
var _InstagramUpdate = _interopRequireDefault(require("./InstagramUpdate"));
var _IosUpdate = _interopRequireDefault(require("./IosUpdate"));
var _LineUpdate = _interopRequireDefault(require("./LineUpdate"));
var _MailgunUpdate = _interopRequireDefault(require("./MailgunUpdate"));
var _MessageBirdUpdate = _interopRequireDefault(require("./MessageBirdUpdate"));
var _MessengerUpdate = _interopRequireDefault(require("./MessengerUpdate"));
var _PrechatCapture = _interopRequireDefault(require("./PrechatCapture"));
var _TelegramUpdate = _interopRequireDefault(require("./TelegramUpdate"));
var _TwilioUpdate = _interopRequireDefault(require("./TwilioUpdate"));
var _TwitterUpdate = _interopRequireDefault(require("./TwitterUpdate"));
var _ViberUpdate = _interopRequireDefault(require("./ViberUpdate"));
var _WebUpdate = _interopRequireDefault(require("./WebUpdate"));
var _WhatsAppUpdate = _interopRequireDefault(require("./WhatsAppUpdate"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The IntegrationUpdate model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/IntegrationUpdate
 * @version 9.14.0
 */
var IntegrationUpdate = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>IntegrationUpdate</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/AndroidUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/AppleUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/CustomUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/InstagramUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/IosUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/LineUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/MailgunUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/MessageBirdUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/MessengerUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/TelegramUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/TwilioUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/TwitterUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ViberUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/WebUpdate
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/WhatsAppUpdate
   */
  function IntegrationUpdate() {
    _classCallCheck(this, IntegrationUpdate);
    _AndroidUpdate["default"].initialize(this);
    _AppleUpdate["default"].initialize(this);
    _CustomUpdate["default"].initialize(this);
    _InstagramUpdate["default"].initialize(this);
    _IosUpdate["default"].initialize(this);
    _LineUpdate["default"].initialize(this);
    _MailgunUpdate["default"].initialize(this);
    _MessageBirdUpdate["default"].initialize(this);
    _MessengerUpdate["default"].initialize(this);
    _TelegramUpdate["default"].initialize(this);
    _TwilioUpdate["default"].initialize(this);
    _TwitterUpdate["default"].initialize(this);
    _ViberUpdate["default"].initialize(this);
    _WebUpdate["default"].initialize(this);
    _WhatsAppUpdate["default"].initialize(this);
    IntegrationUpdate.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(IntegrationUpdate, [{
    key: "getDisplayName",
    value:
    /**
         * Returns A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
         * @return {String}
         */
    function getDisplayName() {
      return this.displayName;
    }

    /**
     * Sets A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
     * @param {String} displayName A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
     */
  }, {
    key: "setDisplayName",
    value: function setDisplayName(displayName) {
      this['displayName'] = displayName;
    }
    /**
         * Returns Your server key from the fcm console.
         * @return {String}
         */
  }, {
    key: "getServerKey",
    value: function getServerKey() {
      return this.serverKey;
    }

    /**
     * Sets Your server key from the fcm console.
     * @param {String} serverKey Your server key from the fcm console.
     */
  }, {
    key: "setServerKey",
    value: function setServerKey(serverKey) {
      this['serverKey'] = serverKey;
    }
    /**
         * Returns Your sender id from the fcm console.
         * @return {String}
         */
  }, {
    key: "getSenderId",
    value: function getSenderId() {
      return this.senderId;
    }

    /**
     * Sets Your sender id from the fcm console.
     * @param {String} senderId Your sender id from the fcm console.
     */
  }, {
    key: "setSenderId",
    value: function setSenderId(senderId) {
      this['senderId'] = senderId;
    }
    /**
         * Returns Allows users to create more than one conversation on the web messenger integration.
         * @return {Boolean}
         */
  }, {
    key: "getCanUserCreateMoreConversations",
    value: function getCanUserCreateMoreConversations() {
      return this.canUserCreateMoreConversations;
    }

    /**
     * Sets Allows users to create more than one conversation on the web messenger integration.
     * @param {Boolean} canUserCreateMoreConversations Allows users to create more than one conversation on the web messenger integration.
     */
  }, {
    key: "setCanUserCreateMoreConversations",
    value: function setCanUserCreateMoreConversations(canUserCreateMoreConversations) {
      this['canUserCreateMoreConversations'] = canUserCreateMoreConversations;
    }
    /**
         * Returns A Facebook Page Access Token.
         * @return {String}
         */
  }, {
    key: "getPageAccessToken",
    value: function getPageAccessToken() {
      return this.pageAccessToken;
    }

    /**
     * Sets A Facebook Page Access Token.
     * @param {String} pageAccessToken A Facebook Page Access Token.
     */
  }, {
    key: "setPageAccessToken",
    value: function setPageAccessToken(pageAccessToken) {
      this['pageAccessToken'] = pageAccessToken;
    }
    /**
         * Returns The binary of your APN certificate base64 encoded.
         * @return {String}
         */
  }, {
    key: "getCertificate",
    value: function getCertificate() {
      return this.certificate;
    }

    /**
     * Sets The binary of your APN certificate base64 encoded.
     * @param {String} certificate The binary of your APN certificate base64 encoded.
     */
  }, {
    key: "setCertificate",
    value: function setCertificate(certificate) {
      this['certificate'] = certificate;
    }
    /**
         * Returns The password for your APN certificate.
         * @return {String}
         */
  }, {
    key: "getPassword",
    value: function getPassword() {
      return this.password;
    }

    /**
     * Sets The password for your APN certificate.
     * @param {String} password The password for your APN certificate.
     */
  }, {
    key: "setPassword",
    value: function setPassword(password) {
      this['password'] = password;
    }
    /**
         * Returns The APN environment to connect to (Production, if true, or Sandbox). Defaults to value inferred from certificate if not specified.
         * @return {Boolean}
         */
  }, {
    key: "getProduction",
    value: function getProduction() {
      return this.production;
    }

    /**
     * Sets The APN environment to connect to (Production, if true, or Sandbox). Defaults to value inferred from certificate if not specified.
     * @param {Boolean} production The APN environment to connect to (Production, if true, or Sandbox). Defaults to value inferred from certificate if not specified.
     */
  }, {
    key: "setProduction",
    value: function setProduction(production) {
      this['production'] = production;
    }
    /**
         * Returns Use the unread count of the conversation as the application badge.
         * @return {Boolean}
         */
  }, {
    key: "getAutoUpdateBadge",
    value: function getAutoUpdateBadge() {
      return this.autoUpdateBadge;
    }

    /**
     * Sets Use the unread count of the conversation as the application badge.
     * @param {Boolean} autoUpdateBadge Use the unread count of the conversation as the application badge.
     */
  }, {
    key: "setAutoUpdateBadge",
    value: function setAutoUpdateBadge(autoUpdateBadge) {
      this['autoUpdateBadge'] = autoUpdateBadge;
    }
    /**
         * Returns A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
         * @return {Boolean}
         */
  }, {
    key: "getHideUnsubscribeLink",
    value: function getHideUnsubscribeLink() {
      return this.hideUnsubscribeLink;
    }

    /**
     * Sets A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
     * @param {Boolean} hideUnsubscribeLink A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
     */
  }, {
    key: "setHideUnsubscribeLink",
    value: function setHideUnsubscribeLink(hideUnsubscribeLink) {
      this['hideUnsubscribeLink'] = hideUnsubscribeLink;
    }
    /**
         * Returns Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
         * @return {String}
         */
  }, {
    key: "getFromAddress",
    value: function getFromAddress() {
      return this.fromAddress;
    }

    /**
     * Sets Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
     * @param {String} fromAddress Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
     */
  }, {
    key: "setFromAddress",
    value: function setFromAddress(fromAddress) {
      this['fromAddress'] = fromAddress;
    }
    /**
         * Returns This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color.
         * @return {String}
         */
  }, {
    key: "getBrandColor",
    value: function getBrandColor() {
      return this.brandColor;
    }

    /**
     * Sets This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color.
     * @param {String} brandColor This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color.
     */
  }, {
    key: "setBrandColor",
    value: function setBrandColor(brandColor) {
      this['brandColor'] = brandColor;
    }
    /**
         * Returns When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it.
         * @return {Boolean}
         */
  }, {
    key: "getFixedIntroPane",
    value: function getFixedIntroPane() {
      return this.fixedIntroPane;
    }

    /**
     * Sets When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it.
     * @param {Boolean} fixedIntroPane When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it.
     */
  }, {
    key: "setFixedIntroPane",
    value: function setFixedIntroPane(fixedIntroPane) {
      this['fixedIntroPane'] = fixedIntroPane;
    }
    /**
         * Returns This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color.
         * @return {String}
         */
  }, {
    key: "getConversationColor",
    value: function getConversationColor() {
      return this.conversationColor;
    }

    /**
     * Sets This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color.
     * @param {String} conversationColor This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color.
     */
  }, {
    key: "setConversationColor",
    value: function setConversationColor(conversationColor) {
      this['conversationColor'] = conversationColor;
    }
    /**
         * Returns This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color.
         * @return {String}
         */
  }, {
    key: "getActionColor",
    value: function getActionColor() {
      return this.actionColor;
    }

    /**
     * Sets This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color.
     * @param {String} actionColor This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color.
     */
  }, {
    key: "setActionColor",
    value: function setActionColor(actionColor) {
      this['actionColor'] = actionColor;
    }
    /**
         * Returns Choose how the messenger will appear on your website. Must be either button or tab.
         * @return {String}
         */
  }, {
    key: "getDisplayStyle",
    value: function getDisplayStyle() {
      return this.displayStyle;
    }

    /**
     * Sets Choose how the messenger will appear on your website. Must be either button or tab.
     * @param {String} displayStyle Choose how the messenger will appear on your website. Must be either button or tab.
     */
  }, {
    key: "setDisplayStyle",
    value: function setDisplayStyle(displayStyle) {
      this['displayStyle'] = displayStyle;
    }
    /**
         * Returns With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
         * @return {String}
         */
  }, {
    key: "getButtonIconUrl",
    value: function getButtonIconUrl() {
      return this.buttonIconUrl;
    }

    /**
     * Sets With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
     * @param {String} buttonIconUrl With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
     */
  }, {
    key: "setButtonIconUrl",
    value: function setButtonIconUrl(buttonIconUrl) {
      this['buttonIconUrl'] = buttonIconUrl;
    }
    /**
         * Returns With the button style Web Messenger, you have the option of specifying the button width.
         * @return {String}
         */
  }, {
    key: "getButtonWidth",
    value: function getButtonWidth() {
      return this.buttonWidth;
    }

    /**
     * Sets With the button style Web Messenger, you have the option of specifying the button width.
     * @param {String} buttonWidth With the button style Web Messenger, you have the option of specifying the button width.
     */
  }, {
    key: "setButtonWidth",
    value: function setButtonWidth(buttonWidth) {
      this['buttonWidth'] = buttonWidth;
    }
    /**
         * Returns With the button style Web Messenger, you have the option of specifying the button height.
         * @return {String}
         */
  }, {
    key: "getButtonHeight",
    value: function getButtonHeight() {
      return this.buttonHeight;
    }

    /**
     * Sets With the button style Web Messenger, you have the option of specifying the button height.
     * @param {String} buttonHeight With the button style Web Messenger, you have the option of specifying the button height.
     */
  }, {
    key: "setButtonHeight",
    value: function setButtonHeight(buttonHeight) {
      this['buttonHeight'] = buttonHeight;
    }
    /**
         * Returns Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed.
         * @return {Array.<String>}
         */
  }, {
    key: "getIntegrationOrder",
    value: function getIntegrationOrder() {
      return this.integrationOrder;
    }

    /**
     * Sets Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed.
     * @param {Array.<String>} integrationOrder Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed.
     */
  }, {
    key: "setIntegrationOrder",
    value: function setIntegrationOrder(integrationOrder) {
      this['integrationOrder'] = integrationOrder;
    }
    /**
         * Returns A custom business name for the Web Messenger.
         * @return {String}
         */
  }, {
    key: "getBusinessName",
    value: function getBusinessName() {
      return this.businessName;
    }

    /**
     * Sets A custom business name for the Web Messenger.
     * @param {String} businessName A custom business name for the Web Messenger.
     */
  }, {
    key: "setBusinessName",
    value: function setBusinessName(businessName) {
      this['businessName'] = businessName;
    }
    /**
         * Returns A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
         * @return {String}
         */
  }, {
    key: "getBusinessIconUrl",
    value: function getBusinessIconUrl() {
      return this.businessIconUrl;
    }

    /**
     * Sets A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
     * @param {String} businessIconUrl A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
     */
  }, {
    key: "setBusinessIconUrl",
    value: function setBusinessIconUrl(businessIconUrl) {
      this['businessIconUrl'] = businessIconUrl;
    }
    /**
         * Returns A background image url for the conversation. Image will be tiled to fit the window.
         * @return {String}
         */
  }, {
    key: "getBackgroundImageUrl",
    value: function getBackgroundImageUrl() {
      return this.backgroundImageUrl;
    }

    /**
     * Sets A background image url for the conversation. Image will be tiled to fit the window.
     * @param {String} backgroundImageUrl A background image url for the conversation. Image will be tiled to fit the window.
     */
  }, {
    key: "setBackgroundImageUrl",
    value: function setBackgroundImageUrl(backgroundImageUrl) {
      this['backgroundImageUrl'] = backgroundImageUrl;
    }
    /**
         * Returns A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
         * @return {Array.<String>}
         */
  }, {
    key: "getOriginWhitelist",
    value: function getOriginWhitelist() {
      return this.originWhitelist;
    }

    /**
     * Sets A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
     * @param {Array.<String>} originWhitelist A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
     */
  }, {
    key: "setOriginWhitelist",
    value: function setOriginWhitelist(originWhitelist) {
      this['originWhitelist'] = originWhitelist;
    }
    /**
         * Returns Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/PrechatCapture}
         */
  }, {
    key: "getPrechatCapture",
    value: function getPrechatCapture() {
      return this.prechatCapture;
    }

    /**
     * Sets Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/PrechatCapture} prechatCapture Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture.
     */
  }, {
    key: "setPrechatCapture",
    value: function setPrechatCapture(prechatCapture) {
      this['prechatCapture'] = prechatCapture;
    }
    /**
         * Returns Specify a fallback language to use when sending WhatsApp message template using the short hand syntax. Defaults to en_US. See WhatsApp documentation for more info.
         * @return {String}
         */
  }, {
    key: "getHsmFallbackLanguage",
    value: function getHsmFallbackLanguage() {
      return this.hsmFallbackLanguage;
    }

    /**
     * Sets Specify a fallback language to use when sending WhatsApp message template using the short hand syntax. Defaults to en_US. See WhatsApp documentation for more info.
     * @param {String} hsmFallbackLanguage Specify a fallback language to use when sending WhatsApp message template using the short hand syntax. Defaults to en_US. See WhatsApp documentation for more info.
     */
  }, {
    key: "setHsmFallbackLanguage",
    value: function setHsmFallbackLanguage(hsmFallbackLanguage) {
      this['hsmFallbackLanguage'] = hsmFallbackLanguage;
    }
    /**
         * Returns The business ID associated with the WhatsApp account. In combination with accountManagementAccessToken, it’s used for Message Template Reconstruction.
         * @return {String}
         */
  }, {
    key: "getAccountId",
    value: function getAccountId() {
      return this.accountId;
    }

    /**
     * Sets The business ID associated with the WhatsApp account. In combination with accountManagementAccessToken, it’s used for Message Template Reconstruction.
     * @param {String} accountId The business ID associated with the WhatsApp account. In combination with accountManagementAccessToken, it’s used for Message Template Reconstruction.
     */
  }, {
    key: "setAccountId",
    value: function setAccountId(accountId) {
      this['accountId'] = accountId;
    }
    /**
         * Returns An access token associated with the accountId used to query the WhatsApp Account Management API. In combination with accountId, it’s used for Message Template Reconstruction.
         * @return {String}
         */
  }, {
    key: "getAccountManagementAccessToken",
    value: function getAccountManagementAccessToken() {
      return this.accountManagementAccessToken;
    }

    /**
     * Sets An access token associated with the accountId used to query the WhatsApp Account Management API. In combination with accountId, it’s used for Message Template Reconstruction.
     * @param {String} accountManagementAccessToken An access token associated with the accountId used to query the WhatsApp Account Management API. In combination with accountId, it’s used for Message Template Reconstruction.
     */
  }, {
    key: "setAccountManagementAccessToken",
    value: function setAccountManagementAccessToken(accountManagementAccessToken) {
      this['accountManagementAccessToken'] = accountManagementAccessToken;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>IntegrationUpdate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationUpdate} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/IntegrationUpdate} The populated <code>IntegrationUpdate</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new IntegrationUpdate();
        _AndroidUpdate["default"].constructFromObject(data, obj);
        _AppleUpdate["default"].constructFromObject(data, obj);
        _CustomUpdate["default"].constructFromObject(data, obj);
        _InstagramUpdate["default"].constructFromObject(data, obj);
        _IosUpdate["default"].constructFromObject(data, obj);
        _LineUpdate["default"].constructFromObject(data, obj);
        _MailgunUpdate["default"].constructFromObject(data, obj);
        _MessageBirdUpdate["default"].constructFromObject(data, obj);
        _MessengerUpdate["default"].constructFromObject(data, obj);
        _TelegramUpdate["default"].constructFromObject(data, obj);
        _TwilioUpdate["default"].constructFromObject(data, obj);
        _TwitterUpdate["default"].constructFromObject(data, obj);
        _ViberUpdate["default"].constructFromObject(data, obj);
        _WebUpdate["default"].constructFromObject(data, obj);
        _WhatsAppUpdate["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('displayName')) {
          obj['displayName'] = _ApiClient["default"].convertToType(data['displayName'], 'String');
        }
        if (data.hasOwnProperty('serverKey')) {
          obj['serverKey'] = _ApiClient["default"].convertToType(data['serverKey'], 'String');
        }
        if (data.hasOwnProperty('senderId')) {
          obj['senderId'] = _ApiClient["default"].convertToType(data['senderId'], 'String');
        }
        if (data.hasOwnProperty('canUserCreateMoreConversations')) {
          obj['canUserCreateMoreConversations'] = _ApiClient["default"].convertToType(data['canUserCreateMoreConversations'], 'Boolean');
        }
        if (data.hasOwnProperty('pageAccessToken')) {
          obj['pageAccessToken'] = _ApiClient["default"].convertToType(data['pageAccessToken'], 'String');
        }
        if (data.hasOwnProperty('certificate')) {
          obj['certificate'] = _ApiClient["default"].convertToType(data['certificate'], 'String');
        }
        if (data.hasOwnProperty('password')) {
          obj['password'] = _ApiClient["default"].convertToType(data['password'], 'String');
        }
        if (data.hasOwnProperty('production')) {
          obj['production'] = _ApiClient["default"].convertToType(data['production'], 'Boolean');
        }
        if (data.hasOwnProperty('autoUpdateBadge')) {
          obj['autoUpdateBadge'] = _ApiClient["default"].convertToType(data['autoUpdateBadge'], 'Boolean');
        }
        if (data.hasOwnProperty('hideUnsubscribeLink')) {
          obj['hideUnsubscribeLink'] = _ApiClient["default"].convertToType(data['hideUnsubscribeLink'], 'Boolean');
        }
        if (data.hasOwnProperty('fromAddress')) {
          obj['fromAddress'] = _ApiClient["default"].convertToType(data['fromAddress'], 'String');
        }
        if (data.hasOwnProperty('brandColor')) {
          obj['brandColor'] = _ApiClient["default"].convertToType(data['brandColor'], 'String');
        }
        if (data.hasOwnProperty('fixedIntroPane')) {
          obj['fixedIntroPane'] = _ApiClient["default"].convertToType(data['fixedIntroPane'], 'Boolean');
        }
        if (data.hasOwnProperty('conversationColor')) {
          obj['conversationColor'] = _ApiClient["default"].convertToType(data['conversationColor'], 'String');
        }
        if (data.hasOwnProperty('actionColor')) {
          obj['actionColor'] = _ApiClient["default"].convertToType(data['actionColor'], 'String');
        }
        if (data.hasOwnProperty('displayStyle')) {
          obj['displayStyle'] = _ApiClient["default"].convertToType(data['displayStyle'], 'String');
        }
        if (data.hasOwnProperty('buttonIconUrl')) {
          obj['buttonIconUrl'] = _ApiClient["default"].convertToType(data['buttonIconUrl'], 'String');
        }
        if (data.hasOwnProperty('buttonWidth')) {
          obj['buttonWidth'] = _ApiClient["default"].convertToType(data['buttonWidth'], 'String');
        }
        if (data.hasOwnProperty('buttonHeight')) {
          obj['buttonHeight'] = _ApiClient["default"].convertToType(data['buttonHeight'], 'String');
        }
        if (data.hasOwnProperty('integrationOrder')) {
          obj['integrationOrder'] = _ApiClient["default"].convertToType(data['integrationOrder'], ['String']);
        }
        if (data.hasOwnProperty('businessName')) {
          obj['businessName'] = _ApiClient["default"].convertToType(data['businessName'], 'String');
        }
        if (data.hasOwnProperty('businessIconUrl')) {
          obj['businessIconUrl'] = _ApiClient["default"].convertToType(data['businessIconUrl'], 'String');
        }
        if (data.hasOwnProperty('backgroundImageUrl')) {
          obj['backgroundImageUrl'] = _ApiClient["default"].convertToType(data['backgroundImageUrl'], 'String');
        }
        if (data.hasOwnProperty('originWhitelist')) {
          obj['originWhitelist'] = _ApiClient["default"].convertToType(data['originWhitelist'], ['String']);
        }
        if (data.hasOwnProperty('prechatCapture')) {
          obj['prechatCapture'] = _ApiClient["default"].convertToType(data['prechatCapture'], _PrechatCapture["default"]);
        }
        if (data.hasOwnProperty('hsmFallbackLanguage')) {
          obj['hsmFallbackLanguage'] = _ApiClient["default"].convertToType(data['hsmFallbackLanguage'], 'String');
        }
        if (data.hasOwnProperty('accountId')) {
          obj['accountId'] = _ApiClient["default"].convertToType(data['accountId'], 'String');
        }
        if (data.hasOwnProperty('accountManagementAccessToken')) {
          obj['accountManagementAccessToken'] = _ApiClient["default"].convertToType(data['accountManagementAccessToken'], 'String');
        }
      }
      return obj;
    }
  }]);
  return IntegrationUpdate;
}();
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
IntegrationUpdate.prototype['displayName'] = undefined;

/**
 * Your server key from the fcm console.
 * @member {String} serverKey
 */
IntegrationUpdate.prototype['serverKey'] = undefined;

/**
 * Your sender id from the fcm console.
 * @member {String} senderId
 */
IntegrationUpdate.prototype['senderId'] = undefined;

/**
 * Allows users to create more than one conversation on the web messenger integration.
 * @member {Boolean} canUserCreateMoreConversations
 */
IntegrationUpdate.prototype['canUserCreateMoreConversations'] = undefined;

/**
 * A Facebook Page Access Token.
 * @member {String} pageAccessToken
 */
IntegrationUpdate.prototype['pageAccessToken'] = undefined;

/**
 * The binary of your APN certificate base64 encoded.
 * @member {String} certificate
 */
IntegrationUpdate.prototype['certificate'] = undefined;

/**
 * The password for your APN certificate.
 * @member {String} password
 */
IntegrationUpdate.prototype['password'] = undefined;

/**
 * The APN environment to connect to (Production, if true, or Sandbox). Defaults to value inferred from certificate if not specified.
 * @member {Boolean} production
 */
IntegrationUpdate.prototype['production'] = undefined;

/**
 * Use the unread count of the conversation as the application badge.
 * @member {Boolean} autoUpdateBadge
 */
IntegrationUpdate.prototype['autoUpdateBadge'] = undefined;

/**
 * A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
 * @member {Boolean} hideUnsubscribeLink
 */
IntegrationUpdate.prototype['hideUnsubscribeLink'] = undefined;

/**
 * Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
 * @member {String} fromAddress
 */
IntegrationUpdate.prototype['fromAddress'] = undefined;

/**
 * This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color.
 * @member {String} brandColor
 * @default '65758e'
 */
IntegrationUpdate.prototype['brandColor'] = '65758e';

/**
 * When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it.
 * @member {Boolean} fixedIntroPane
 * @default false
 */
IntegrationUpdate.prototype['fixedIntroPane'] = false;

/**
 * This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color.
 * @member {String} conversationColor
 * @default '0099ff'
 */
IntegrationUpdate.prototype['conversationColor'] = '0099ff';

/**
 * This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color.
 * @member {String} actionColor
 * @default '0099ff'
 */
IntegrationUpdate.prototype['actionColor'] = '0099ff';

/**
 * Choose how the messenger will appear on your website. Must be either button or tab.
 * @member {String} displayStyle
 * @default 'button'
 */
IntegrationUpdate.prototype['displayStyle'] = 'button';

/**
 * With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
 * @member {String} buttonIconUrl
 */
IntegrationUpdate.prototype['buttonIconUrl'] = undefined;

/**
 * With the button style Web Messenger, you have the option of specifying the button width.
 * @member {String} buttonWidth
 * @default '58'
 */
IntegrationUpdate.prototype['buttonWidth'] = '58';

/**
 * With the button style Web Messenger, you have the option of specifying the button height.
 * @member {String} buttonHeight
 * @default '58'
 */
IntegrationUpdate.prototype['buttonHeight'] = '58';

/**
 * Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed.
 * @member {Array.<String>} integrationOrder
 */
IntegrationUpdate.prototype['integrationOrder'] = undefined;

/**
 * A custom business name for the Web Messenger.
 * @member {String} businessName
 */
IntegrationUpdate.prototype['businessName'] = undefined;

/**
 * A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
 * @member {String} businessIconUrl
 */
IntegrationUpdate.prototype['businessIconUrl'] = undefined;

/**
 * A background image url for the conversation. Image will be tiled to fit the window.
 * @member {String} backgroundImageUrl
 */
IntegrationUpdate.prototype['backgroundImageUrl'] = undefined;

/**
 * A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
 * @member {Array.<String>} originWhitelist
 */
IntegrationUpdate.prototype['originWhitelist'] = undefined;

/**
 * Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/PrechatCapture} prechatCapture
 */
IntegrationUpdate.prototype['prechatCapture'] = undefined;

/**
 * Specify a fallback language to use when sending WhatsApp message template using the short hand syntax. Defaults to en_US. See WhatsApp documentation for more info.
 * @member {String} hsmFallbackLanguage
 * @default 'en_US'
 */
IntegrationUpdate.prototype['hsmFallbackLanguage'] = 'en_US';

/**
 * The business ID associated with the WhatsApp account. In combination with accountManagementAccessToken, it’s used for Message Template Reconstruction.
 * @member {String} accountId
 */
IntegrationUpdate.prototype['accountId'] = undefined;

/**
 * An access token associated with the accountId used to query the WhatsApp Account Management API. In combination with accountId, it’s used for Message Template Reconstruction.
 * @member {String} accountManagementAccessToken
 */
IntegrationUpdate.prototype['accountManagementAccessToken'] = undefined;

// Implement AndroidUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_AndroidUpdate["default"].prototype['displayName'] = undefined;
/**
 * Your server key from the fcm console.
 * @member {String} serverKey
 */
_AndroidUpdate["default"].prototype['serverKey'] = undefined;
/**
 * Your sender id from the fcm console.
 * @member {String} senderId
 */
_AndroidUpdate["default"].prototype['senderId'] = undefined;
/**
 * Allows users to create more than one conversation on the android integration.
 * @member {Boolean} canUserCreateMoreConversations
 */
_AndroidUpdate["default"].prototype['canUserCreateMoreConversations'] = undefined;
// Implement AppleUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_AppleUpdate["default"].prototype['displayName'] = undefined;
// Implement CustomUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_CustomUpdate["default"].prototype['displayName'] = undefined;
// Implement InstagramUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_InstagramUpdate["default"].prototype['displayName'] = undefined;
/**
 * A Facebook Page Access Token.
 * @member {String} pageAccessToken
 */
_InstagramUpdate["default"].prototype['pageAccessToken'] = undefined;
// Implement IosUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_IosUpdate["default"].prototype['displayName'] = undefined;
/**
 * The binary of your APN certificate base64 encoded.
 * @member {String} certificate
 */
_IosUpdate["default"].prototype['certificate'] = undefined;
/**
 * The password for your APN certificate.
 * @member {String} password
 */
_IosUpdate["default"].prototype['password'] = undefined;
/**
 * The APN environment to connect to (Production, if true, or Sandbox). Defaults to value inferred from certificate if not specified.
 * @member {Boolean} production
 */
_IosUpdate["default"].prototype['production'] = undefined;
/**
 * Use the unread count of the conversation as the application badge.
 * @member {Boolean} autoUpdateBadge
 */
_IosUpdate["default"].prototype['autoUpdateBadge'] = undefined;
/**
 * Allows users to create more than one conversation on the iOS integration.
 * @member {Boolean} canUserCreateMoreConversations
 */
_IosUpdate["default"].prototype['canUserCreateMoreConversations'] = undefined;
// Implement LineUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_LineUpdate["default"].prototype['displayName'] = undefined;
// Implement MailgunUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_MailgunUpdate["default"].prototype['displayName'] = undefined;
/**
 * A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
 * @member {Boolean} hideUnsubscribeLink
 */
_MailgunUpdate["default"].prototype['hideUnsubscribeLink'] = undefined;
/**
 * Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
 * @member {String} fromAddress
 */
_MailgunUpdate["default"].prototype['fromAddress'] = undefined;
// Implement MessageBirdUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_MessageBirdUpdate["default"].prototype['displayName'] = undefined;
// Implement MessengerUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_MessengerUpdate["default"].prototype['displayName'] = undefined;
/**
 * A Facebook Page Access Token.
 * @member {String} pageAccessToken
 */
_MessengerUpdate["default"].prototype['pageAccessToken'] = undefined;
// Implement TelegramUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_TelegramUpdate["default"].prototype['displayName'] = undefined;
// Implement TwilioUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_TwilioUpdate["default"].prototype['displayName'] = undefined;
// Implement TwitterUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_TwitterUpdate["default"].prototype['displayName'] = undefined;
// Implement ViberUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_ViberUpdate["default"].prototype['displayName'] = undefined;
// Implement WebUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_WebUpdate["default"].prototype['displayName'] = undefined;
/**
 * This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color.
 * @member {String} brandColor
 * @default '65758e'
 */
_WebUpdate["default"].prototype['brandColor'] = '65758e';
/**
 * When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it.
 * @member {Boolean} fixedIntroPane
 * @default false
 */
_WebUpdate["default"].prototype['fixedIntroPane'] = false;
/**
 * This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color.
 * @member {String} conversationColor
 * @default '0099ff'
 */
_WebUpdate["default"].prototype['conversationColor'] = '0099ff';
/**
 * This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color.
 * @member {String} actionColor
 * @default '0099ff'
 */
_WebUpdate["default"].prototype['actionColor'] = '0099ff';
/**
 * Choose how the messenger will appear on your website. Must be either button or tab.
 * @member {String} displayStyle
 * @default 'button'
 */
_WebUpdate["default"].prototype['displayStyle'] = 'button';
/**
 * With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
 * @member {String} buttonIconUrl
 */
_WebUpdate["default"].prototype['buttonIconUrl'] = undefined;
/**
 * With the button style Web Messenger, you have the option of specifying the button width.
 * @member {String} buttonWidth
 * @default '58'
 */
_WebUpdate["default"].prototype['buttonWidth'] = '58';
/**
 * With the button style Web Messenger, you have the option of specifying the button height.
 * @member {String} buttonHeight
 * @default '58'
 */
_WebUpdate["default"].prototype['buttonHeight'] = '58';
/**
 * Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed.
 * @member {Array.<String>} integrationOrder
 */
_WebUpdate["default"].prototype['integrationOrder'] = undefined;
/**
 * A custom business name for the Web Messenger.
 * @member {String} businessName
 */
_WebUpdate["default"].prototype['businessName'] = undefined;
/**
 * A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format.
 * @member {String} businessIconUrl
 */
_WebUpdate["default"].prototype['businessIconUrl'] = undefined;
/**
 * A background image url for the conversation. Image will be tiled to fit the window.
 * @member {String} backgroundImageUrl
 */
_WebUpdate["default"].prototype['backgroundImageUrl'] = undefined;
/**
 * A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
 * @member {Array.<String>} originWhitelist
 */
_WebUpdate["default"].prototype['originWhitelist'] = undefined;
/**
 * Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/PrechatCapture} prechatCapture
 */
_WebUpdate["default"].prototype['prechatCapture'] = undefined;
/**
 * Allows users to create more than one conversation on the web messenger integration.
 * @member {Boolean} canUserCreateMoreConversations
 */
_WebUpdate["default"].prototype['canUserCreateMoreConversations'] = undefined;
// Implement WhatsAppUpdate interface:
/**
 * A human-friendly name used to identify the integration. `displayName` can be unset by changing it to `null`.
 * @member {String} displayName
 */
_WhatsAppUpdate["default"].prototype['displayName'] = undefined;
/**
 * Specify a fallback language to use when sending WhatsApp message template using the short hand syntax. Defaults to en_US. See WhatsApp documentation for more info.
 * @member {String} hsmFallbackLanguage
 * @default 'en_US'
 */
_WhatsAppUpdate["default"].prototype['hsmFallbackLanguage'] = 'en_US';
/**
 * The business ID associated with the WhatsApp account. In combination with accountManagementAccessToken, it’s used for Message Template Reconstruction.
 * @member {String} accountId
 */
_WhatsAppUpdate["default"].prototype['accountId'] = undefined;
/**
 * An access token associated with the accountId used to query the WhatsApp Account Management API. In combination with accountId, it’s used for Message Template Reconstruction.
 * @member {String} accountManagementAccessToken
 */
_WhatsAppUpdate["default"].prototype['accountManagementAccessToken'] = undefined;
var _default = IntegrationUpdate;
exports["default"] = _default;