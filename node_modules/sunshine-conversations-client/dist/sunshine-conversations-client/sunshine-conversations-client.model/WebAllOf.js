"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _PrechatCapture = _interopRequireDefault(require("./PrechatCapture"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The WebAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/WebAllOf
 * @version 9.14.0
 */
var WebAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>WebAllOf</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/WebAllOf
   */
  function WebAllOf() {
    _classCallCheck(this, WebAllOf);
    WebAllOf.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(WebAllOf, [{
    key: "getType",
    value:
    /**
         * Returns To configure a Web Messenger integration, acquire the required information and call the Create Integration endpoint. 
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets To configure a Web Messenger integration, acquire the required information and call the Create Integration endpoint. 
     * @param {String} type To configure a Web Messenger integration, acquire the required information and call the Create Integration endpoint. 
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color. 
         * @return {String}
         */
  }, {
    key: "getBrandColor",
    value: function getBrandColor() {
      return this.brandColor;
    }

    /**
     * Sets This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color. 
     * @param {String} brandColor This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color. 
     */
  }, {
    key: "setBrandColor",
    value: function setBrandColor(brandColor) {
      this['brandColor'] = brandColor;
    }
    /**
         * Returns When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it. 
         * @return {Boolean}
         */
  }, {
    key: "getFixedIntroPane",
    value: function getFixedIntroPane() {
      return this.fixedIntroPane;
    }

    /**
     * Sets When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it. 
     * @param {Boolean} fixedIntroPane When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it. 
     */
  }, {
    key: "setFixedIntroPane",
    value: function setFixedIntroPane(fixedIntroPane) {
      this['fixedIntroPane'] = fixedIntroPane;
    }
    /**
         * Returns This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color. 
         * @return {String}
         */
  }, {
    key: "getConversationColor",
    value: function getConversationColor() {
      return this.conversationColor;
    }

    /**
     * Sets This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color. 
     * @param {String} conversationColor This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color. 
     */
  }, {
    key: "setConversationColor",
    value: function setConversationColor(conversationColor) {
      this['conversationColor'] = conversationColor;
    }
    /**
         * Returns This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color. 
         * @return {String}
         */
  }, {
    key: "getActionColor",
    value: function getActionColor() {
      return this.actionColor;
    }

    /**
     * Sets This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color. 
     * @param {String} actionColor This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color. 
     */
  }, {
    key: "setActionColor",
    value: function setActionColor(actionColor) {
      this['actionColor'] = actionColor;
    }
    /**
         * Returns Choose how the messenger will appear on your website. Must be either button or tab. 
         * @return {String}
         */
  }, {
    key: "getDisplayStyle",
    value: function getDisplayStyle() {
      return this.displayStyle;
    }

    /**
     * Sets Choose how the messenger will appear on your website. Must be either button or tab. 
     * @param {String} displayStyle Choose how the messenger will appear on your website. Must be either button or tab. 
     */
  }, {
    key: "setDisplayStyle",
    value: function setDisplayStyle(displayStyle) {
      this['displayStyle'] = displayStyle;
    }
    /**
         * Returns With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format. 
         * @return {String}
         */
  }, {
    key: "getButtonIconUrl",
    value: function getButtonIconUrl() {
      return this.buttonIconUrl;
    }

    /**
     * Sets With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format. 
     * @param {String} buttonIconUrl With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format. 
     */
  }, {
    key: "setButtonIconUrl",
    value: function setButtonIconUrl(buttonIconUrl) {
      this['buttonIconUrl'] = buttonIconUrl;
    }
    /**
         * Returns With the button style Web Messenger, you have the option of specifying the button width. 
         * @return {String}
         */
  }, {
    key: "getButtonWidth",
    value: function getButtonWidth() {
      return this.buttonWidth;
    }

    /**
     * Sets With the button style Web Messenger, you have the option of specifying the button width. 
     * @param {String} buttonWidth With the button style Web Messenger, you have the option of specifying the button width. 
     */
  }, {
    key: "setButtonWidth",
    value: function setButtonWidth(buttonWidth) {
      this['buttonWidth'] = buttonWidth;
    }
    /**
         * Returns With the button style Web Messenger, you have the option of specifying the button height. 
         * @return {String}
         */
  }, {
    key: "getButtonHeight",
    value: function getButtonHeight() {
      return this.buttonHeight;
    }

    /**
     * Sets With the button style Web Messenger, you have the option of specifying the button height. 
     * @param {String} buttonHeight With the button style Web Messenger, you have the option of specifying the button height. 
     */
  }, {
    key: "setButtonHeight",
    value: function setButtonHeight(buttonHeight) {
      this['buttonHeight'] = buttonHeight;
    }
    /**
         * Returns Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed. 
         * @return {Array.<String>}
         */
  }, {
    key: "getIntegrationOrder",
    value: function getIntegrationOrder() {
      return this.integrationOrder;
    }

    /**
     * Sets Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed. 
     * @param {Array.<String>} integrationOrder Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed. 
     */
  }, {
    key: "setIntegrationOrder",
    value: function setIntegrationOrder(integrationOrder) {
      this['integrationOrder'] = integrationOrder;
    }
    /**
         * Returns A custom business name for the Web Messenger.
         * @return {String}
         */
  }, {
    key: "getBusinessName",
    value: function getBusinessName() {
      return this.businessName;
    }

    /**
     * Sets A custom business name for the Web Messenger.
     * @param {String} businessName A custom business name for the Web Messenger.
     */
  }, {
    key: "setBusinessName",
    value: function setBusinessName(businessName) {
      this['businessName'] = businessName;
    }
    /**
         * Returns A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format. 
         * @return {String}
         */
  }, {
    key: "getBusinessIconUrl",
    value: function getBusinessIconUrl() {
      return this.businessIconUrl;
    }

    /**
     * Sets A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format. 
     * @param {String} businessIconUrl A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format. 
     */
  }, {
    key: "setBusinessIconUrl",
    value: function setBusinessIconUrl(businessIconUrl) {
      this['businessIconUrl'] = businessIconUrl;
    }
    /**
         * Returns A background image url for the conversation. Image will be tiled to fit the window. 
         * @return {String}
         */
  }, {
    key: "getBackgroundImageUrl",
    value: function getBackgroundImageUrl() {
      return this.backgroundImageUrl;
    }

    /**
     * Sets A background image url for the conversation. Image will be tiled to fit the window. 
     * @param {String} backgroundImageUrl A background image url for the conversation. Image will be tiled to fit the window. 
     */
  }, {
    key: "setBackgroundImageUrl",
    value: function setBackgroundImageUrl(backgroundImageUrl) {
      this['backgroundImageUrl'] = backgroundImageUrl;
    }
    /**
         * Returns A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
         * @return {Array.<String>}
         */
  }, {
    key: "getOriginWhitelist",
    value: function getOriginWhitelist() {
      return this.originWhitelist;
    }

    /**
     * Sets A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
     * @param {Array.<String>} originWhitelist A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
     */
  }, {
    key: "setOriginWhitelist",
    value: function setOriginWhitelist(originWhitelist) {
      this['originWhitelist'] = originWhitelist;
    }
    /**
         * Returns Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture. 
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/PrechatCapture}
         */
  }, {
    key: "getPrechatCapture",
    value: function getPrechatCapture() {
      return this.prechatCapture;
    }

    /**
     * Sets Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture. 
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/PrechatCapture} prechatCapture Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture. 
     */
  }, {
    key: "setPrechatCapture",
    value: function setPrechatCapture(prechatCapture) {
      this['prechatCapture'] = prechatCapture;
    }
    /**
         * Returns Allows users to view their list of conversations. By default, the list of conversations will be visible. *This setting only applies to apps where `settings.multiConvoEnabled` is set to `true`*. 
         * @return {Boolean}
         */
  }, {
    key: "getCanUserSeeConversationList",
    value: function getCanUserSeeConversationList() {
      return this.canUserSeeConversationList;
    }

    /**
     * Sets Allows users to view their list of conversations. By default, the list of conversations will be visible. *This setting only applies to apps where `settings.multiConvoEnabled` is set to `true`*. 
     * @param {Boolean} canUserSeeConversationList Allows users to view their list of conversations. By default, the list of conversations will be visible. *This setting only applies to apps where `settings.multiConvoEnabled` is set to `true`*. 
     */
  }, {
    key: "setCanUserSeeConversationList",
    value: function setCanUserSeeConversationList(canUserSeeConversationList) {
      this['canUserSeeConversationList'] = canUserSeeConversationList;
    }
    /**
         * Returns Allows users to create more than one conversation on the web messenger integration. 
         * @return {Boolean}
         */
  }, {
    key: "getCanUserCreateMoreConversations",
    value: function getCanUserCreateMoreConversations() {
      return this.canUserCreateMoreConversations;
    }

    /**
     * Sets Allows users to create more than one conversation on the web messenger integration. 
     * @param {Boolean} canUserCreateMoreConversations Allows users to create more than one conversation on the web messenger integration. 
     */
  }, {
    key: "setCanUserCreateMoreConversations",
    value: function setCanUserCreateMoreConversations(canUserCreateMoreConversations) {
      this['canUserCreateMoreConversations'] = canUserCreateMoreConversations;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>WebAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/WebAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/WebAllOf} The populated <code>WebAllOf</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new WebAllOf();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('brandColor')) {
          obj['brandColor'] = _ApiClient["default"].convertToType(data['brandColor'], 'String');
        }
        if (data.hasOwnProperty('fixedIntroPane')) {
          obj['fixedIntroPane'] = _ApiClient["default"].convertToType(data['fixedIntroPane'], 'Boolean');
        }
        if (data.hasOwnProperty('conversationColor')) {
          obj['conversationColor'] = _ApiClient["default"].convertToType(data['conversationColor'], 'String');
        }
        if (data.hasOwnProperty('actionColor')) {
          obj['actionColor'] = _ApiClient["default"].convertToType(data['actionColor'], 'String');
        }
        if (data.hasOwnProperty('displayStyle')) {
          obj['displayStyle'] = _ApiClient["default"].convertToType(data['displayStyle'], 'String');
        }
        if (data.hasOwnProperty('buttonIconUrl')) {
          obj['buttonIconUrl'] = _ApiClient["default"].convertToType(data['buttonIconUrl'], 'String');
        }
        if (data.hasOwnProperty('buttonWidth')) {
          obj['buttonWidth'] = _ApiClient["default"].convertToType(data['buttonWidth'], 'String');
        }
        if (data.hasOwnProperty('buttonHeight')) {
          obj['buttonHeight'] = _ApiClient["default"].convertToType(data['buttonHeight'], 'String');
        }
        if (data.hasOwnProperty('integrationOrder')) {
          obj['integrationOrder'] = _ApiClient["default"].convertToType(data['integrationOrder'], ['String']);
        }
        if (data.hasOwnProperty('businessName')) {
          obj['businessName'] = _ApiClient["default"].convertToType(data['businessName'], 'String');
        }
        if (data.hasOwnProperty('businessIconUrl')) {
          obj['businessIconUrl'] = _ApiClient["default"].convertToType(data['businessIconUrl'], 'String');
        }
        if (data.hasOwnProperty('backgroundImageUrl')) {
          obj['backgroundImageUrl'] = _ApiClient["default"].convertToType(data['backgroundImageUrl'], 'String');
        }
        if (data.hasOwnProperty('originWhitelist')) {
          obj['originWhitelist'] = _ApiClient["default"].convertToType(data['originWhitelist'], ['String']);
        }
        if (data.hasOwnProperty('prechatCapture')) {
          obj['prechatCapture'] = _ApiClient["default"].convertToType(data['prechatCapture'], _PrechatCapture["default"]);
        }
        if (data.hasOwnProperty('canUserSeeConversationList')) {
          obj['canUserSeeConversationList'] = _ApiClient["default"].convertToType(data['canUserSeeConversationList'], 'Boolean');
        }
        if (data.hasOwnProperty('canUserCreateMoreConversations')) {
          obj['canUserCreateMoreConversations'] = _ApiClient["default"].convertToType(data['canUserCreateMoreConversations'], 'Boolean');
        }
      }
      return obj;
    }
  }]);
  return WebAllOf;
}();
/**
 * To configure a Web Messenger integration, acquire the required information and call the Create Integration endpoint. 
 * @member {String} type
 * @default 'web'
 */
WebAllOf.prototype['type'] = 'web';

/**
 * This color will be used in the messenger header and the button or tab in idle state. Must be a 3 or 6-character hexadecimal color. 
 * @member {String} brandColor
 * @default '65758e'
 */
WebAllOf.prototype['brandColor'] = '65758e';

/**
 * When true, the introduction pane will be pinned at the top of the conversation instead of scrolling with it. 
 * @member {Boolean} fixedIntroPane
 * @default false
 */
WebAllOf.prototype['fixedIntroPane'] = false;

/**
 * This color will be used for customer messages, quick replies and actions in the footer. Must be a 3 or 6-character hexadecimal color. 
 * @member {String} conversationColor
 * @default '0099ff'
 */
WebAllOf.prototype['conversationColor'] = '0099ff';

/**
 * This color will be used for call-to-actions inside your messages. Must be a 3 or 6-character hexadecimal color. 
 * @member {String} actionColor
 * @default '0099ff'
 */
WebAllOf.prototype['actionColor'] = '0099ff';

/**
 * Choose how the messenger will appear on your website. Must be either button or tab. 
 * @member {String} displayStyle
 * @default 'button'
 */
WebAllOf.prototype['displayStyle'] = 'button';

/**
 * With the button style Web Messenger, you have the option of selecting your own button icon. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format. 
 * @member {String} buttonIconUrl
 */
WebAllOf.prototype['buttonIconUrl'] = undefined;

/**
 * With the button style Web Messenger, you have the option of specifying the button width. 
 * @member {String} buttonWidth
 * @default '58'
 */
WebAllOf.prototype['buttonWidth'] = '58';

/**
 * With the button style Web Messenger, you have the option of specifying the button height. 
 * @member {String} buttonHeight
 * @default '58'
 */
WebAllOf.prototype['buttonHeight'] = '58';

/**
 * Array of integration IDs, order will be reflected in the Web Messenger. When set, only integrations from this list will be displayed in the Web Messenger. If unset, all integrations will be displayed. 
 * @member {Array.<String>} integrationOrder
 */
WebAllOf.prototype['integrationOrder'] = undefined;

/**
 * A custom business name for the Web Messenger.
 * @member {String} businessName
 */
WebAllOf.prototype['businessName'] = undefined;

/**
 * A custom business icon url for the Web Messenger. The image must be at least 200 x 200 pixels and must be in either JPG, PNG, or GIF format. 
 * @member {String} businessIconUrl
 */
WebAllOf.prototype['businessIconUrl'] = undefined;

/**
 * A background image url for the conversation. Image will be tiled to fit the window. 
 * @member {String} backgroundImageUrl
 */
WebAllOf.prototype['backgroundImageUrl'] = undefined;

/**
 * A list of origins to whitelist. When set, only the origins from this list will be able to initialize the Web Messenger. If unset, all origins are whitelisted. The elements in the list should follow the serialized-origin format from RFC 6454: scheme \"://\" host [ \":\" port ], where scheme is http or https. 
 * @member {Array.<String>} originWhitelist
 */
WebAllOf.prototype['originWhitelist'] = undefined;

/**
 * Object whose properties can be set to specify the add-on’s options. See the [guide](https://docs.smooch.io/guide/web-messenger/#prechat-capture) to learn more about Prechat Capture. 
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/PrechatCapture} prechatCapture
 */
WebAllOf.prototype['prechatCapture'] = undefined;

/**
 * Allows users to view their list of conversations. By default, the list of conversations will be visible. *This setting only applies to apps where `settings.multiConvoEnabled` is set to `true`*. 
 * @member {Boolean} canUserSeeConversationList
 */
WebAllOf.prototype['canUserSeeConversationList'] = undefined;

/**
 * Allows users to create more than one conversation on the web messenger integration. 
 * @member {Boolean} canUserCreateMoreConversations
 */
WebAllOf.prototype['canUserCreateMoreConversations'] = undefined;
var _default = WebAllOf;
exports["default"] = _default;