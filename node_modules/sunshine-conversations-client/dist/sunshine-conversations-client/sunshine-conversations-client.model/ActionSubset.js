"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Buy = _interopRequireDefault(require("./Buy"));
var _ExtraChannelOptions = _interopRequireDefault(require("./ExtraChannelOptions"));
var _Link = _interopRequireDefault(require("./Link"));
var _Postback = _interopRequireDefault(require("./Postback"));
var _Webview = _interopRequireDefault(require("./Webview"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The ActionSubset model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset
 * @version 9.14.0
 */
var ActionSubset = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ActionSubset</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/Buy
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/Link
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/Postback
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/Webview
   * @param type {String} The type of action.
   * @param text {String} The button text.
   * @param amount {Number} The amount being charged. It needs to be specified in cents and is an integer (9.99$ -> 999).
   * @param uri {String} The webview URI. This is the URI that will open in the webview when clicking the button.
   * @param payload {String} The payload of a postback or reply button.
   * @param fallback {String} The fallback uri for channels that donâ€™t support webviews. Used for actions of type webview.
   */
  function ActionSubset(type, text, amount, uri, payload, fallback) {
    _classCallCheck(this, ActionSubset);
    _Buy["default"].initialize(this, type, text, amount);
    _Link["default"].initialize(this, type, uri, text);
    _Postback["default"].initialize(this, type, text, payload);
    _Webview["default"].initialize(this, type, uri, text, fallback);
    ActionSubset.initialize(this, type, text, amount, uri, payload, fallback);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(ActionSubset, [{
    key: "getType",
    value:
    /**
         * Returns The type of action.
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The type of action.
     * @param {String} type The type of action.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns The button text.
         * @return {String}
         */
  }, {
    key: "getText",
    value: function getText() {
      return this.text;
    }

    /**
     * Sets The button text.
     * @param {String} text The button text.
     */
  }, {
    key: "setText",
    value: function setText(text) {
      this['text'] = text;
    }
    /**
         * Returns The amount being charged. It needs to be specified in cents and is an integer (9.99$ -> 999).
         * @return {Number}
         */
  }, {
    key: "getAmount",
    value: function getAmount() {
      return this.amount;
    }

    /**
     * Sets The amount being charged. It needs to be specified in cents and is an integer (9.99$ -> 999).
     * @param {Number} amount The amount being charged. It needs to be specified in cents and is an integer (9.99$ -> 999).
     */
  }, {
    key: "setAmount",
    value: function setAmount(amount) {
      this['amount'] = amount;
    }
    /**
         * Returns An ISO 4217 standard currency code in lowercase. Used for actions of type buy.
         * @return {String}
         */
  }, {
    key: "getCurrency",
    value: function getCurrency() {
      return this.currency;
    }

    /**
     * Sets An ISO 4217 standard currency code in lowercase. Used for actions of type buy.
     * @param {String} currency An ISO 4217 standard currency code in lowercase. Used for actions of type buy.
     */
  }, {
    key: "setCurrency",
    value: function setCurrency(currency) {
      this['currency'] = currency;
    }
    /**
         * Returns Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
         * @return {Object}
         */
  }, {
    key: "getMetadata",
    value: function getMetadata() {
      return this.metadata;
    }

    /**
     * Sets Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
     * @param {Object} metadata Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
     */
  }, {
    key: "setMetadata",
    value: function setMetadata(metadata) {
      this['metadata'] = metadata;
    }
    /**
         * Returns The webview URI. This is the URI that will open in the webview when clicking the button.
         * @return {String}
         */
  }, {
    key: "getUri",
    value: function getUri() {
      return this.uri;
    }

    /**
     * Sets The webview URI. This is the URI that will open in the webview when clicking the button.
     * @param {String} uri The webview URI. This is the URI that will open in the webview when clicking the button.
     */
  }, {
    key: "setUri",
    value: function setUri(uri) {
      this['uri'] = uri;
    }
    /**
         * Returns Boolean value indicating whether the action is the default action for a message item in Facebook Messenger.
         * @return {Boolean}
         */
  }, {
    key: "getDefault",
    value: function getDefault() {
      return this["default"];
    }

    /**
     * Sets Boolean value indicating whether the action is the default action for a message item in Facebook Messenger.
     * @param {Boolean} _default Boolean value indicating whether the action is the default action for a message item in Facebook Messenger.
     */
  }, {
    key: "setDefault",
    value: function setDefault(_default) {
      this['default'] = _default;
    }
    /**
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ExtraChannelOptions}
         */
  }, {
    key: "getExtraChannelOptions",
    value: function getExtraChannelOptions() {
      return this.extraChannelOptions;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ExtraChannelOptions} extraChannelOptions
     */
  }, {
    key: "setExtraChannelOptions",
    value: function setExtraChannelOptions(extraChannelOptions) {
      this['extraChannelOptions'] = extraChannelOptions;
    }
    /**
         * Returns The payload of a postback or reply button.
         * @return {String}
         */
  }, {
    key: "getPayload",
    value: function getPayload() {
      return this.payload;
    }

    /**
     * Sets The payload of a postback or reply button.
     * @param {String} payload The payload of a postback or reply button.
     */
  }, {
    key: "setPayload",
    value: function setPayload(payload) {
      this['payload'] = payload;
    }
    /**
         * Returns The size to display a webview. Used for actions of type webview.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset.SizeEnum}
         */
  }, {
    key: "getSize",
    value: function getSize() {
      return this.size;
    }

    /**
     * Sets The size to display a webview. Used for actions of type webview.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset.SizeEnum} size The size to display a webview. Used for actions of type webview.
     */
  }, {
    key: "setSize",
    value: function setSize(size) {
      this['size'] = size;
    }
    /**
         * Returns The fallback uri for channels that donâ€™t support webviews. Used for actions of type webview.
         * @return {String}
         */
  }, {
    key: "getFallback",
    value: function getFallback() {
      return this.fallback;
    }

    /**
     * Sets The fallback uri for channels that donâ€™t support webviews. Used for actions of type webview.
     * @param {String} fallback The fallback uri for channels that donâ€™t support webviews. Used for actions of type webview.
     */
  }, {
    key: "setFallback",
    value: function setFallback(fallback) {
      this['fallback'] = fallback;
    }
    /**
         * Returns Boolean value indicating if the webview should open automatically. Only one action per message can be set to true. Currently only supported on the Web Messenger.
         * @return {Boolean}
         */
  }, {
    key: "getOpenOnReceive",
    value: function getOpenOnReceive() {
      return this.openOnReceive;
    }

    /**
     * Sets Boolean value indicating if the webview should open automatically. Only one action per message can be set to true. Currently only supported on the Web Messenger.
     * @param {Boolean} openOnReceive Boolean value indicating if the webview should open automatically. Only one action per message can be set to true. Currently only supported on the Web Messenger.
     */
  }, {
    key: "setOpenOnReceive",
    value: function setOpenOnReceive(openOnReceive) {
      this['openOnReceive'] = openOnReceive;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type, text, amount, uri, payload, fallback) {
      obj['type'] = type;
      obj['text'] = text;
      obj['amount'] = amount;
      obj['uri'] = uri;
      obj['payload'] = payload;
      obj['fallback'] = fallback;
    }

    /**
     * Constructs a <code>ActionSubset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset} The populated <code>ActionSubset</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ActionSubset();
        _Buy["default"].constructFromObject(data, obj);
        _Link["default"].constructFromObject(data, obj);
        _Postback["default"].constructFromObject(data, obj);
        _Webview["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('text')) {
          obj['text'] = _ApiClient["default"].convertToType(data['text'], 'String');
        }
        if (data.hasOwnProperty('amount')) {
          obj['amount'] = _ApiClient["default"].convertToType(data['amount'], 'Number');
        }
        if (data.hasOwnProperty('currency')) {
          obj['currency'] = _ApiClient["default"].convertToType(data['currency'], 'String');
        }
        if (data.hasOwnProperty('metadata')) {
          obj['metadata'] = _ApiClient["default"].convertToType(data['metadata'], Object);
        }
        if (data.hasOwnProperty('uri')) {
          obj['uri'] = _ApiClient["default"].convertToType(data['uri'], 'String');
        }
        if (data.hasOwnProperty('default')) {
          obj['default'] = _ApiClient["default"].convertToType(data['default'], 'Boolean');
        }
        if (data.hasOwnProperty('extraChannelOptions')) {
          obj['extraChannelOptions'] = _ExtraChannelOptions["default"].constructFromObject(data['extraChannelOptions']);
        }
        if (data.hasOwnProperty('payload')) {
          obj['payload'] = _ApiClient["default"].convertToType(data['payload'], 'String');
        }
        if (data.hasOwnProperty('size')) {
          obj['size'] = _ApiClient["default"].convertToType(data['size'], 'String');
        }
        if (data.hasOwnProperty('fallback')) {
          obj['fallback'] = _ApiClient["default"].convertToType(data['fallback'], 'String');
        }
        if (data.hasOwnProperty('openOnReceive')) {
          obj['openOnReceive'] = _ApiClient["default"].convertToType(data['openOnReceive'], 'Boolean');
        }
      }
      return obj;
    }
  }]);
  return ActionSubset;
}();
/**
 * The type of action.
 * @member {String} type
 */
ActionSubset.prototype['type'] = undefined;

/**
 * The button text.
 * @member {String} text
 */
ActionSubset.prototype['text'] = undefined;

/**
 * The amount being charged. It needs to be specified in cents and is an integer (9.99$ -> 999).
 * @member {Number} amount
 */
ActionSubset.prototype['amount'] = undefined;

/**
 * An ISO 4217 standard currency code in lowercase. Used for actions of type buy.
 * @member {String} currency
 */
ActionSubset.prototype['currency'] = undefined;

/**
 * Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
 * @member {Object} metadata
 */
ActionSubset.prototype['metadata'] = undefined;

/**
 * The webview URI. This is the URI that will open in the webview when clicking the button.
 * @member {String} uri
 */
ActionSubset.prototype['uri'] = undefined;

/**
 * Boolean value indicating whether the action is the default action for a message item in Facebook Messenger.
 * @member {Boolean} default
 */
ActionSubset.prototype['default'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/ExtraChannelOptions} extraChannelOptions
 */
ActionSubset.prototype['extraChannelOptions'] = undefined;

/**
 * The payload of a postback or reply button.
 * @member {String} payload
 */
ActionSubset.prototype['payload'] = undefined;

/**
 * The size to display a webview. Used for actions of type webview.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/ActionSubset.SizeEnum} size
 */
ActionSubset.prototype['size'] = undefined;

/**
 * The fallback uri for channels that donâ€™t support webviews. Used for actions of type webview.
 * @member {String} fallback
 */
ActionSubset.prototype['fallback'] = undefined;

/**
 * Boolean value indicating if the webview should open automatically. Only one action per message can be set to true. Currently only supported on the Web Messenger.
 * @member {Boolean} openOnReceive
 */
ActionSubset.prototype['openOnReceive'] = undefined;

// Implement Buy interface:
/**
 * The type of action.
 * @member {String} type
 * @default 'buy'
 */
_Buy["default"].prototype['type'] = 'buy';
/**
 * The button text.
 * @member {String} text
 */
_Buy["default"].prototype['text'] = undefined;
/**
 * The amount being charged. It needs to be specified in cents and is an integer (9.99$ -> 999).
 * @member {Number} amount
 */
_Buy["default"].prototype['amount'] = undefined;
/**
 * An ISO 4217 standard currency code in lowercase. Used for actions of type buy.
 * @member {String} currency
 */
_Buy["default"].prototype['currency'] = undefined;
/**
 * Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
 * @member {Object} metadata
 */
_Buy["default"].prototype['metadata'] = undefined;
// Implement Link interface:
/**
 * The type of action.
 * @member {String} type
 * @default 'link'
 */
_Link["default"].prototype['type'] = 'link';
/**
 * The action URI. This is the link that will be used in the clients when clicking the button.
 * @member {String} uri
 */
_Link["default"].prototype['uri'] = undefined;
/**
 * The button text.
 * @member {String} text
 */
_Link["default"].prototype['text'] = undefined;
/**
 * Boolean value indicating whether the action is the default action for a message item in Facebook Messenger.
 * @member {Boolean} default
 */
_Link["default"].prototype['default'] = undefined;
/**
 * Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
 * @member {Object} metadata
 */
_Link["default"].prototype['metadata'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/ExtraChannelOptions} extraChannelOptions
 */
_Link["default"].prototype['extraChannelOptions'] = undefined;
// Implement Postback interface:
/**
 * The type of action.
 * @member {String} type
 * @default 'postback'
 */
_Postback["default"].prototype['type'] = 'postback';
/**
 * The button text.
 * @member {String} text
 */
_Postback["default"].prototype['text'] = undefined;
/**
 * The payload of a postback or reply button.
 * @member {String} payload
 */
_Postback["default"].prototype['payload'] = undefined;
/**
 * Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
 * @member {Object} metadata
 */
_Postback["default"].prototype['metadata'] = undefined;
// Implement Webview interface:
/**
 * The type of action.
 * @member {String} type
 */
_Webview["default"].prototype['type'] = undefined;
/**
 * The webview URI. This is the URI that will open in the webview when clicking the button.
 * @member {String} uri
 */
_Webview["default"].prototype['uri'] = undefined;
/**
 * The button text.
 * @member {String} text
 */
_Webview["default"].prototype['text'] = undefined;
/**
 * Boolean value indicating whether the action is the default action for a message item in Facebook Messenger.
 * @member {Boolean} default
 */
_Webview["default"].prototype['default'] = undefined;
/**
 * Flat object containing custom properties. Strings, numbers and booleans  are the only supported format that can be passed to metadata. The metadata is limited to 4KB in size. 
 * @member {Object} metadata
 */
_Webview["default"].prototype['metadata'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/ExtraChannelOptions} extraChannelOptions
 */
_Webview["default"].prototype['extraChannelOptions'] = undefined;
/**
 * The size to display a webview. Used for actions of type webview.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Webview.SizeEnum} size
 */
_Webview["default"].prototype['size'] = undefined;
/**
 * The fallback uri for channels that donâ€™t support webviews. Used for actions of type webview.
 * @member {String} fallback
 */
_Webview["default"].prototype['fallback'] = undefined;
/**
 * Boolean value indicating if the webview should open automatically. Only one action per message can be set to true. Currently only supported on the Web Messenger.
 * @member {Boolean} openOnReceive
 */
_Webview["default"].prototype['openOnReceive'] = undefined;

/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
ActionSubset['SizeEnum'] = {
  /**
   * value: "compact"
   * @const
   */
  "compact": "compact",
  /**
   * value: "tall"
   * @const
   */
  "tall": "tall",
  /**
   * value: "full"
   * @const
   */
  "full": "full"
};
var _default2 = ActionSubset;
exports["default"] = _default2;