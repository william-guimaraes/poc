"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The MailgunAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/MailgunAllOf
 * @version 9.14.0
 */
var MailgunAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>MailgunAllOf</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/MailgunAllOf
   * @param apiKey {String} The public API key of your Mailgun account.
   * @param domain {String} The domain used to relay email. This domain must be configured and verified in your Mailgun account.
   * @param incomingAddress {String} Sunshine Conversations will receive all emails sent to this address. It will also be used as the Reply-To address.
   */
  function MailgunAllOf(apiKey, domain, incomingAddress) {
    _classCallCheck(this, MailgunAllOf);
    MailgunAllOf.initialize(this, apiKey, domain, incomingAddress);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(MailgunAllOf, [{
    key: "getType",
    value:
    /**
         * Returns To configure a Mailgun integration, visit the API Keys tab in the settings page of the Mailgun dashboard and copy your active API key. Call the Create Integration endpoint with your API Key, a domain you have configured in Mailgun, and the incoming address you would like to use. Must have the same domain as the one specified in the domain parameter. 
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets To configure a Mailgun integration, visit the API Keys tab in the settings page of the Mailgun dashboard and copy your active API key. Call the Create Integration endpoint with your API Key, a domain you have configured in Mailgun, and the incoming address you would like to use. Must have the same domain as the one specified in the domain parameter. 
     * @param {String} type To configure a Mailgun integration, visit the API Keys tab in the settings page of the Mailgun dashboard and copy your active API key. Call the Create Integration endpoint with your API Key, a domain you have configured in Mailgun, and the incoming address you would like to use. Must have the same domain as the one specified in the domain parameter. 
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns The public API key of your Mailgun account.
         * @return {String}
         */
  }, {
    key: "getApiKey",
    value: function getApiKey() {
      return this.apiKey;
    }

    /**
     * Sets The public API key of your Mailgun account.
     * @param {String} apiKey The public API key of your Mailgun account.
     */
  }, {
    key: "setApiKey",
    value: function setApiKey(apiKey) {
      this['apiKey'] = apiKey;
    }
    /**
         * Returns The domain used to relay email. This domain must be configured and verified in your Mailgun account.
         * @return {String}
         */
  }, {
    key: "getDomain",
    value: function getDomain() {
      return this.domain;
    }

    /**
     * Sets The domain used to relay email. This domain must be configured and verified in your Mailgun account.
     * @param {String} domain The domain used to relay email. This domain must be configured and verified in your Mailgun account.
     */
  }, {
    key: "setDomain",
    value: function setDomain(domain) {
      this['domain'] = domain;
    }
    /**
         * Returns Sunshine Conversations will receive all emails sent to this address. It will also be used as the Reply-To address.
         * @return {String}
         */
  }, {
    key: "getIncomingAddress",
    value: function getIncomingAddress() {
      return this.incomingAddress;
    }

    /**
     * Sets Sunshine Conversations will receive all emails sent to this address. It will also be used as the Reply-To address.
     * @param {String} incomingAddress Sunshine Conversations will receive all emails sent to this address. It will also be used as the Reply-To address.
     */
  }, {
    key: "setIncomingAddress",
    value: function setIncomingAddress(incomingAddress) {
      this['incomingAddress'] = incomingAddress;
    }
    /**
         * Returns A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
         * @return {Boolean}
         */
  }, {
    key: "getHideUnsubscribeLink",
    value: function getHideUnsubscribeLink() {
      return this.hideUnsubscribeLink;
    }

    /**
     * Sets A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
     * @param {Boolean} hideUnsubscribeLink A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
     */
  }, {
    key: "setHideUnsubscribeLink",
    value: function setHideUnsubscribeLink(hideUnsubscribeLink) {
      this['hideUnsubscribeLink'] = hideUnsubscribeLink;
    }
    /**
         * Returns Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
         * @return {String}
         */
  }, {
    key: "getFromAddress",
    value: function getFromAddress() {
      return this.fromAddress;
    }

    /**
     * Sets Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
     * @param {String} fromAddress Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
     */
  }, {
    key: "setFromAddress",
    value: function setFromAddress(fromAddress) {
      this['fromAddress'] = fromAddress;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, apiKey, domain, incomingAddress) {
      obj['apiKey'] = apiKey;
      obj['domain'] = domain;
      obj['incomingAddress'] = incomingAddress;
    }

    /**
     * Constructs a <code>MailgunAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/MailgunAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/MailgunAllOf} The populated <code>MailgunAllOf</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new MailgunAllOf();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('apiKey')) {
          obj['apiKey'] = _ApiClient["default"].convertToType(data['apiKey'], 'String');
        }
        if (data.hasOwnProperty('domain')) {
          obj['domain'] = _ApiClient["default"].convertToType(data['domain'], 'String');
        }
        if (data.hasOwnProperty('incomingAddress')) {
          obj['incomingAddress'] = _ApiClient["default"].convertToType(data['incomingAddress'], 'String');
        }
        if (data.hasOwnProperty('hideUnsubscribeLink')) {
          obj['hideUnsubscribeLink'] = _ApiClient["default"].convertToType(data['hideUnsubscribeLink'], 'Boolean');
        }
        if (data.hasOwnProperty('fromAddress')) {
          obj['fromAddress'] = _ApiClient["default"].convertToType(data['fromAddress'], 'String');
        }
      }
      return obj;
    }
  }]);
  return MailgunAllOf;
}();
/**
 * To configure a Mailgun integration, visit the API Keys tab in the settings page of the Mailgun dashboard and copy your active API key. Call the Create Integration endpoint with your API Key, a domain you have configured in Mailgun, and the incoming address you would like to use. Must have the same domain as the one specified in the domain parameter. 
 * @member {String} type
 * @default 'mailgun'
 */
MailgunAllOf.prototype['type'] = 'mailgun';

/**
 * The public API key of your Mailgun account.
 * @member {String} apiKey
 */
MailgunAllOf.prototype['apiKey'] = undefined;

/**
 * The domain used to relay email. This domain must be configured and verified in your Mailgun account.
 * @member {String} domain
 */
MailgunAllOf.prototype['domain'] = undefined;

/**
 * Sunshine Conversations will receive all emails sent to this address. It will also be used as the Reply-To address.
 * @member {String} incomingAddress
 */
MailgunAllOf.prototype['incomingAddress'] = undefined;

/**
 * A boolean value indicating whether the unsubscribe link should be omitted from outgoing emails. When enabled, it is expected that the business is providing the user a way to unsubscribe by some other means. By default, the unsubscribe link will be included in all outgoing emails.
 * @member {Boolean} hideUnsubscribeLink
 */
MailgunAllOf.prototype['hideUnsubscribeLink'] = undefined;

/**
 * Email address to use as the From and Reply-To address if it must be different from incomingAddress. Only use this option if the address that you supply is configured to forward emails to the incomingAddress, otherwise user replies will be lost. You must also make sure that the domain is properly configured as a mail provider so as to not be flagged as spam by the user’s email client. May be unset with null.
 * @member {String} fromAddress
 */
MailgunAllOf.prototype['fromAddress'] = undefined;
var _default = MailgunAllOf;
exports["default"] = _default;