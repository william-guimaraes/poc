"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Integration = _interopRequireDefault(require("./Integration"));
var _MessengerAllOf = _interopRequireDefault(require("./MessengerAllOf"));
var _Status = _interopRequireDefault(require("./Status"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The Messenger model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Messenger
 * @version 9.14.0
 */
var Messenger = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Messenger</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Messenger
   * @extends module:sunshine-conversations-client/sunshine-conversations-client.model/Integration
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/Integration
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/MessengerAllOf
   * @param type {String} Facebook Messenger Setup steps: - Take note of your Facebook app ID and secret (apps can be created at developer.facebook.com); - The Facebook app must have been submitted to Meta for app review with the “pages_manage_metadata” (to retrieve Page Access Tokens for the Pages, apps that the app user administers and set a webhook) and “pages_messaging” (to send messages) permissions. - In order to integrate a Facebook Messenger app you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token. 
   * @param pageAccessToken {String} A Facebook Page Access Token.
   * @param appId {String} A Facebook App ID.
   * @param appSecret {String} A Facebook App Secret.
   */
  function Messenger(type, pageAccessToken, appId, appSecret) {
    _classCallCheck(this, Messenger);
    _Integration["default"].initialize(this, type);
    _MessengerAllOf["default"].initialize(this, pageAccessToken, appId, appSecret);
    Messenger.initialize(this, type, pageAccessToken, appId, appSecret);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(Messenger, [{
    key: "getType",
    value:
    /**
         * Returns Facebook Messenger Setup steps: - Take note of your Facebook app ID and secret (apps can be created at developer.facebook.com); - The Facebook app must have been submitted to Meta for app review with the “pages_manage_metadata” (to retrieve Page Access Tokens for the Pages, apps that the app user administers and set a webhook) and “pages_messaging” (to send messages) permissions. - In order to integrate a Facebook Messenger app you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token. 
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets Facebook Messenger Setup steps: - Take note of your Facebook app ID and secret (apps can be created at developer.facebook.com); - The Facebook app must have been submitted to Meta for app review with the “pages_manage_metadata” (to retrieve Page Access Tokens for the Pages, apps that the app user administers and set a webhook) and “pages_messaging” (to send messages) permissions. - In order to integrate a Facebook Messenger app you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token. 
     * @param {String} type Facebook Messenger Setup steps: - Take note of your Facebook app ID and secret (apps can be created at developer.facebook.com); - The Facebook app must have been submitted to Meta for app review with the “pages_manage_metadata” (to retrieve Page Access Tokens for the Pages, apps that the app user administers and set a webhook) and “pages_messaging” (to send messages) permissions. - In order to integrate a Facebook Messenger app you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token. 
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns A Facebook Page Access Token.
         * @return {String}
         */
  }, {
    key: "getPageAccessToken",
    value: function getPageAccessToken() {
      return this.pageAccessToken;
    }

    /**
     * Sets A Facebook Page Access Token.
     * @param {String} pageAccessToken A Facebook Page Access Token.
     */
  }, {
    key: "setPageAccessToken",
    value: function setPageAccessToken(pageAccessToken) {
      this['pageAccessToken'] = pageAccessToken;
    }
    /**
         * Returns A Facebook App ID.
         * @return {String}
         */
  }, {
    key: "getAppId",
    value: function getAppId() {
      return this.appId;
    }

    /**
     * Sets A Facebook App ID.
     * @param {String} appId A Facebook App ID.
     */
  }, {
    key: "setAppId",
    value: function setAppId(appId) {
      this['appId'] = appId;
    }
    /**
         * Returns A Facebook App Secret.
         * @return {String}
         */
  }, {
    key: "getAppSecret",
    value: function getAppSecret() {
      return this.appSecret;
    }

    /**
     * Sets A Facebook App Secret.
     * @param {String} appSecret A Facebook App Secret.
     */
  }, {
    key: "setAppSecret",
    value: function setAppSecret(appSecret) {
      this['appSecret'] = appSecret;
    }
    /**
         * Returns A Facebook page ID.
         * @return {Number}
         */
  }, {
    key: "getPageId",
    value: function getPageId() {
      return this.pageId;
    }

    /**
     * Sets A Facebook page ID.
     * @param {Number} pageId A Facebook page ID.
     */
  }, {
    key: "setPageId",
    value: function setPageId(pageId) {
      this['pageId'] = pageId;
    }
    /**
         * Returns A Facebook page name.
         * @return {String}
         */
  }, {
    key: "getPageName",
    value: function getPageName() {
      return this.pageName;
    }

    /**
     * Sets A Facebook page name.
     * @param {String} pageName A Facebook page name.
     */
  }, {
    key: "setPageName",
    value: function setPageName(pageName) {
      this['pageName'] = pageName;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type, pageAccessToken, appId, appSecret) {
      obj['pageAccessToken'] = pageAccessToken;
      obj['appId'] = appId;
      obj['appSecret'] = appSecret;
    }

    /**
     * Constructs a <code>Messenger</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Messenger} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Messenger} The populated <code>Messenger</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Messenger();
        _Integration["default"].constructFromObject(data, obj);
        _Integration["default"].constructFromObject(data, obj);
        _MessengerAllOf["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('pageAccessToken')) {
          obj['pageAccessToken'] = _ApiClient["default"].convertToType(data['pageAccessToken'], 'String');
        }
        if (data.hasOwnProperty('appId')) {
          obj['appId'] = _ApiClient["default"].convertToType(data['appId'], 'String');
        }
        if (data.hasOwnProperty('appSecret')) {
          obj['appSecret'] = _ApiClient["default"].convertToType(data['appSecret'], 'String');
        }
        if (data.hasOwnProperty('pageId')) {
          obj['pageId'] = _ApiClient["default"].convertToType(data['pageId'], 'Number');
        }
        if (data.hasOwnProperty('pageName')) {
          obj['pageName'] = _ApiClient["default"].convertToType(data['pageName'], 'String');
        }
      }
      return obj;
    }
  }]);
  return Messenger;
}();
/**
 * Facebook Messenger Setup steps: - Take note of your Facebook app ID and secret (apps can be created at developer.facebook.com); - The Facebook app must have been submitted to Meta for app review with the “pages_manage_metadata” (to retrieve Page Access Tokens for the Pages, apps that the app user administers and set a webhook) and “pages_messaging” (to send messages) permissions. - In order to integrate a Facebook Messenger app you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token. 
 * @member {String} type
 * @default 'messenger'
 */
Messenger.prototype['type'] = 'messenger';

/**
 * A Facebook Page Access Token.
 * @member {String} pageAccessToken
 */
Messenger.prototype['pageAccessToken'] = undefined;

/**
 * A Facebook App ID.
 * @member {String} appId
 */
Messenger.prototype['appId'] = undefined;

/**
 * A Facebook App Secret.
 * @member {String} appSecret
 */
Messenger.prototype['appSecret'] = undefined;

/**
 * A Facebook page ID.
 * @member {Number} pageId
 */
Messenger.prototype['pageId'] = undefined;

/**
 * A Facebook page name.
 * @member {String} pageName
 */
Messenger.prototype['pageName'] = undefined;

// Implement Integration interface:
/**
 * The unique ID of the integration.
 * @member {String} id
 */
_Integration["default"].prototype['id'] = undefined;
/**
 * @member {String} type
 */
_Integration["default"].prototype['type'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Status} status
 */
_Integration["default"].prototype['status'] = undefined;
/**
 * A human-friendly name used to identify the integration.
 * @member {String} displayName
 */
_Integration["default"].prototype['displayName'] = undefined;
// Implement MessengerAllOf interface:
/**
 * Facebook Messenger Setup steps: - Take note of your Facebook app ID and secret (apps can be created at developer.facebook.com); - The Facebook app must have been submitted to Meta for app review with the “pages_manage_metadata” (to retrieve Page Access Tokens for the Pages, apps that the app user administers and set a webhook) and “pages_messaging” (to send messages) permissions. - In order to integrate a Facebook Messenger app you must acquire a Page Access Token from your user. Once you have acquired a page access token from your user, call the Create Integration endpoint with your app secret and ID and the user’s page access token. 
 * @member {String} type
 * @default 'messenger'
 */
_MessengerAllOf["default"].prototype['type'] = 'messenger';
/**
 * A Facebook Page Access Token.
 * @member {String} pageAccessToken
 */
_MessengerAllOf["default"].prototype['pageAccessToken'] = undefined;
/**
 * A Facebook App ID.
 * @member {String} appId
 */
_MessengerAllOf["default"].prototype['appId'] = undefined;
/**
 * A Facebook App Secret.
 * @member {String} appSecret
 */
_MessengerAllOf["default"].prototype['appSecret'] = undefined;
/**
 * A Facebook page ID.
 * @member {Number} pageId
 */
_MessengerAllOf["default"].prototype['pageId'] = undefined;
/**
 * A Facebook page name.
 * @member {String} pageName
 */
_MessengerAllOf["default"].prototype['pageName'] = undefined;
var _default = Messenger;
exports["default"] = _default;