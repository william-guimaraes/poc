"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The SwitchboardIntegrationWebhook model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationWebhook
 * @version 9.14.0
 */
var SwitchboardIntegrationWebhook = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>SwitchboardIntegrationWebhook</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationWebhook
   */
  function SwitchboardIntegrationWebhook() {
    _classCallCheck(this, SwitchboardIntegrationWebhook);
    SwitchboardIntegrationWebhook.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(SwitchboardIntegrationWebhook, [{
    key: "getId",
    value:
    /**
         * Returns The unique ID of the switchboard integration.
         * @return {String}
         */
    function getId() {
      return this.id;
    }

    /**
     * Sets The unique ID of the switchboard integration.
     * @param {String} id The unique ID of the switchboard integration.
     */
  }, {
    key: "setId",
    value: function setId(id) {
      this['id'] = id;
    }
    /**
         * Returns Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
         * @return {String}
         */
  }, {
    key: "getName",
    value: function getName() {
      return this.name;
    }

    /**
     * Sets Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
     * @param {String} name Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
     */
  }, {
    key: "setName",
    value: function setName(name) {
      this['name'] = name;
    }
    /**
         * Returns Id of the integration that should deliver events routed by the switchboard.
         * @return {String}
         */
  }, {
    key: "getIntegrationId",
    value: function getIntegrationId() {
      return this.integrationId;
    }

    /**
     * Sets Id of the integration that should deliver events routed by the switchboard.
     * @param {String} integrationId Id of the integration that should deliver events routed by the switchboard.
     */
  }, {
    key: "setIntegrationId",
    value: function setIntegrationId(integrationId) {
      this['integrationId'] = integrationId;
    }
    /**
         * Returns Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
         * @return {String}
         */
  }, {
    key: "getIntegrationType",
    value: function getIntegrationType() {
      return this.integrationType;
    }

    /**
     * Sets Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
     * @param {String} integrationType Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
     */
  }, {
    key: "setIntegrationType",
    value: function setIntegrationType(integrationType) {
      this['integrationType'] = integrationType;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>SwitchboardIntegrationWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationWebhook} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegrationWebhook} The populated <code>SwitchboardIntegrationWebhook</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new SwitchboardIntegrationWebhook();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('integrationId')) {
          obj['integrationId'] = _ApiClient["default"].convertToType(data['integrationId'], 'String');
        }
        if (data.hasOwnProperty('integrationType')) {
          obj['integrationType'] = _ApiClient["default"].convertToType(data['integrationType'], 'String');
        }
      }
      return obj;
    }
  }]);
  return SwitchboardIntegrationWebhook;
}();
/**
 * The unique ID of the switchboard integration.
 * @member {String} id
 */
SwitchboardIntegrationWebhook.prototype['id'] = undefined;

/**
 * Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
 * @member {String} name
 */
SwitchboardIntegrationWebhook.prototype['name'] = undefined;

/**
 * Id of the integration that should deliver events routed by the switchboard.
 * @member {String} integrationId
 */
SwitchboardIntegrationWebhook.prototype['integrationId'] = undefined;

/**
 * Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
 * @member {String} integrationType
 */
SwitchboardIntegrationWebhook.prototype['integrationType'] = undefined;
var _default = SwitchboardIntegrationWebhook;
exports["default"] = _default;