"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The Device model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Device
 * @version 9.14.0
 */
var Device = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Device</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Device
   */
  function Device() {
    _classCallCheck(this, Device);
    Device.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(Device, [{
    key: "getId",
    value:
    /**
         * Returns The unique ID of the device.
         * @return {String}
         */
    function getId() {
      return this.id;
    }

    /**
     * Sets The unique ID of the device.
     * @param {String} id The unique ID of the device.
     */
  }, {
    key: "setId",
    value: function setId(id) {
      this['id'] = id;
    }
    /**
         * Returns The type of integration that the device represents.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Device.TypeEnum}
         */
  }, {
    key: "getType",
    value: function getType() {
      return this.type;
    }

    /**
     * Sets The type of integration that the device represents.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Device.TypeEnum} type The type of integration that the device represents.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns A unique identifier for the device, generated client-side by the SDK.
         * @return {String}
         */
  }, {
    key: "getGuid",
    value: function getGuid() {
      return this.guid;
    }

    /**
     * Sets A unique identifier for the device, generated client-side by the SDK.
     * @param {String} guid A unique identifier for the device, generated client-side by the SDK.
     */
  }, {
    key: "setGuid",
    value: function setGuid(guid) {
      this['guid'] = guid;
    }
    /**
         * Returns The id of the client to which this device is associated.
         * @return {String}
         */
  }, {
    key: "getClientId",
    value: function getClientId() {
      return this.clientId;
    }

    /**
     * Sets The id of the client to which this device is associated.
     * @param {String} clientId The id of the client to which this device is associated.
     */
  }, {
    key: "setClientId",
    value: function setClientId(clientId) {
      this['clientId'] = clientId;
    }
    /**
         * Returns The device status. Indicates if the device will receive push notifications or not.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Device.StatusEnum}
         */
  }, {
    key: "getStatus",
    value: function getStatus() {
      return this.status;
    }

    /**
     * Sets The device status. Indicates if the device will receive push notifications or not.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Device.StatusEnum} status The device status. Indicates if the device will receive push notifications or not.
     */
  }, {
    key: "setStatus",
    value: function setStatus(status) {
      this['status'] = status;
    }
    /**
         * Returns The ID of the integration that the device was created for.
         * @return {String}
         */
  }, {
    key: "getIntegrationId",
    value: function getIntegrationId() {
      return this.integrationId;
    }

    /**
     * Sets The ID of the integration that the device was created for.
     * @param {String} integrationId The ID of the integration that the device was created for.
     */
  }, {
    key: "setIntegrationId",
    value: function setIntegrationId(integrationId) {
      this['integrationId'] = integrationId;
    }
    /**
         * Returns A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the last time the user interacted with this device.
         * @return {String}
         */
  }, {
    key: "getLastSeen",
    value: function getLastSeen() {
      return this.lastSeen;
    }

    /**
     * Sets A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the last time the user interacted with this device.
     * @param {String} lastSeen A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the last time the user interacted with this device.
     */
  }, {
    key: "setLastSeen",
    value: function setLastSeen(lastSeen) {
      this['lastSeen'] = lastSeen;
    }
    /**
         * Returns The token used for push notifications on Android and iOS devices.
         * @return {String}
         */
  }, {
    key: "getPushNotificationToken",
    value: function getPushNotificationToken() {
      return this.pushNotificationToken;
    }

    /**
     * Sets The token used for push notifications on Android and iOS devices.
     * @param {String} pushNotificationToken The token used for push notifications on Android and iOS devices.
     */
  }, {
    key: "setPushNotificationToken",
    value: function setPushNotificationToken(pushNotificationToken) {
      this['pushNotificationToken'] = pushNotificationToken;
    }
    /**
         * Returns A flat curated object with properties that vary for each SDK platform. All keys are optional and not guaranteed to be available.
         * @return {Object}
         */
  }, {
    key: "getInfo",
    value: function getInfo() {
      return this.info;
    }

    /**
     * Sets A flat curated object with properties that vary for each SDK platform. All keys are optional and not guaranteed to be available.
     * @param {Object} info A flat curated object with properties that vary for each SDK platform. All keys are optional and not guaranteed to be available.
     */
  }, {
    key: "setInfo",
    value: function setInfo(info) {
      this['info'] = info;
    }
    /**
         * Returns Version of the mobile app in which the SDK is embedded. Not applicable for devices of type web.
         * @return {String}
         */
  }, {
    key: "getAppVersion",
    value: function getAppVersion() {
      return this.appVersion;
    }

    /**
     * Sets Version of the mobile app in which the SDK is embedded. Not applicable for devices of type web.
     * @param {String} appVersion Version of the mobile app in which the SDK is embedded. Not applicable for devices of type web.
     */
  }, {
    key: "setAppVersion",
    value: function setAppVersion(appVersion) {
      this['appVersion'] = appVersion;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Device} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Device} The populated <code>Device</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Device();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('guid')) {
          obj['guid'] = _ApiClient["default"].convertToType(data['guid'], 'String');
        }
        if (data.hasOwnProperty('clientId')) {
          obj['clientId'] = _ApiClient["default"].convertToType(data['clientId'], 'String');
        }
        if (data.hasOwnProperty('status')) {
          obj['status'] = _ApiClient["default"].convertToType(data['status'], 'String');
        }
        if (data.hasOwnProperty('integrationId')) {
          obj['integrationId'] = _ApiClient["default"].convertToType(data['integrationId'], 'String');
        }
        if (data.hasOwnProperty('lastSeen')) {
          obj['lastSeen'] = _ApiClient["default"].convertToType(data['lastSeen'], 'String');
        }
        if (data.hasOwnProperty('pushNotificationToken')) {
          obj['pushNotificationToken'] = _ApiClient["default"].convertToType(data['pushNotificationToken'], 'String');
        }
        if (data.hasOwnProperty('info')) {
          obj['info'] = _ApiClient["default"].convertToType(data['info'], Object);
        }
        if (data.hasOwnProperty('appVersion')) {
          obj['appVersion'] = _ApiClient["default"].convertToType(data['appVersion'], 'String');
        }
      }
      return obj;
    }
  }]);
  return Device;
}();
/**
 * The unique ID of the device.
 * @member {String} id
 */
Device.prototype['id'] = undefined;

/**
 * The type of integration that the device represents.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Device.TypeEnum} type
 */
Device.prototype['type'] = undefined;

/**
 * A unique identifier for the device, generated client-side by the SDK.
 * @member {String} guid
 */
Device.prototype['guid'] = undefined;

/**
 * The id of the client to which this device is associated.
 * @member {String} clientId
 */
Device.prototype['clientId'] = undefined;

/**
 * The device status. Indicates if the device will receive push notifications or not.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Device.StatusEnum} status
 */
Device.prototype['status'] = undefined;

/**
 * The ID of the integration that the device was created for.
 * @member {String} integrationId
 */
Device.prototype['integrationId'] = undefined;

/**
 * A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the last time the user interacted with this device.
 * @member {String} lastSeen
 */
Device.prototype['lastSeen'] = undefined;

/**
 * The token used for push notifications on Android and iOS devices.
 * @member {String} pushNotificationToken
 */
Device.prototype['pushNotificationToken'] = undefined;

/**
 * A flat curated object with properties that vary for each SDK platform. All keys are optional and not guaranteed to be available.
 * @member {Object} info
 */
Device.prototype['info'] = undefined;

/**
 * Version of the mobile app in which the SDK is embedded. Not applicable for devices of type web.
 * @member {String} appVersion
 */
Device.prototype['appVersion'] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Device['TypeEnum'] = {
  /**
   * value: "android"
   * @const
   */
  "android": "android",
  /**
   * value: "ios"
   * @const
   */
  "ios": "ios",
  /**
   * value: "web"
   * @const
   */
  "web": "web"
};

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Device['StatusEnum'] = {
  /**
   * value: "active"
   * @const
   */
  "active": "active",
  /**
   * value: "inactive"
   * @const
   */
  "inactive": "inactive"
};
var _default = Device;
exports["default"] = _default;