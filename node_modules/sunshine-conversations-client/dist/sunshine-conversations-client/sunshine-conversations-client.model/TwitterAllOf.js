"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The TwitterAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/TwitterAllOf
 * @version 9.14.0
 */
var TwitterAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>TwitterAllOf</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/TwitterAllOf
   * @param tier {module:sunshine-conversations-client/sunshine-conversations-client.model/TwitterAllOf.TierEnum} Your Twitter app’s tier, sandbox, premium or enterprise.
   * @param consumerKey {String} The consumer key for your Twitter app.
   * @param consumerSecret {String} The consumer key secret for your Twitter app.
   * @param accessTokenSecret {String} The access token secret obtained from your user via oauth.
   */
  function TwitterAllOf(tier, consumerKey, consumerSecret, accessTokenSecret) {
    _classCallCheck(this, TwitterAllOf);
    TwitterAllOf.initialize(this, tier, consumerKey, consumerSecret, accessTokenSecret);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(TwitterAllOf, [{
    key: "getType",
    value:
    /**
         * Returns To set up a Twitter integration, please follow the steps outlined in the [Twitter Setup Guide](https://docs.smooch.io/guide/twitter/#setup). 
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets To set up a Twitter integration, please follow the steps outlined in the [Twitter Setup Guide](https://docs.smooch.io/guide/twitter/#setup). 
     * @param {String} type To set up a Twitter integration, please follow the steps outlined in the [Twitter Setup Guide](https://docs.smooch.io/guide/twitter/#setup). 
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns Your Twitter app’s tier, sandbox, premium or enterprise.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/TwitterAllOf.TierEnum}
         */
  }, {
    key: "getTier",
    value: function getTier() {
      return this.tier;
    }

    /**
     * Sets Your Twitter app’s tier, sandbox, premium or enterprise.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/TwitterAllOf.TierEnum} tier Your Twitter app’s tier, sandbox, premium or enterprise.
     */
  }, {
    key: "setTier",
    value: function setTier(tier) {
      this['tier'] = tier;
    }
    /**
         * Returns The Twitter dev environments label (required for sandbox and premium tiers).
         * @return {String}
         */
  }, {
    key: "getEnvName",
    value: function getEnvName() {
      return this.envName;
    }

    /**
     * Sets The Twitter dev environments label (required for sandbox and premium tiers).
     * @param {String} envName The Twitter dev environments label (required for sandbox and premium tiers).
     */
  }, {
    key: "setEnvName",
    value: function setEnvName(envName) {
      this['envName'] = envName;
    }
    /**
         * Returns The consumer key for your Twitter app.
         * @return {String}
         */
  }, {
    key: "getConsumerKey",
    value: function getConsumerKey() {
      return this.consumerKey;
    }

    /**
     * Sets The consumer key for your Twitter app.
     * @param {String} consumerKey The consumer key for your Twitter app.
     */
  }, {
    key: "setConsumerKey",
    value: function setConsumerKey(consumerKey) {
      this['consumerKey'] = consumerKey;
    }
    /**
         * Returns The consumer key secret for your Twitter app.
         * @return {String}
         */
  }, {
    key: "getConsumerSecret",
    value: function getConsumerSecret() {
      return this.consumerSecret;
    }

    /**
     * Sets The consumer key secret for your Twitter app.
     * @param {String} consumerSecret The consumer key secret for your Twitter app.
     */
  }, {
    key: "setConsumerSecret",
    value: function setConsumerSecret(consumerSecret) {
      this['consumerSecret'] = consumerSecret;
    }
    /**
         * Returns The access token key obtained from your user via oauth.
         * @return {String}
         */
  }, {
    key: "getAccessTokenKey",
    value: function getAccessTokenKey() {
      return this.accessTokenKey;
    }

    /**
     * Sets The access token key obtained from your user via oauth.
     * @param {String} accessTokenKey The access token key obtained from your user via oauth.
     */
  }, {
    key: "setAccessTokenKey",
    value: function setAccessTokenKey(accessTokenKey) {
      this['accessTokenKey'] = accessTokenKey;
    }
    /**
         * Returns The access token secret obtained from your user via oauth.
         * @return {String}
         */
  }, {
    key: "getAccessTokenSecret",
    value: function getAccessTokenSecret() {
      return this.accessTokenSecret;
    }

    /**
     * Sets The access token secret obtained from your user via oauth.
     * @param {String} accessTokenSecret The access token secret obtained from your user via oauth.
     */
  }, {
    key: "setAccessTokenSecret",
    value: function setAccessTokenSecret(accessTokenSecret) {
      this['accessTokenSecret'] = accessTokenSecret;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, tier, consumerKey, consumerSecret, accessTokenSecret) {
      obj['tier'] = tier;
      obj['consumerKey'] = consumerKey;
      obj['consumerSecret'] = consumerSecret;
      obj['accessTokenSecret'] = accessTokenSecret;
    }

    /**
     * Constructs a <code>TwitterAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/TwitterAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/TwitterAllOf} The populated <code>TwitterAllOf</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new TwitterAllOf();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('tier')) {
          obj['tier'] = _ApiClient["default"].convertToType(data['tier'], 'String');
        }
        if (data.hasOwnProperty('envName')) {
          obj['envName'] = _ApiClient["default"].convertToType(data['envName'], 'String');
        }
        if (data.hasOwnProperty('consumerKey')) {
          obj['consumerKey'] = _ApiClient["default"].convertToType(data['consumerKey'], 'String');
        }
        if (data.hasOwnProperty('consumerSecret')) {
          obj['consumerSecret'] = _ApiClient["default"].convertToType(data['consumerSecret'], 'String');
        }
        if (data.hasOwnProperty('accessTokenKey')) {
          obj['accessTokenKey'] = _ApiClient["default"].convertToType(data['accessTokenKey'], 'String');
        }
        if (data.hasOwnProperty('accessTokenSecret')) {
          obj['accessTokenSecret'] = _ApiClient["default"].convertToType(data['accessTokenSecret'], 'String');
        }
      }
      return obj;
    }
  }]);
  return TwitterAllOf;
}();
/**
 * To set up a Twitter integration, please follow the steps outlined in the [Twitter Setup Guide](https://docs.smooch.io/guide/twitter/#setup). 
 * @member {String} type
 * @default 'twitter'
 */
TwitterAllOf.prototype['type'] = 'twitter';

/**
 * Your Twitter app’s tier, sandbox, premium or enterprise.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/TwitterAllOf.TierEnum} tier
 */
TwitterAllOf.prototype['tier'] = undefined;

/**
 * The Twitter dev environments label (required for sandbox and premium tiers).
 * @member {String} envName
 */
TwitterAllOf.prototype['envName'] = undefined;

/**
 * The consumer key for your Twitter app.
 * @member {String} consumerKey
 */
TwitterAllOf.prototype['consumerKey'] = undefined;

/**
 * The consumer key secret for your Twitter app.
 * @member {String} consumerSecret
 */
TwitterAllOf.prototype['consumerSecret'] = undefined;

/**
 * The access token key obtained from your user via oauth.
 * @member {String} accessTokenKey
 */
TwitterAllOf.prototype['accessTokenKey'] = undefined;

/**
 * The access token secret obtained from your user via oauth.
 * @member {String} accessTokenSecret
 */
TwitterAllOf.prototype['accessTokenSecret'] = undefined;

/**
 * Allowed values for the <code>tier</code> property.
 * @enum {String}
 * @readonly
 */
TwitterAllOf['TierEnum'] = {
  /**
   * value: "sandbox"
   * @const
   */
  "sandbox": "sandbox",
  /**
   * value: "premium"
   * @const
   */
  "premium": "premium",
  /**
   * value: "enterprise"
   * @const
   */
  "enterprise": "enterprise"
};
var _default = TwitterAllOf;
exports["default"] = _default;