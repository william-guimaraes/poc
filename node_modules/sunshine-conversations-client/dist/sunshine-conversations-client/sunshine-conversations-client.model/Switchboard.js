"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The Switchboard model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Switchboard
 * @version 9.14.0
 */
var Switchboard = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Switchboard</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Switchboard
   * @param id {String} The unique ID of the switchboard.
   * @param enabled {Boolean} Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
   */
  function Switchboard(id, enabled) {
    _classCallCheck(this, Switchboard);
    Switchboard.initialize(this, id, enabled);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(Switchboard, [{
    key: "getId",
    value:
    /**
         * Returns The unique ID of the switchboard.
         * @return {String}
         */
    function getId() {
      return this.id;
    }

    /**
     * Sets The unique ID of the switchboard.
     * @param {String} id The unique ID of the switchboard.
     */
  }, {
    key: "setId",
    value: function setId(id) {
      this['id'] = id;
    }
    /**
         * Returns Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
         * @return {Boolean}
         */
  }, {
    key: "getEnabled",
    value: function getEnabled() {
      return this.enabled;
    }

    /**
     * Sets Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
     * @param {Boolean} enabled Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
     */
  }, {
    key: "setEnabled",
    value: function setEnabled(enabled) {
      this['enabled'] = enabled;
    }
    /**
         * Returns The id of the switchboard integration that will be given control when a new conversation begins. It will also be used for conversations that existed before the switchboard was enabled.
         * @return {String}
         */
  }, {
    key: "getDefaultSwitchboardIntegrationId",
    value: function getDefaultSwitchboardIntegrationId() {
      return this.defaultSwitchboardIntegrationId;
    }

    /**
     * Sets The id of the switchboard integration that will be given control when a new conversation begins. It will also be used for conversations that existed before the switchboard was enabled.
     * @param {String} defaultSwitchboardIntegrationId The id of the switchboard integration that will be given control when a new conversation begins. It will also be used for conversations that existed before the switchboard was enabled.
     */
  }, {
    key: "setDefaultSwitchboardIntegrationId",
    value: function setDefaultSwitchboardIntegrationId(defaultSwitchboardIntegrationId) {
      this['defaultSwitchboardIntegrationId'] = defaultSwitchboardIntegrationId;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, id, enabled) {
      obj['id'] = id;
      obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>Switchboard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Switchboard} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Switchboard} The populated <code>Switchboard</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Switchboard();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('enabled')) {
          obj['enabled'] = _ApiClient["default"].convertToType(data['enabled'], 'Boolean');
        }
        if (data.hasOwnProperty('defaultSwitchboardIntegrationId')) {
          obj['defaultSwitchboardIntegrationId'] = _ApiClient["default"].convertToType(data['defaultSwitchboardIntegrationId'], 'String');
        }
      }
      return obj;
    }
  }]);
  return Switchboard;
}();
/**
 * The unique ID of the switchboard.
 * @member {String} id
 */
Switchboard.prototype['id'] = undefined;

/**
 * Whether the switchboard is enabled. Allows creating the switchboard in a disabled state so that messages don't get lost or misrouted during switchboard configuration. When a switchboard is disabled, integrations linked to the switchboard will receive all events.
 * @member {Boolean} enabled
 */
Switchboard.prototype['enabled'] = undefined;

/**
 * The id of the switchboard integration that will be given control when a new conversation begins. It will also be used for conversations that existed before the switchboard was enabled.
 * @member {String} defaultSwitchboardIntegrationId
 */
Switchboard.prototype['defaultSwitchboardIntegrationId'] = undefined;
var _default = Switchboard;
exports["default"] = _default;