"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ParticipantWithUserExternalId = _interopRequireDefault(require("./ParticipantWithUserExternalId"));
var _ParticipantWithUserId = _interopRequireDefault(require("./ParticipantWithUserId"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The ParticipantSubSchema model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/ParticipantSubSchema
 * @version 9.14.0
 */
var ParticipantSubSchema = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ParticipantSubSchema</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantSubSchema
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantWithUserId
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantWithUserExternalId
   */
  function ParticipantSubSchema() {
    _classCallCheck(this, ParticipantSubSchema);
    _ParticipantWithUserId["default"].initialize(this);
    _ParticipantWithUserExternalId["default"].initialize(this);
    ParticipantSubSchema.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(ParticipantSubSchema, [{
    key: "getUserId",
    value:
    /**
         * Returns The id of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
         * @return {String}
         */
    function getUserId() {
      return this.userId;
    }

    /**
     * Sets The id of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
     * @param {String} userId The id of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
     */
  }, {
    key: "setUserId",
    value: function setUserId(userId) {
      this['userId'] = userId;
    }
    /**
         * Returns When passed as true, the SDK client of the concerned participant will be subscribed to the conversation. The user will start receiving push notifications for this conversation right away, without having to view the conversation on the SDK beforehand. An SDK client will be created for users that don’t already have one. This field is required if the conversation is of type `sdkGroup`.
         * @return {Boolean}
         */
  }, {
    key: "getSubscribeSDKClient",
    value: function getSubscribeSDKClient() {
      return this.subscribeSDKClient;
    }

    /**
     * Sets When passed as true, the SDK client of the concerned participant will be subscribed to the conversation. The user will start receiving push notifications for this conversation right away, without having to view the conversation on the SDK beforehand. An SDK client will be created for users that don’t already have one. This field is required if the conversation is of type `sdkGroup`.
     * @param {Boolean} subscribeSDKClient When passed as true, the SDK client of the concerned participant will be subscribed to the conversation. The user will start receiving push notifications for this conversation right away, without having to view the conversation on the SDK beforehand. An SDK client will be created for users that don’t already have one. This field is required if the conversation is of type `sdkGroup`.
     */
  }, {
    key: "setSubscribeSDKClient",
    value: function setSubscribeSDKClient(subscribeSDKClient) {
      this['subscribeSDKClient'] = subscribeSDKClient;
    }
    /**
         * Returns The `externalId` of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
         * @return {String}
         */
  }, {
    key: "getUserExternalId",
    value: function getUserExternalId() {
      return this.userExternalId;
    }

    /**
     * Sets The `externalId` of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
     * @param {String} userExternalId The `externalId` of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
     */
  }, {
    key: "setUserExternalId",
    value: function setUserExternalId(userExternalId) {
      this['userExternalId'] = userExternalId;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>ParticipantSubSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantSubSchema} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ParticipantSubSchema} The populated <code>ParticipantSubSchema</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ParticipantSubSchema();
        _ParticipantWithUserId["default"].constructFromObject(data, obj);
        _ParticipantWithUserExternalId["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('userId')) {
          obj['userId'] = _ApiClient["default"].convertToType(data['userId'], 'String');
        }
        if (data.hasOwnProperty('subscribeSDKClient')) {
          obj['subscribeSDKClient'] = _ApiClient["default"].convertToType(data['subscribeSDKClient'], 'Boolean');
        }
        if (data.hasOwnProperty('userExternalId')) {
          obj['userExternalId'] = _ApiClient["default"].convertToType(data['userExternalId'], 'String');
        }
      }
      return obj;
    }
  }]);
  return ParticipantSubSchema;
}();
/**
 * The id of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
 * @member {String} userId
 */
ParticipantSubSchema.prototype['userId'] = undefined;

/**
 * When passed as true, the SDK client of the concerned participant will be subscribed to the conversation. The user will start receiving push notifications for this conversation right away, without having to view the conversation on the SDK beforehand. An SDK client will be created for users that don’t already have one. This field is required if the conversation is of type `sdkGroup`.
 * @member {Boolean} subscribeSDKClient
 */
ParticipantSubSchema.prototype['subscribeSDKClient'] = undefined;

/**
 * The `externalId` of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
 * @member {String} userExternalId
 */
ParticipantSubSchema.prototype['userExternalId'] = undefined;

// Implement ParticipantWithUserId interface:
/**
 * The id of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
 * @member {String} userId
 */
_ParticipantWithUserId["default"].prototype['userId'] = undefined;
/**
 * When passed as true, the SDK client of the concerned participant will be subscribed to the conversation. The user will start receiving push notifications for this conversation right away, without having to view the conversation on the SDK beforehand. An SDK client will be created for users that don’t already have one. This field is required if the conversation is of type `sdkGroup`.
 * @member {Boolean} subscribeSDKClient
 */
_ParticipantWithUserId["default"].prototype['subscribeSDKClient'] = undefined;
// Implement ParticipantWithUserExternalId interface:
/**
 * The `externalId` of the user that will be participating in the conversation. It will return `404` if the user can’t be found. One of `userId` or `userExternalId` is required, but not both.
 * @member {String} userExternalId
 */
_ParticipantWithUserExternalId["default"].prototype['userExternalId'] = undefined;
/**
 * When passed as true, the SDK client of the concerned participant will be subscribed to the conversation. The user will start receiving push notifications for this conversation right away, without having to view the conversation on the SDK beforehand. An SDK client will be created for users that don’t already have one. This field is required if the conversation is of type `sdkGroup`.
 * @member {Boolean} subscribeSDKClient
 */
_ParticipantWithUserExternalId["default"].prototype['subscribeSDKClient'] = undefined;
var _default = ParticipantSubSchema;
exports["default"] = _default;