"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _MatchCriteriaMailgun = _interopRequireDefault(require("./MatchCriteriaMailgun"));
var _MatchCriteriaMessagebird = _interopRequireDefault(require("./MatchCriteriaMessagebird"));
var _MatchCriteriaTwilio = _interopRequireDefault(require("./MatchCriteriaTwilio"));
var _MatchCriteriaWhatsapp = _interopRequireDefault(require("./MatchCriteriaWhatsapp"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The MatchCriteria model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/MatchCriteria
 * @version 9.14.0
 */
var MatchCriteria = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>MatchCriteria</code>.
   * The set of criteria used to determine the user&#39;s identity on a third-party channel.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/MatchCriteria
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/MatchCriteriaMailgun
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/MatchCriteriaMessagebird
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/MatchCriteriaTwilio
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/MatchCriteriaWhatsapp
   * @param type {String} The channel type.
   * @param integrationId {String} The ID of the integration to link. Must match the provided type.
   * @param address {String} The user’s email address.
   * @param phoneNumber {String} The user’s phone number. It must contain the + prefix and the country code. Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368. Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368. 
   */
  function MatchCriteria(type, integrationId, address, phoneNumber) {
    _classCallCheck(this, MatchCriteria);
    _MatchCriteriaMailgun["default"].initialize(this, type, integrationId, address);
    _MatchCriteriaMessagebird["default"].initialize(this, type, integrationId, phoneNumber);
    _MatchCriteriaTwilio["default"].initialize(this, type, integrationId, phoneNumber);
    _MatchCriteriaWhatsapp["default"].initialize(this, type, integrationId, phoneNumber);
    MatchCriteria.initialize(this, type, integrationId, address, phoneNumber);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(MatchCriteria, [{
    key: "getType",
    value:
    /**
         * Returns The channel type.
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The channel type.
     * @param {String} type The channel type.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns The ID of the integration to link. Must match the provided type.
         * @return {String}
         */
  }, {
    key: "getIntegrationId",
    value: function getIntegrationId() {
      return this.integrationId;
    }

    /**
     * Sets The ID of the integration to link. Must match the provided type.
     * @param {String} integrationId The ID of the integration to link. Must match the provided type.
     */
  }, {
    key: "setIntegrationId",
    value: function setIntegrationId(integrationId) {
      this['integrationId'] = integrationId;
    }
    /**
         * Returns Flag indicating whether the client will become the primary for the target conversation once linking is complete.
         * @return {Boolean}
         */
  }, {
    key: "getPrimary",
    value: function getPrimary() {
      return this.primary;
    }

    /**
     * Sets Flag indicating whether the client will become the primary for the target conversation once linking is complete.
     * @param {Boolean} primary Flag indicating whether the client will become the primary for the target conversation once linking is complete.
     */
  }, {
    key: "setPrimary",
    value: function setPrimary(primary) {
      this['primary'] = primary;
    }
    /**
         * Returns The user’s email address.
         * @return {String}
         */
  }, {
    key: "getAddress",
    value: function getAddress() {
      return this.address;
    }

    /**
     * Sets The user’s email address.
     * @param {String} address The user’s email address.
     */
  }, {
    key: "setAddress",
    value: function setAddress(address) {
      this['address'] = address;
    }
    /**
         * Returns May be specified to set the subject for the outgoing email.
         * @return {String}
         */
  }, {
    key: "getSubject",
    value: function getSubject() {
      return this.subject;
    }

    /**
     * Sets May be specified to set the subject for the outgoing email.
     * @param {String} subject May be specified to set the subject for the outgoing email.
     */
  }, {
    key: "setSubject",
    value: function setSubject(subject) {
      this['subject'] = subject;
    }
    /**
         * Returns The user’s phone number. It must contain the + prefix and the country code. Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368. Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368. 
         * @return {String}
         */
  }, {
    key: "getPhoneNumber",
    value: function getPhoneNumber() {
      return this.phoneNumber;
    }

    /**
     * Sets The user’s phone number. It must contain the + prefix and the country code. Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368. Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368. 
     * @param {String} phoneNumber The user’s phone number. It must contain the + prefix and the country code. Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368. Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368. 
     */
  }, {
    key: "setPhoneNumber",
    value: function setPhoneNumber(phoneNumber) {
      this['phoneNumber'] = phoneNumber;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type, integrationId, address, phoneNumber) {
      obj['type'] = type;
      obj['integrationId'] = integrationId;
      obj['address'] = address;
      obj['phoneNumber'] = phoneNumber;
    }

    /**
     * Constructs a <code>MatchCriteria</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/MatchCriteria} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/MatchCriteria} The populated <code>MatchCriteria</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new MatchCriteria();
        _MatchCriteriaMailgun["default"].constructFromObject(data, obj);
        _MatchCriteriaMessagebird["default"].constructFromObject(data, obj);
        _MatchCriteriaTwilio["default"].constructFromObject(data, obj);
        _MatchCriteriaWhatsapp["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('integrationId')) {
          obj['integrationId'] = _ApiClient["default"].convertToType(data['integrationId'], 'String');
        }
        if (data.hasOwnProperty('primary')) {
          obj['primary'] = _ApiClient["default"].convertToType(data['primary'], 'Boolean');
        }
        if (data.hasOwnProperty('address')) {
          obj['address'] = _ApiClient["default"].convertToType(data['address'], 'String');
        }
        if (data.hasOwnProperty('subject')) {
          obj['subject'] = _ApiClient["default"].convertToType(data['subject'], 'String');
        }
        if (data.hasOwnProperty('phoneNumber')) {
          obj['phoneNumber'] = _ApiClient["default"].convertToType(data['phoneNumber'], 'String');
        }
      }
      return obj;
    }
  }]);
  return MatchCriteria;
}();
/**
 * The channel type.
 * @member {String} type
 * @default 'whatsapp'
 */
MatchCriteria.prototype['type'] = 'whatsapp';

/**
 * The ID of the integration to link. Must match the provided type.
 * @member {String} integrationId
 */
MatchCriteria.prototype['integrationId'] = undefined;

/**
 * Flag indicating whether the client will become the primary for the target conversation once linking is complete.
 * @member {Boolean} primary
 * @default true
 */
MatchCriteria.prototype['primary'] = true;

/**
 * The user’s email address.
 * @member {String} address
 */
MatchCriteria.prototype['address'] = undefined;

/**
 * May be specified to set the subject for the outgoing email.
 * @member {String} subject
 * @default 'New message from {appName}'
 */
MatchCriteria.prototype['subject'] = 'New message from {appName}';

/**
 * The user’s phone number. It must contain the + prefix and the country code. Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368. Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368. 
 * @member {String} phoneNumber
 */
MatchCriteria.prototype['phoneNumber'] = undefined;

// Implement MatchCriteriaMailgun interface:
/**
 * The channel type.
 * @member {String} type
 * @default 'mailgun'
 */
_MatchCriteriaMailgun["default"].prototype['type'] = 'mailgun';
/**
 * The ID of the integration to link. Must match the provided type.
 * @member {String} integrationId
 */
_MatchCriteriaMailgun["default"].prototype['integrationId'] = undefined;
/**
 * Flag indicating whether the client will become the primary for the target conversation once linking is complete.
 * @member {Boolean} primary
 * @default true
 */
_MatchCriteriaMailgun["default"].prototype['primary'] = true;
/**
 * The user’s email address.
 * @member {String} address
 */
_MatchCriteriaMailgun["default"].prototype['address'] = undefined;
/**
 * May be specified to set the subject for the outgoing email.
 * @member {String} subject
 * @default 'New message from {appName}'
 */
_MatchCriteriaMailgun["default"].prototype['subject'] = 'New message from {appName}';
// Implement MatchCriteriaMessagebird interface:
/**
 * The channel type.
 * @member {String} type
 * @default 'messagebird'
 */
_MatchCriteriaMessagebird["default"].prototype['type'] = 'messagebird';
/**
 * The ID of the integration to link. Must match the provided type.
 * @member {String} integrationId
 */
_MatchCriteriaMessagebird["default"].prototype['integrationId'] = undefined;
/**
 * Flag indicating whether the client will become the primary for the target conversation once linking is complete.
 * @member {Boolean} primary
 * @default true
 */
_MatchCriteriaMessagebird["default"].prototype['primary'] = true;
/**
 * The user’s phone number. It must contain the + prefix and the country code. Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368. Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368. 
 * @member {String} phoneNumber
 */
_MatchCriteriaMessagebird["default"].prototype['phoneNumber'] = undefined;
// Implement MatchCriteriaTwilio interface:
/**
 * The channel type.
 * @member {String} type
 * @default 'twilio'
 */
_MatchCriteriaTwilio["default"].prototype['type'] = 'twilio';
/**
 * The ID of the integration to link. Must match the provided type.
 * @member {String} integrationId
 */
_MatchCriteriaTwilio["default"].prototype['integrationId'] = undefined;
/**
 * Flag indicating whether the client will become the primary for the target conversation once linking is complete.
 * @member {Boolean} primary
 * @default true
 */
_MatchCriteriaTwilio["default"].prototype['primary'] = true;
/**
 * The user’s phone number. It must contain the + prefix and the country code. Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368. Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368. 
 * @member {String} phoneNumber
 */
_MatchCriteriaTwilio["default"].prototype['phoneNumber'] = undefined;
// Implement MatchCriteriaWhatsapp interface:
/**
 * The channel type.
 * @member {String} type
 * @default 'whatsapp'
 */
_MatchCriteriaWhatsapp["default"].prototype['type'] = 'whatsapp';
/**
 * The ID of the integration to link. Must match the provided type.
 * @member {String} integrationId
 */
_MatchCriteriaWhatsapp["default"].prototype['integrationId'] = undefined;
/**
 * Flag indicating whether the client will become the primary for the target conversation once linking is complete.
 * @member {Boolean} primary
 * @default true
 */
_MatchCriteriaWhatsapp["default"].prototype['primary'] = true;
/**
 * The user’s phone number. It must contain the + prefix and the country code. Examples of valid phone numbers: +1 212-555-2368, +12125552368, +1 212 555 2368. Examples of invalid phone numbers: 212 555 2368, 1 212 555 2368. 
 * @member {String} phoneNumber
 */
_MatchCriteriaWhatsapp["default"].prototype['phoneNumber'] = undefined;
var _default = MatchCriteria;
exports["default"] = _default;