"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ClientAssociation = _interopRequireDefault(require("./ClientAssociation"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The Participant model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Participant
 * @version 9.14.0
 */
var Participant = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Participant</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Participant
   */
  function Participant() {
    _classCallCheck(this, Participant);
    Participant.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(Participant, [{
    key: "getId",
    value:
    /**
         * Returns The unique ID of the participant.
         * @return {String}
         */
    function getId() {
      return this.id;
    }

    /**
     * Sets The unique ID of the participant.
     * @param {String} id The unique ID of the participant.
     */
  }, {
    key: "setId",
    value: function setId(id) {
      this['id'] = id;
    }
    /**
         * Returns The id of the associated user.
         * @return {String}
         */
  }, {
    key: "getUserId",
    value: function getUserId() {
      return this.userId;
    }

    /**
     * Sets The id of the associated user.
     * @param {String} userId The id of the associated user.
     */
  }, {
    key: "setUserId",
    value: function setUserId(userId) {
      this['userId'] = userId;
    }
    /**
         * Returns Number of messages the user has not yet read.
         * @return {Number}
         */
  }, {
    key: "getUnreadCount",
    value: function getUnreadCount() {
      return this.unreadCount;
    }

    /**
     * Sets Number of messages the user has not yet read.
     * @param {Number} unreadCount Number of messages the user has not yet read.
     */
  }, {
    key: "setUnreadCount",
    value: function setUnreadCount(unreadCount) {
      this['unreadCount'] = unreadCount;
    }
    /**
         * Returns Represents the clients that are active in the conversation for a particular user. A participant can have multiple clientAssociations in the case of channel transfer, business initiated conversations, or identified users. The order of the array indicates how recently a client has interacted with the conversation, with the most recent client first. The first item in the array is considered to be the user's primary client for that conversation, and will be selected first for message delivery. 
         * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ClientAssociation>}
         */
  }, {
    key: "getClientAssociations",
    value: function getClientAssociations() {
      return this.clientAssociations;
    }

    /**
     * Sets Represents the clients that are active in the conversation for a particular user. A participant can have multiple clientAssociations in the case of channel transfer, business initiated conversations, or identified users. The order of the array indicates how recently a client has interacted with the conversation, with the most recent client first. The first item in the array is considered to be the user's primary client for that conversation, and will be selected first for message delivery. 
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ClientAssociation>} clientAssociations Represents the clients that are active in the conversation for a particular user. A participant can have multiple clientAssociations in the case of channel transfer, business initiated conversations, or identified users. The order of the array indicates how recently a client has interacted with the conversation, with the most recent client first. The first item in the array is considered to be the user's primary client for that conversation, and will be selected first for message delivery. 
     */
  }, {
    key: "setClientAssociations",
    value: function setClientAssociations(clientAssociations) {
      this['clientAssociations'] = clientAssociations;
    }
    /**
         * Returns The externalId of the associated user.
         * @return {String}
         */
  }, {
    key: "getUserExternalId",
    value: function getUserExternalId() {
      return this.userExternalId;
    }

    /**
     * Sets The externalId of the associated user.
     * @param {String} userExternalId The externalId of the associated user.
     */
  }, {
    key: "setUserExternalId",
    value: function setUserExternalId(userExternalId) {
      this['userExternalId'] = userExternalId;
    }
    /**
         * Returns A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the latest message the user has read.
         * @return {String}
         */
  }, {
    key: "getLastRead",
    value: function getLastRead() {
      return this.lastRead;
    }

    /**
     * Sets A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the latest message the user has read.
     * @param {String} lastRead A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the latest message the user has read.
     */
  }, {
    key: "setLastRead",
    value: function setLastRead(lastRead) {
      this['lastRead'] = lastRead;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>Participant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Participant} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Participant} The populated <code>Participant</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Participant();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('userId')) {
          obj['userId'] = _ApiClient["default"].convertToType(data['userId'], 'String');
        }
        if (data.hasOwnProperty('unreadCount')) {
          obj['unreadCount'] = _ApiClient["default"].convertToType(data['unreadCount'], 'Number');
        }
        if (data.hasOwnProperty('clientAssociations')) {
          obj['clientAssociations'] = _ApiClient["default"].convertToType(data['clientAssociations'], [_ClientAssociation["default"]]);
        }
        if (data.hasOwnProperty('userExternalId')) {
          obj['userExternalId'] = _ApiClient["default"].convertToType(data['userExternalId'], 'String');
        }
        if (data.hasOwnProperty('lastRead')) {
          obj['lastRead'] = _ApiClient["default"].convertToType(data['lastRead'], 'String');
        }
      }
      return obj;
    }
  }]);
  return Participant;
}();
/**
 * The unique ID of the participant.
 * @member {String} id
 */
Participant.prototype['id'] = undefined;

/**
 * The id of the associated user.
 * @member {String} userId
 */
Participant.prototype['userId'] = undefined;

/**
 * Number of messages the user has not yet read.
 * @member {Number} unreadCount
 */
Participant.prototype['unreadCount'] = undefined;

/**
 * Represents the clients that are active in the conversation for a particular user. A participant can have multiple clientAssociations in the case of channel transfer, business initiated conversations, or identified users. The order of the array indicates how recently a client has interacted with the conversation, with the most recent client first. The first item in the array is considered to be the user's primary client for that conversation, and will be selected first for message delivery. 
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/ClientAssociation>} clientAssociations
 */
Participant.prototype['clientAssociations'] = undefined;

/**
 * The externalId of the associated user.
 * @member {String} userExternalId
 */
Participant.prototype['userExternalId'] = undefined;

/**
 * A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing the latest message the user has read.
 * @member {String} lastRead
 */
Participant.prototype['lastRead'] = undefined;
var _default = Participant;
exports["default"] = _default;