"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Campaign = _interopRequireDefault(require("./Campaign"));
var _Client = _interopRequireDefault(require("./Client"));
var _Device = _interopRequireDefault(require("./Device"));
var _SourceWebhook = _interopRequireDefault(require("./SourceWebhook"));
var _SourceWithCampaignWebhookAllOf = _interopRequireDefault(require("./SourceWithCampaignWebhookAllOf"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The SourceWithCampaignWebhook model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/SourceWithCampaignWebhook
 * @version 9.14.0
 */
var SourceWithCampaignWebhook = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>SourceWithCampaignWebhook</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/SourceWithCampaignWebhook
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/SourceWebhook
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/SourceWithCampaignWebhookAllOf
   */
  function SourceWithCampaignWebhook() {
    _classCallCheck(this, SourceWithCampaignWebhook);
    _SourceWebhook["default"].initialize(this);
    _SourceWithCampaignWebhookAllOf["default"].initialize(this);
    SourceWithCampaignWebhook.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(SourceWithCampaignWebhook, [{
    key: "getType",
    value:
    /**
         * Returns An identifier for the channel from which a message originated. May include one of api, sdk, messenger, or any number of other channels.
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets An identifier for the channel from which a message originated. May include one of api, sdk, messenger, or any number of other channels.
     * @param {String} type An identifier for the channel from which a message originated. May include one of api, sdk, messenger, or any number of other channels.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns Identifier indicating which integration the message was sent from. For user messages only.
         * @return {String}
         */
  }, {
    key: "getIntegrationId",
    value: function getIntegrationId() {
      return this.integrationId;
    }

    /**
     * Sets Identifier indicating which integration the message was sent from. For user messages only.
     * @param {String} integrationId Identifier indicating which integration the message was sent from. For user messages only.
     */
  }, {
    key: "setIntegrationId",
    value: function setIntegrationId(integrationId) {
      this['integrationId'] = integrationId;
    }
    /**
         * Returns Message identifier assigned by the originating channel.
         * @return {String}
         */
  }, {
    key: "getOriginalMessageId",
    value: function getOriginalMessageId() {
      return this.originalMessageId;
    }

    /**
     * Sets Message identifier assigned by the originating channel.
     * @param {String} originalMessageId Message identifier assigned by the originating channel.
     */
  }, {
    key: "setOriginalMessageId",
    value: function setOriginalMessageId(originalMessageId) {
      this['originalMessageId'] = originalMessageId;
    }
    /**
         * Returns A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing when the third-party channel received the message.
         * @return {String}
         */
  }, {
    key: "getOriginalMessageTimestamp",
    value: function getOriginalMessageTimestamp() {
      return this.originalMessageTimestamp;
    }

    /**
     * Sets A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing when the third-party channel received the message.
     * @param {String} originalMessageTimestamp A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing when the third-party channel received the message.
     */
  }, {
    key: "setOriginalMessageTimestamp",
    value: function setOriginalMessageTimestamp(originalMessageTimestamp) {
      this['originalMessageTimestamp'] = originalMessageTimestamp;
    }
    /**
         * Returns The client from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Client}
         */
  }, {
    key: "getClient",
    value: function getClient() {
      return this.client;
    }

    /**
     * Sets The client from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Client} client The client from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook.
     */
  }, {
    key: "setClient",
    value: function setClient(client) {
      this['client'] = client;
    }
    /**
         * Returns The device from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Device}
         */
  }, {
    key: "getDevice",
    value: function getDevice() {
      return this.device;
    }

    /**
     * Sets The device from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Device} device The device from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook
     */
  }, {
    key: "setDevice",
    value: function setDevice(device) {
      this['device'] = device;
    }
    /**
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Campaign}
         */
  }, {
    key: "getCampaign",
    value: function getCampaign() {
      return this.campaign;
    }

    /**
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Campaign} campaign
     */
  }, {
    key: "setCampaign",
    value: function setCampaign(campaign) {
      this['campaign'] = campaign;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>SourceWithCampaignWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/SourceWithCampaignWebhook} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/SourceWithCampaignWebhook} The populated <code>SourceWithCampaignWebhook</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new SourceWithCampaignWebhook();
        _SourceWebhook["default"].constructFromObject(data, obj);
        _SourceWithCampaignWebhookAllOf["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('integrationId')) {
          obj['integrationId'] = _ApiClient["default"].convertToType(data['integrationId'], 'String');
        }
        if (data.hasOwnProperty('originalMessageId')) {
          obj['originalMessageId'] = _ApiClient["default"].convertToType(data['originalMessageId'], 'String');
        }
        if (data.hasOwnProperty('originalMessageTimestamp')) {
          obj['originalMessageTimestamp'] = _ApiClient["default"].convertToType(data['originalMessageTimestamp'], 'String');
        }
        if (data.hasOwnProperty('client')) {
          obj['client'] = _ApiClient["default"].convertToType(data['client'], _Client["default"]);
        }
        if (data.hasOwnProperty('device')) {
          obj['device'] = _ApiClient["default"].convertToType(data['device'], _Device["default"]);
        }
        if (data.hasOwnProperty('campaign')) {
          obj['campaign'] = _Campaign["default"].constructFromObject(data['campaign']);
        }
      }
      return obj;
    }
  }]);
  return SourceWithCampaignWebhook;
}();
/**
 * An identifier for the channel from which a message originated. May include one of api, sdk, messenger, or any number of other channels.
 * @member {String} type
 */
SourceWithCampaignWebhook.prototype['type'] = undefined;

/**
 * Identifier indicating which integration the message was sent from. For user messages only.
 * @member {String} integrationId
 */
SourceWithCampaignWebhook.prototype['integrationId'] = undefined;

/**
 * Message identifier assigned by the originating channel.
 * @member {String} originalMessageId
 */
SourceWithCampaignWebhook.prototype['originalMessageId'] = undefined;

/**
 * A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing when the third-party channel received the message.
 * @member {String} originalMessageTimestamp
 */
SourceWithCampaignWebhook.prototype['originalMessageTimestamp'] = undefined;

/**
 * The client from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Client} client
 */
SourceWithCampaignWebhook.prototype['client'] = undefined;

/**
 * The device from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Device} device
 */
SourceWithCampaignWebhook.prototype['device'] = undefined;

/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Campaign} campaign
 */
SourceWithCampaignWebhook.prototype['campaign'] = undefined;

// Implement SourceWebhook interface:
/**
 * An identifier for the channel from which a message originated. May include one of api, sdk, messenger, or any number of other channels.
 * @member {String} type
 */
_SourceWebhook["default"].prototype['type'] = undefined;
/**
 * Identifier indicating which integration the message was sent from. For user messages only.
 * @member {String} integrationId
 */
_SourceWebhook["default"].prototype['integrationId'] = undefined;
/**
 * Message identifier assigned by the originating channel.
 * @member {String} originalMessageId
 */
_SourceWebhook["default"].prototype['originalMessageId'] = undefined;
/**
 * A datetime string with the format YYYY-MM-DDThh:mm:ss.SSSZ representing when the third-party channel received the message.
 * @member {String} originalMessageTimestamp
 */
_SourceWebhook["default"].prototype['originalMessageTimestamp'] = undefined;
/**
 * The client from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Client} client
 */
_SourceWebhook["default"].prototype['client'] = undefined;
/**
 * The device from which the user authored the message or activity, if applicable. This field will only be present if the `includeFullSource` option is enabled for the webhook
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Device} device
 */
_SourceWebhook["default"].prototype['device'] = undefined;
// Implement SourceWithCampaignWebhookAllOf interface:
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Campaign} campaign
 */
_SourceWithCampaignWebhookAllOf["default"].prototype['campaign'] = undefined;
var _default = SourceWithCampaignWebhook;
exports["default"] = _default;