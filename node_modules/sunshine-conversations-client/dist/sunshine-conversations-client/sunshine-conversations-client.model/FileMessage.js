"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); } /**
                                                                                                                                                                                                                                                                                                                                                                                               * Sunshine Conversations API
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * The version of the OpenAPI document: 9.12.0
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
                                                                                                                                                                                                                                                                                                                                                                                               * https://openapi-generator.tech
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * OpenAPI Generator version: 4.3.1
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               * Do not edit the class manually.
                                                                                                                                                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                                                                                                                                                               */
/**
 * The FileMessage model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/FileMessage
 * @version 9.14.0
 */
var FileMessage = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>FileMessage</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/FileMessage
   * @param type {String} The type of message.
   * @param mediaUrl {String} The URL for media, such as an image, attached to the message.
   */
  function FileMessage(type, mediaUrl) {
    _classCallCheck(this, FileMessage);
    FileMessage.initialize(this, type, mediaUrl);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  _createClass(FileMessage, [{
    key: "getType",
    value:
    /**
         * Returns The type of message.
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The type of message.
     * @param {String} type The type of message.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns The URL for media, such as an image, attached to the message.
         * @return {String}
         */
  }, {
    key: "getMediaUrl",
    value: function getMediaUrl() {
      return this.mediaUrl;
    }

    /**
     * Sets The URL for media, such as an image, attached to the message.
     * @param {String} mediaUrl The URL for media, such as an image, attached to the message.
     */
  }, {
    key: "setMediaUrl",
    value: function setMediaUrl(mediaUrl) {
      this['mediaUrl'] = mediaUrl;
    }
    /**
         * Returns The size of the media.
         * @return {Number}
         */
  }, {
    key: "getMediaSize",
    value: function getMediaSize() {
      return this.mediaSize;
    }

    /**
     * Sets The size of the media.
     * @param {Number} mediaSize The size of the media.
     */
  }, {
    key: "setMediaSize",
    value: function setMediaSize(mediaSize) {
      this['mediaSize'] = mediaSize;
    }
    /**
         * Returns The media type of the file.
         * @return {String}
         */
  }, {
    key: "getMediaType",
    value: function getMediaType() {
      return this.mediaType;
    }

    /**
     * Sets The media type of the file.
     * @param {String} mediaType The media type of the file.
     */
  }, {
    key: "setMediaType",
    value: function setMediaType(mediaType) {
      this['mediaType'] = mediaType;
    }
    /**
         * Returns An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
         * @return {String}
         */
  }, {
    key: "getAltText",
    value: function getAltText() {
      return this.altText;
    }

    /**
     * Sets An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
     * @param {String} altText An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
     */
  }, {
    key: "setAltText",
    value: function setAltText(altText) {
      this['altText'] = altText;
    }
    /**
         * Returns The text content of the message.
         * @return {String}
         */
  }, {
    key: "getText",
    value: function getText() {
      return this.text;
    }

    /**
     * Sets The text content of the message.
     * @param {String} text The text content of the message.
     */
  }, {
    key: "setText",
    value: function setText(text) {
      this['text'] = text;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type, mediaUrl) {
      obj['type'] = type;
      obj['mediaUrl'] = mediaUrl;
    }

    /**
     * Constructs a <code>FileMessage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/FileMessage} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/FileMessage} The populated <code>FileMessage</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new FileMessage();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('mediaUrl')) {
          obj['mediaUrl'] = _ApiClient["default"].convertToType(data['mediaUrl'], 'String');
        }
        if (data.hasOwnProperty('mediaSize')) {
          obj['mediaSize'] = _ApiClient["default"].convertToType(data['mediaSize'], 'Number');
        }
        if (data.hasOwnProperty('mediaType')) {
          obj['mediaType'] = _ApiClient["default"].convertToType(data['mediaType'], 'String');
        }
        if (data.hasOwnProperty('altText')) {
          obj['altText'] = _ApiClient["default"].convertToType(data['altText'], 'String');
        }
        if (data.hasOwnProperty('text')) {
          obj['text'] = _ApiClient["default"].convertToType(data['text'], 'String');
        }
      }
      return obj;
    }
  }]);
  return FileMessage;
}();
/**
 * The type of message.
 * @member {String} type
 * @default 'file'
 */
FileMessage.prototype['type'] = 'file';

/**
 * The URL for media, such as an image, attached to the message.
 * @member {String} mediaUrl
 */
FileMessage.prototype['mediaUrl'] = undefined;

/**
 * The size of the media.
 * @member {Number} mediaSize
 */
FileMessage.prototype['mediaSize'] = undefined;

/**
 * The media type of the file.
 * @member {String} mediaType
 */
FileMessage.prototype['mediaType'] = undefined;

/**
 * An optional description of the file for accessibility purposes. The field will be saved by default with the file name as the value.
 * @member {String} altText
 */
FileMessage.prototype['altText'] = undefined;

/**
 * The text content of the message.
 * @member {String} text
 */
FileMessage.prototype['text'] = undefined;
var _default = FileMessage;
exports["default"] = _default;